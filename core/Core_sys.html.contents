 
      <pre><span><span class="keyword">val</span> argv : <code class="type">string array</code></span></pre>
      <div class="info">The command line arguments given to the process.  The first element is the
    command name used to invoke the program.  The following elements are the
    command-line arguments given to the program.</div>
    
 
      <pre><span><span class="keyword">val</span> executable_name : <code class="type">string</code></span></pre>
      <div class="info">The name of the file containing the executable currently running.</div>
    
<br/>For all of the following functions, <code class="code">?follow_symlinks</code> defaults to <code class="code">true</code>.<br/>
	  
 
      <pre><span><span class="keyword">val</span> file_exists : <code class="type">?follow_symlinks:bool -&gt; string -&gt; [ `No | `Unknown | `Yes ]</code></span></pre>
      <div class="info"><code class="code">file_exists ~follow_symlinks path</code><br/>   Test whether the file in <code class="code">path</code> exists on the file system.
   If <code class="code">follow_symlinks</code> is <code class="code">true</code> and <code class="code">path</code> is a symlink the result concerns
   the target of the symlink.<br/>   <code class="code">`Unknown</code> is returned for files for which we cannot successfully determine
   whether they are on the system or not (e.g. files in directories to which we
   do not have read permission).</div>
    
 
      <pre><span><span class="keyword">val</span> file_exists_exn : <code class="type">?follow_symlinks:bool -&gt; string -&gt; bool</code></span></pre>
      <div class="info">Same as <code class="code">file_exists</code> but blows up on <code class="code">`Unknown</code> </div>
    
 
      <pre><span><span class="keyword">val</span> is_directory : <code class="type">?follow_symlinks:bool -&gt; string -&gt; [ `No | `Unknown | `Yes ]</code></span></pre>
      <div class="info">Returns <code class="code">`Yes</code> if the file exists and is a directory</div>
    
 
      <pre><span><span class="keyword">val</span> is_file : <code class="type">?follow_symlinks:bool -&gt; string -&gt; [ `No | `Unknown | `Yes ]</code></span></pre>
      <div class="info">Returns <code class="code">`Yes</code> if the file exists and is a regular file</div>
    
 
      <pre><span><span class="keyword">val</span> is_directory_exn : <code class="type">?follow_symlinks:bool -&gt; string -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_file_exn : <code class="type">?follow_symlinks:bool -&gt; string -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remove : <code class="type">string -&gt; unit</code></span></pre>
      <div class="info">Remove the given file name from the file system.</div>
    
 
      <pre><span><span class="keyword">val</span> rename : <code class="type">string -&gt; string -&gt; unit</code></span></pre>
      <div class="info">Rename a file. The first argument is the old name and the second is the new
    name. If there is already another file under the new name, <code class="code">rename</code> may
    replace it, or raise an exception, depending on your operating system.</div>
    
 
      <pre><span><span class="keyword">val</span> getenv : <code class="type">string -&gt; string option</code></span></pre>
      <div class="info">Return the value associated to a variable in the process environment.  Return <code class="code">None</code>
    if the variable is unbound.</div>
    
 
      <pre><span><span class="keyword">val</span> getenv_exn : <code class="type">string -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> command : <code class="type">string -&gt; int</code></span></pre>
      <div class="info">Execute the given shell command and return its exit code.</div>
    
 
      <pre><span><span class="keyword">val</span> command_exn : <code class="type">string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> chdir : <code class="type">string -&gt; unit</code></span></pre>
      <div class="info">Change the current working directory of the process.</div>
    
 
      <pre><span><span class="keyword">val</span> getcwd : <code class="type">unit -&gt; string</code></span></pre>
      <div class="info">Return the current working directory of the process.</div>
    
 
      <pre><span><span class="keyword">val</span> readdir : <code class="type">string -&gt; string array</code></span></pre>
      <div class="info">Return the names of all files present in the given directory.  Names
    denoting the current directory and the parent directory (<code class="code">&quot;.&quot;</code> and <code class="code">&quot;..&quot;</code> in
    Unix) are not returned.  Each string in the result is a file name rather
    than a complete path.  There is no guarantee that the name strings in the
    resulting array will appear in any specific order; they are not, in
    particular, guaranteed to appear in alphabetical order.</div>
    
 
      <pre><span><span class="keyword">val</span> fold_dir : <code class="type">init:'acc -&gt; f:('acc -&gt; string -&gt; 'acc) -&gt; string -&gt; 'acc</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ls_dir : <code class="type">string -&gt; string list</code></span></pre>
      <div class="info">Same as <code class="code">readdir</code>, but return a list rather than an array.</div>
    
 
      <pre><span><span class="keyword">val</span> interactive : <code class="type">bool <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      <div class="info">This reference is initially set to <code class="code">false</code> in standalone programs and to
    <code class="code">true</code> if the code is being executed under the interactive toplevel system
    <code class="code">ocaml</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> os_type : <code class="type">string</code></span></pre>
      <div class="info">Operating system currently executing the Caml program. One of<ul><li> <code class="code">&quot;Unix&quot;</code> (for all Unix versions, including Linux and Mac OS X),</li><li> <code class="code">&quot;Win32&quot;</code> (for MS-Windows, OCaml compiled with MSVC++ or Mingw),</li><li> <code class="code">&quot;Cygwin&quot;</code> (for MS-Windows, OCaml compiled with Cygwin). </li></ul></div>
    
 
      <pre><span><span class="keyword">val</span> word_size : <code class="type">int</code></span></pre>
      <div class="info">Size of one word on the machine currently executing the Caml program, in
    bits: 32 or 64.</div>
    
<pre><span id="EXCEPTIONBreak"><span class="keyword">exception</span> Break</span></pre><div class="info">Exception raised on interactive interrupt if TODO reference : Sys.catch_break is on.</div>
 
      <pre><span><span class="keyword">val</span> catch_break : <code class="type">bool -&gt; unit</code></span></pre>
      <div class="info">Warning: this function clobbers the Signal.int (SIGINT) handler.  SIGINT is the
    signal that's sent to your program when you hit CTRL-C.<br/>    Warning: catch_break uses deep ocaml runtime magic to raise Sys.Break inside of the
    main execution context.  Consider explicitly handling Signal.int instead.  If
    all you want to do is terminate on CTRL-C you don't have to do any special setup,
    that's the default behavior.<br/>   <code class="code">catch_break</code> governs whether interactive interrupt (ctrl-C) terminates the
    program or raises the <code class="code">Break</code> exception.  Call <code class="code">catch_break true</code> to enable
    raising <code class="code">Break</code>, and <code class="code">catch_break false</code> to let the system terminate the
    program on user interrupt.</div>
    
 
      <pre><span><span class="keyword">val</span> ocaml_version : <code class="type">string</code></span></pre>
      <div class="info"><code class="code">ocaml_version</code> is the version of Objective Caml.  It is a string of the form
    <code class="code">&quot;major.minor[.patchlevel][+additional-info]&quot;</code>, where <code class="code">major</code>, <code class="code">minor</code>, and
    <code class="code">patchlevel</code> are integers, and <code class="code">additional-info</code> is an arbitrary string. The
    <code class="code">[.patchlevel]</code> and <code class="code">[+additional-info]</code> parts may be absent.</div>
    
 
      <pre><span><span class="keyword">val</span> execution_mode : <code class="type">unit -&gt; [ `Bytecode | `Native ]</code></span></pre>
      <div class="info"><code class="code">execution_mode</code> tests whether the code being executed was compiled natively
    or to bytecode.</div>
    
 
      <pre><span><span class="keyword">val</span> c_int_size : <code class="type">unit -&gt; int</code></span></pre>
      <div class="info"><code class="code">c_int_size</code> returns the number of bits in a C <code class="code">int</code>. Note that this can be
    different from <code class="code">word_size</code>. For example, Linux x86-64 should have
    <code class="code">word_size = 64</code>, but <code class="code">c_int_size () = 32</code> </div>
    

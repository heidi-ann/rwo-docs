<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type">float</code> <span class="keyword">private</span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Span.Parts.html">Parts</a> : <code class="code">sig</code> <a href="Span.Parts.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Span.Parts.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Comparable_binable.html">Core_kernel.Std.Comparable_binable</a></code> with type t = <a href="Span.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Comparable_binable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Comparable.With_zero.html">Core_kernel.Std.Comparable.With_zero</a></code> with type t = <a href="Span.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Comparable.With_zero.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Floatable.html">Core_kernel.Std.Floatable</a></code> with type t = <a href="Span.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Floatable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Hashable_binable.html">Core_kernel.Std.Hashable_binable</a></code> with type t = <a href="Span.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Hashable_binable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Pretty_printer.S.html">Core_kernel.Std.Pretty_printer.S</a></code> with type t = <a href="Span.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Pretty_printer.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Robustly_comparable.html">Core_kernel.Std.Robustly_comparable</a></code> with type t = <a href="Span.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Robustly_comparable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_string : <code class="type">string -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> nanosecond : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> microsecond : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> millisecond : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> second : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> minute : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> hour : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> day : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> epsilon : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> zero : <code class="type"><a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?sign:<a href="../core_kernel/Std.Float.Sign.html#TYPEt">Core_kernel.Std.Float.Sign.t</a> -&gt;
?day:int -&gt;
?hr:int -&gt; ?min:int -&gt; ?sec:int -&gt; ?ms:int -&gt; ?us:int -&gt; unit -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_parts : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.Parts.html#TYPEt">Parts.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_ns : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_us : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_ms : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_sec : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_int_sec : <code class="type">int -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_min : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_hr : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_day : <code class="type">float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_ns : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_us : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_ms : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_sec : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_min : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_hr : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_day : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> + : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      <div class="info"><br/><h6 id="6_TITLE">Basic operations on spans</h6><br/> </div>
    
 
      <pre><span><span class="keyword">val</span> - : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> abs : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> neg : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scale : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> / : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> // : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="Span.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_short_string : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; string</code></span></pre>
      <div class="info"><code class="code">to_short_string t</code> pretty-prints approximate time span using no more than
    five characters if the span is positive, and six if the span is negative.
    Examples
    <ul><li><code class="code">&quot;10ms&quot;</code> = 10 milliseconds</li><li><code class="code">&quot;4s&quot;</code> = 4 seconds</li><li><code class="code">&quot;5m&quot;</code> = 5 minutes</li><li><code class="code">&quot;4h&quot;</code> = 4 hours</li></ul><br/>    only the most significant denomination is shown.</div>
    
 
      <pre><span><span class="keyword">val</span> randomize : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; percent:float -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">randomize t ~percent</code> returns a span +/- percent * original span.  Percent must be
    between 0 and 1, and must be positive.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Span.Stable.html">Stable</a> : <code class="code">sig</code> <a href="Span.Stable.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Span.Stable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Span.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Span.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Type_class.html#TYPEt">Core_kernel.Std.Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Read_ml.html#TYPEreader">Core_kernel.Std.Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core_kernel.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">(int -&gt; <a href="Span.html#TYPEt">t</a>) <a href="../core_kernel/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core_kernel.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Type_class.html#TYPEreader">Core_kernel.Std.Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Size.html#TYPEsizer">Core_kernel.Std.Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Write_ml.html#TYPEwriter">Core_kernel.Std.Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Unsafe_write_c.html#TYPEwriter">Core_kernel.Std.Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type"><a href="Span.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Type_class.html#TYPEwriter">Core_kernel.Std.Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Basic operations on spans</h6><br/> <br/>
	  
<br/>absolute value<br/>
	  
<br/>negation<br/>
	  
<br/><code class="code">to_short_string t</code> pretty-prints approximate time span using no more than
    five characters if the span is positive, and six if the span is negative.
    Examples
    <ul><li><code class="code">&quot;10ms&quot;</code> = 10 milliseconds</li><li><code class="code">&quot;4s&quot;</code> = 4 seconds</li><li><code class="code">&quot;5m&quot;</code> = 5 minutes</li><li><code class="code">&quot;4h&quot;</code> = 4 hours</li></ul><br/>    only the most significant denomination is shown.<br/>
	  
<br/><code class="code">randomize t ~percent</code> returns a span +/- percent * original span.  Percent must be
    between 0 and 1, and must be positive.<br/>
	  

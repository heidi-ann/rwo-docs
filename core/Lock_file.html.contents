 
      <pre><span><span class="keyword">val</span> create : <code class="type">?message:string -&gt;
?close_on_exec:bool -&gt; ?unlink_on_exit:bool -&gt; string -&gt; bool</code></span></pre>
      <div class="info"><code class="code">create ?close_on_exec ?message path</code> tries to create a file at <code class="code">path</code> containing the
    text <code class="code">message</code>, which defaults to the pid of the locking process.  It returns true on
    success, false on failure.  Note: there is no way to release the lock or the fd
    created inside!  It will only be released when the process dies. If close_on_exec is
    false, then the lock will not be released until children created via fork and exec
    also terminate. If not specified, close_on_exec=true.  Note that by default, the lock
    file is not cleaned up for you when the process exits. If you pass
    <code class="code">unlink_on_exit:true</code>, an at_exit handler will be set up to remove the lock-file on
    program termination.</div>
    
 
      <pre><span><span class="keyword">val</span> create_exn : <code class="type">?message:string -&gt;
?close_on_exec:bool -&gt; ?unlink_on_exit:bool -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">create_exn ?message path</code> is like <code class="code">create</code> except that it throws an exception on
    failure instead of returning a boolean value</div>
    
 
      <pre><span><span class="keyword">val</span> blocking_create : <code class="type">?message:string -&gt;
?close_on_exec:bool -&gt; ?unlink_on_exit:bool -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">blocking_create t</code> tries to create the lock. If another process holds the lock this
    function will wait until it is released.</div>
    
 
      <pre><span><span class="keyword">val</span> is_locked : <code class="type">string -&gt; bool</code></span></pre>
      <div class="info"><code class="code">is_locked path</code> returns true when the file at <code class="code">path</code> exists and is locked, false
    otherwise.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Lock_file.Nfs.html">Nfs</a> : <code class="code">sig</code> <a href="Lock_file.Nfs.html">..</a> <code class="code">end</code></pre><div class="info">An implementation neutral NFS lock file scheme that relies on the atomicity of link
    over NFS (see NFS Illustrated, atomicity for more information).  Rather than relying
    on a working traditional advisory lock system over NFS we create a hard link between
    the file given to the create call and a new file &lt;filename&gt;.nfs_lock.  This link call
    is atomic (in that it succeeds or fails) across all systems that have the same
    filesystem mounted.  The link file must be cleaned up on program exit (normally
    accomplished by an at_exit handler, but see caveats below).<br/>    There are a few caveats compared to local file locks:<br/>    - These calls require the locker to have write access to the directory containing the
      file being locked.<br/>    - Unlike a normal flock call the lock may not be removed when the calling program
      exits (in particular if it is killed with SIGKILL).</div>
	<div class="content" style="display:none">
	<div file="Lock_file.Nfs.html.contents" class="content_to_load"> </div>
	</div>
  </div>

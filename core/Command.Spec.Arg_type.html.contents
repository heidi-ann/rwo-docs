<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?complete:(<a href="../core_kernel/Std.Univ_map.html#TYPEt">Core_kernel.Std.Univ_map.t</a> -&gt; part:string -&gt; string list) -&gt;
?key:'a <a href="../core_kernel/Std.Univ_map.Multi.Key.html#TYPEt">Core_kernel.Std.Univ_map.Multi.Key.t</a> -&gt; (string -&gt; 'a) -&gt; 'a <a href="Command.Spec.Arg_type.html#TYPEt">t</a></code></span></pre>
      <div class="info">an argument type includes information about how to parse values of that type from
        the command line, and (optionally) how to auto-complete partial arguments of that
        type via bash's programmable TAB-completion.  In addition to the argument prefix,
        autocompletion also has access to any previously parsed arguments in the form of a
        heterogeneous map into which previously parsed arguments may register themselves by
        providing a Univ_map.Key using the ~key argument to <code class="code">create</code>.<br/>        If the <code class="code">of_string</code> function raises an exception, command line parsing will be
        aborted and the exception propagated up to top-level and printed along with
        command-line help.</div>
    
 
      <pre><span><span class="keyword">val</span> of_map : <code class="type">?key:'a <a href="../core_kernel/Std.Univ_map.Multi.Key.html#TYPEt">Core_kernel.Std.Univ_map.Multi.Key.t</a> -&gt;
'a <a href="../core_kernel/Std.String.Map.html#TYPEt">Core_kernel.Std.String.Map.t</a> -&gt; 'a <a href="Command.Spec.Arg_type.html#TYPEt">t</a></code></span></pre>
      <div class="info">an auto-completing Arg_type over a finite set of values</div>
    
 
      <pre><span><span class="keyword">val</span> of_alist_exn : <code class="type">?key:'a <a href="../core_kernel/Std.Univ_map.Multi.Key.html#TYPEt">Core_kernel.Std.Univ_map.Multi.Key.t</a> -&gt; (string * 'a) list -&gt; 'a <a href="Command.Spec.Arg_type.html#TYPEt">t</a></code></span></pre>
      <div class="info">convenience wrapper for <code class="code">of_map</code>.  Raises on duplicate keys</div>
    

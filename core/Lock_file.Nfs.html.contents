 
      <pre><span><span class="keyword">val</span> create : <code class="type">?message:string -&gt; string -&gt; bool</code></span></pre>
      <div class="info"><code class="code">lock ?message path</code> tries to create and lock the file at <code class="code">path</code> by creating a hard
      link to <code class="code">path</code>.nfs_lock.  The contents of path will be replaced with a sexp
      containing the caller's hostname and pid, and the optional <code class="code">message</code>.<br/>      Efforts will be made to release this lock when the calling program exits. But there
      is no guarantee that this will occur under some types of program crash. If the
      program crashes without removing the lock file an attempt will be made to clean up
      on restart by checking the hostname and pid stored in the lockfile.</div>
    
 
      <pre><span><span class="keyword">val</span> create_exn : <code class="type">?message:string -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">create_exn ?message path</code> like create, but throws an exception when it fails to
      obtain the lock</div>
    
 
      <pre><span><span class="keyword">val</span> blocking_create : <code class="type">?message:string -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">blocking_create ?message path</code> like create, but sleeps for 1 second between lock
      attempts and does not return until it succeeds</div>
    
 
      <pre><span><span class="keyword">val</span> critical_section : <code class="type">?message:string -&gt; string -&gt; f:(unit -&gt; 'a) -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">critical_section ?message path ~f</code> wrap function <code class="code">f</code> (including exceptions escaping
      it) by first locking (using TODO reference : create_exn) and then unlocking the given lock
      file.</div>
    
 
      <pre><span><span class="keyword">val</span> get_hostname_and_pid : <code class="type">string -&gt; (string * <a href="../core_kernel/Std.Pid.html#TYPEt">Core_kernel.Std.Pid.t</a>) option</code></span></pre>
      <div class="info"><code class="code">get_hostname_and_pid path</code> reads the lock file at <code class="code">path</code> and returns the hostname
      and path in the file.  Returns <code class="code">None</code> if the file cannot be read.</div>
    
 
      <pre><span><span class="keyword">val</span> get_message : <code class="type">string -&gt; string option</code></span></pre>
      <div class="info"><code class="code">get_message path</code> reads the lock file at <code class="code">path</code> and returns the message in the
      file.  Returns <code class="code">None</code> if the file cannot be read.</div>
    

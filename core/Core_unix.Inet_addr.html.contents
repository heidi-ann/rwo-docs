<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type"><a href="../otherlibs/Unix.html#TYPEinet_addr">Unix.inet_addr</a></code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core_kernel/Std.Comparable.S.html">Core_kernel.Std.Comparable.S</a></code> with type t = <a href="Core_unix.Inet_addr.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core_kernel/Std.Comparable.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> of_string : <code class="type">string -&gt; <a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      <div class="info">Conversion from the printable representation of an Internet address to its internal
      representation.  The argument string consists of 4 numbers separated by periods
      (<code class="code">XXX.YYY.ZZZ.TTT</code>) for IPv4 addresses, and up to 8 numbers separated by colons for
      IPv6 addresses.  Raise <code class="code">Failure</code> when given a string that does not match these
      formats.</div>
    
 
      <pre><span><span class="keyword">val</span> of_string_or_getbyname : <code class="type">string -&gt; <a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      <div class="info">Call <code class="code">of_string</code> and if that fails, use <code class="code">Host.getbyname</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> -&gt; string</code></span></pre>
      <div class="info">Return the printable representation of the given Internet address.  See <code class="code">of_string</code>
      for a description of the printable representation.</div>
    
 
      <pre><span><span class="keyword">val</span> bind_any : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      <div class="info">A special address, for use only with <code class="code">bind</code>, representing all the Internet addresses
      that the host machine possesses.</div>
    
 
      <pre><span><span class="keyword">val</span> bind_any_inet6 : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> localhost : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      <div class="info">Special addresses representing the host machine.</div>
    
 
      <pre><span><span class="keyword">val</span> localhost_inet6 : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> inet4_addr_of_int32 : <code class="type"><a href="../core_kernel/Std.Int32.html#TYPEt">Core_kernel.Std.Int32.t</a> -&gt; <a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      <div class="info">Some things (like the kernel) report addresses as hex or decimal strings.
      Provide conversion functions.</div>
    
 
      <pre><span><span class="keyword">val</span> inet4_addr_to_int32_exn : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> -&gt; <a href="../core_kernel/Std.Int32.html#TYPEt">Core_kernel.Std.Int32.t</a></code></span></pre>
      <div class="info"><code class="code">inet4_addr_to_int32_exn t = 0l</code> when <code class="code">t = Inet_addr.of_string (&quot;0.0.0.0&quot;)</code>.
      An exception is raised if <code class="code">t</code> is a not an IPv4 address.</div>
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Core_unix.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Type_class.html#TYPEt">Core_kernel.Std.Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Read_ml.html#TYPEreader">Core_kernel.Std.Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core_kernel.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">(int -&gt; <a href="Core_unix.Inet_addr.html#TYPEt">t</a>) <a href="../core_kernel/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core_kernel.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Type_class.html#TYPEreader">Core_kernel.Std.Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Size.html#TYPEsizer">Core_kernel.Std.Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Write_ml.html#TYPEwriter">Core_kernel.Std.Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Unsafe_write_c.html#TYPEwriter">Core_kernel.Std.Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type"><a href="Core_unix.Inet_addr.html#TYPEt">t</a> <a href="../core_kernel/Std.Bin_prot.Type_class.html#TYPEwriter">Core_kernel.Std.Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/>Conversion from the printable representation of an Internet address to its internal
      representation.  The argument string consists of 4 numbers separated by periods
      (<code class="code">XXX.YYY.ZZZ.TTT</code>) for IPv4 addresses, and up to 8 numbers separated by colons for
      IPv6 addresses.  Raise <code class="code">Failure</code> when given a string that does not match these
      formats.<br/>
	  
<br/>Call <code class="code">of_string</code> and if that fails, use <code class="code">Host.getbyname</code>.<br/>
	  
<br/>Return the printable representation of the given Internet address.  See <code class="code">of_string</code>
      for a description of the printable representation.<br/>
	  
<br/>A special address, for use only with <code class="code">bind</code>, representing all the Internet addresses
      that the host machine possesses.<br/>
	  
<br/>Special addresses representing the host machine.<br/>
	  
<br/>Some things (like the kernel) report addresses as hex or decimal strings.
      Provide conversion functions.<br/>
	  
<br/><code class="code">inet4_addr_to_int32_exn t = 0l</code> when <code class="code">t = Inet_addr.of_string (&quot;0.0.0.0&quot;)</code>.
      An exception is raised if <code class="code">t</code> is a not an IPv4 address.<br/>
	  

<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Identifiable.S.html">Identifiable.S</a></code> with type t = <a href="User_and_group.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Identifiable.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> create : <code class="type">user:string -&gt; group:string -&gt; <a href="User_and_group.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> user : <code class="type"><a href="User_and_group.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> group : <code class="type"><a href="User_and_group.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> for_this_process : <code class="type">unit -&gt; <a href="User_and_group.html#TYPEt">t</a> <a href="Or_error.html#TYPEt">Or_error.t</a></code></span></pre>
      <div class="info">Get the <code class="code">t</code> for the current process.  If you're using async, there is a wrapper,
    <code class="code">Async.Std.User_and_group</code>, that doesn't do blocking calls.</div>
    
 
      <pre><span><span class="keyword">val</span> for_this_process_exn : <code class="type">unit -&gt; <a href="User_and_group.html#TYPEt">t</a></code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="User_and_group.Stable.html">Stable</a> : <code class="code">sig</code> <a href="User_and_group.Stable.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="User_and_group.Stable.html.contents" class="content_to_load"> </div>
	</div>
  </div>

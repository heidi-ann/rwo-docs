<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">int -&gt; 'a <a href="Squeue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create maxsize</code> returns a synchronized queue bounded to have no more than
    <code class="code">maxsize</code> elements.</div>
    
 
      <pre><span><span class="keyword">val</span> push : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info">Blocks until there's room on the queue, then pushes.</div>
    
 
      <pre><span><span class="keyword">val</span> push_uncond : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info">Does not block, may grow the queue past maxsize</div>
    
 
      <pre><span><span class="keyword">val</span> push_or_drop : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a -&gt; bool</code></span></pre>
      <div class="info">Pushes an event on the queue if the queue is less than maxsize, otherwise drops it.
  Returns true if the push was successful</div>
    
 
      <pre><span><span class="keyword">val</span> length : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info">returns the number of elements in the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> pop : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      <div class="info">pops an element off the queue, blocking until something is
 available</div>
    
 
      <pre><span><span class="keyword">val</span> lpop : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a * int</code></span></pre>
      <div class="info">returns the element popped and the length of the queue after
 this element was popped.</div>
    
 
      <pre><span><span class="keyword">val</span> transfer_queue_in : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a <a href="../core_kernel/Std.Queue.html#TYPEt">Core_kernel.Std.Queue.t</a> -&gt; unit</code></span></pre>
      <div class="info">Transfers all the elements from an ordinary queue into the
    squeue. Blocks until there's room on the queue, then pushes. may
    grow queue past maxsize.</div>
    
 
      <pre><span><span class="keyword">val</span> transfer_queue_in_uncond : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a <a href="../core_kernel/Std.Queue.html#TYPEt">Core_kernel.Std.Queue.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> transfer_queue : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a <a href="../core_kernel/Std.Queue.html#TYPEt">Core_kernel.Std.Queue.t</a> -&gt; unit</code></span></pre>
      <div class="info">Transfers all elements from the squeue to an ordinary queue.
    The elements remain in order.
    Waits until at least one element can be transfered.</div>
    
 
      <pre><span><span class="keyword">val</span> transfer_queue_nowait : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; 'a <a href="../core_kernel/Std.Queue.html#TYPEt">Core_kernel.Std.Queue.t</a> -&gt; unit</code></span></pre>
      <div class="info">Transfers all elements from the squeue to an ordinary queue.
    The elements remain in order.
    Does not wait for elements to arrive.</div>
    
 
      <pre><span><span class="keyword">val</span> clear : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">clears the queue</div>
    
 
      <pre><span><span class="keyword">val</span> wait_not_empty : <code class="type">'a <a href="Squeue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">wait_not_empty sq</code> Waits for something to be available. This is
    useful if you want to wait, but not take something out. This
    function is not useful in most cases, but in some complex cases it
    is essential. For example you might need to take another lock
    before you remove something from the queue for processing, you
    might want to try to take that other lock, and if it fails do
    something else.<br/>    This function is not dangerous, there is just ONE thing you HAVE
    to remember if you use it. Just because this function returns
    doesn't mean that pop will succeed, someone might have gotten
    there first, so you have to use transfer_queue_nowait if you don't
    want to block.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Squeue.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">create maxsize</code> returns a synchronized queue bounded to have no more than
    <code class="code">maxsize</code> elements.<br/>
	  
<br/>Blocks until there's room on the queue, then pushes.<br/>
	  
<br/>Does not block, may grow the queue past maxsize<br/>
	  
<br/>Pushes an event on the queue if the queue is less than maxsize, otherwise drops it.
  Returns true if the push was successful<br/>
	  
<br/>returns the number of elements in the queue.<br/>
	  
<br/>pops an element off the queue, blocking until something is
 available<br/>
	  
<br/>returns the element popped and the length of the queue after
 this element was popped.<br/>
	  
<br/>Transfers all the elements from an ordinary queue into the
    squeue. Blocks until there's room on the queue, then pushes. may
    grow queue past maxsize.<br/>
	  
<br/>Transfers all elements from the squeue to an ordinary queue.
    The elements remain in order.
    Waits until at least one element can be transfered.<br/>
	  
<br/>Transfers all elements from the squeue to an ordinary queue.
    The elements remain in order.
    Does not wait for elements to arrive.<br/>
	  
<br/>clears the queue<br/>
	  
<br/><code class="code">wait_not_empty sq</code> Waits for something to be available. This is
    useful if you want to wait, but not take something out. This
    function is not useful in most cases, but in some complex cases it
    is essential. For example you might need to take another lock
    before you remove something from the queue for processing, you
    might want to try to take that other lock, and if it fails do
    something else.<br/>    This function is not dangerous, there is just ONE thing you HAVE
    to remember if you use it. Just because this function returns
    doesn't mean that pop will succeed, someone might have gotten
    there first, so you have to use transfer_queue_nowait if you don't
    want to block.<br/>
	  

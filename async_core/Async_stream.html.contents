<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span>= <code class="type">'a <a href="Tail.Stream.html#TYPEt">Tail.Stream.t</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">('a <a href="Tail.html#TYPEt">Tail.t</a> -&gt; unit) -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create f</code> returns a stream <code class="code">t</code> and calls <code class="code">f tail</code>, where the elements of the stream
    are determined as the tail is extended, and the end of the stream is reached when the
    tail is closed.</div>
    
<pre><code><span id="TYPEnext_"><span class="keyword">type</span> <code class="type">('a, 'execution_context) </code>next_ </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTnext_.Nil"><span class="constructor">Nil</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTnext_.Cons"><span class="constructor">Cons</span></span> <span class="keyword">of</span> <code class="type">'a * ('a, 'execution_context) <a href="Raw_stream.html#TYPEt">Raw_stream.t</a></code></code></td>
	   </tr></table>
      <div class="info"><code class="code">next t</code> returns a deferred that will become determined when the next part of the
    stream is determined.  This is <code class="code">Cons (v, t')</code>, where v is the next element of the
    stream and t' is the rest of the stream, or with Nil at the end of the stream.</div>
    
<pre><span id="TYPEnext"><span class="keyword">type</span> <code class="type">'a </code>next </span>= <code class="type">('a, <a href="Execution_context.html#TYPEt">Execution_context.t</a>) <a href="Async_stream.html#TYPEnext_">next_</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> next : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Async_stream.html#TYPEnext">next</a> <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> first_exn : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">first_exn t</code> returns a deferred that becomes determined with the first element of
    <code class="code">t</code>.</div>
    
<br/>Streams can be converted to and from lists.  Although, conversion to a list returns a
    deferred, because the stream is determined asynchronously.<br/>
	  
 
      <pre><span><span class="keyword">val</span> of_list : <code class="type">'a list -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">of_list l</code> returns a stream with the elements of list l.</div>
    
 
      <pre><span><span class="keyword">val</span> to_list : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a list <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">to_list t</code> returns a deferred that will become determined with the list
   of elements in t, if the end of t is reached.</div>
    
 
      <pre><span><span class="keyword">val</span> of_fun : <code class="type">(unit -&gt; 'a <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">of_fun f</code> returns a stream whose elements are determined by calling <code class="code">f</code> forever.</div>
    
 
      <pre><span><span class="keyword">val</span> copy_to_tail : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Tail.html#TYPEt">Tail.t</a> -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">copy_to_tail t tail</code> reads elements from <code class="code">t</code> and puts them in <code class="code">tail</code>, until
    the end of <code class="code">t</code> is reached.</div>
    
<br/>Sequence operations
    ----------------------------------------------------------------------
    There are the usual sequence operations:<br/>    <span class="verbatim">      append, fold, iter, map, filter_map, take
    </span><br/>    There are also deferred variants:<br/>    <span class="verbatim">      iter', map', filter_map'
    </span><br/>    These take anonymous functions that return deferreds generalizing the usual sequence
    operation and allowing the client to control the rate at which the sequence is
    processed.<br/>
	  
 
      <pre><span><span class="keyword">val</span> append : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">append t1 t2</code> returns a stream with all the values of t1, in order, and if t1 ends,
    these values are followed by all the values of t2.</div>
    
 
      <pre><span><span class="keyword">val</span> concat : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">concat t</code> takes a stream of streams and produces a stream that is the concatenation
    of each stream in order (you see all of stream 1, then all of stream 2... etc.)</div>
    
 
      <pre><span><span class="keyword">val</span> available_now : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a list * 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">available_now t</code> returns t prefix of t that is available now, along with the rest of
    the stream.</div>
    
 
      <pre><span><span class="keyword">val</span> filter_deprecated : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; bool) -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">filter_deprecated s ~f</code> returns a stream with one element, v, for each v in s such
    with f v = true.<br/>    Using <code class="code">filter_deprecated</code> can easily lead to space leaks.  It is better to use
    <code class="code">Async.Pipe</code> than <code class="code">Async.Stream</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> filter_map_deprecated : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; 'b option) -&gt; 'b <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">filter_map_deprecated s ~f</code> returns a stream with one element, v', for each v in s
    such with f v = Some v'.<br/>    Using <code class="code">filter_map_deprecated</code> can easily lead to space leaks.  It is better to use
    <code class="code">Async.Pipe</code> than <code class="code">Async.Stream</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> fold' : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; init:'b -&gt; f:('b -&gt; 'a -&gt; 'b <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; 'b <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">fold' t ~init ~f</code> is like list fold, walking over the elements of the stream in
    order, as they become available.  <code class="code">fold'</code> returns a deferred that will yield the final
    value of the accumulator, if the end of the stream is reached.</div>
    
 
      <pre><span><span class="keyword">val</span> fold : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; init:'b -&gt; f:('b -&gt; 'a -&gt; 'b) -&gt; 'b <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">fold t ~init ~f</code> is a variant of <code class="code">fold'</code> in which <code class="code">f</code> does not return a deferred.</div>
    
 
      <pre><span><span class="keyword">val</span> iter' : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">iter' t ~f</code> applies <code class="code">f</code> to each element of the stream in turn, as they become
    available.  It continues onto the next element only after the deferred returned by <code class="code">f</code>
    becomes determined.</div>
    
 
      <pre><span><span class="keyword">val</span> closed : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">closed t</code> returns a deferred that becomes determined when the end of <code class="code">t</code> is
    reached.</div>
    
 
      <pre><span><span class="keyword">val</span> iter : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iter t ~f</code> = <code class="code">don't_wait_for (iter' t ~f:(fun a -&gt; f a; Deferred.unit))</code> </div>
    
 
      <pre><span><span class="keyword">val</span> take_until : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a> -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">take_until t d</code> returns a stream <code class="code">t'</code> that has the same elements as <code class="code">t</code> up until <code class="code">d</code>
    becomes determined.</div>
    
 
      <pre><span><span class="keyword">val</span> iter_durably' : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">iter_durably' t ~f</code> is like <code class="code">iter' t ~f</code>, except if <code class="code">f</code> raises an exception it
    continues with the next element of the stream *and* reraises the exception (to the
    monitor in scope when iter_durably was called).<br/>    <code class="code">iter_durably t ~f</code> is like <code class="code">iter t ~f</code>, except if <code class="code">f</code> raises an exception it
    continues with the next element of the stream *and* reraises the exception (to the
    monitor in scope when iter_durably was called).<br/>    <code class="code">iter_durably_report_end t ~f</code> is equivalent to <code class="code">iter_durably' t ~f:(fun x -&gt; return
    (f x))</code> but it is more efficient</div>
    
 
      <pre><span><span class="keyword">val</span> iter_durably : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; unit) -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> iter_durably_report_end : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; unit) -&gt; unit <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> length : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; int <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">length s</code> returns a deferred that is determined when the end of s is reached, taking
    the value of the number of elements in s</div>
    
 
      <pre><span><span class="keyword">val</span> map' : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; 'b <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; 'b <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">map' t f</code> creates a new stream that with one element, (f v), for each element v of
    t.</div>
    
 
      <pre><span><span class="keyword">val</span> map : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; 'b) -&gt; 'b <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">map t ~f</code> creates a new stream that with one element, (f v), for each element v of t.
    <code class="code">map t f</code> = <code class="code">map' t ~f:(fun a -&gt; return (f a))</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> first_n : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; int -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">first_n t n</code> returns a stream with the first n elements of t, if t has n or more
    elements, or it returns t.</div>
    
<br/>Stream generation
    ----------------------------------------------------------------------<br/>
	  
 
      <pre><span><span class="keyword">val</span> unfold : <code class="type">'b -&gt; f:('b -&gt; ('a * 'b) option <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">unfold b f</code> returns a stream <code class="code">a1; a2; ...; an</code> whose elements are
    determined by the equations:
    <span class="verbatim">      b0 = b
      Some (a1, b1) = f b0
      Some (a2, b2) = f b1
      ...
      None = f bn
    </span>
</div>
    
<br/>Miscellaneous operations
    ----------------------------------------------------------------------<br/>
	  
 
      <pre><span><span class="keyword">val</span> split : <code class="type">?stop:unit <a href="Deferred.html#TYPEt">Deferred.t</a> -&gt;
?f:('a -&gt; [ `Continue | `Found of 'b ]) -&gt;
'a <a href="Async_stream.html#TYPEt">t</a> -&gt;
'a <a href="Async_stream.html#TYPEt">t</a> * [ `End_of_stream | `Found of 'b * 'a <a href="Async_stream.html#TYPEt">t</a> | `Stopped of 'a <a href="Async_stream.html#TYPEt">t</a> ] <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">split ~stop ~f t</code> returns a pair <code class="code">(p, d)</code>, where <code class="code">p</code> is a prefix of <code class="code">t</code> that ends
    for one of three reasons:
    <span class="verbatim">      1. [t] ends
      2. stop becomes determined
      3. f returns `Found
    </span>
    The deferred <code class="code">d</code> describes why the prefix ended, and returns the suffix of the
    stream in case (2) or (3).</div>
    
 
      <pre><span><span class="keyword">val</span> find : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> -&gt; f:('a -&gt; bool) -&gt; [ `End_of_stream | `Found of 'a * 'a <a href="Async_stream.html#TYPEt">t</a> ] <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">find ~f t</code> returns a deferred that becomes determined when <code class="code">f x</code> is true for some
    element of <code class="code">t</code>, or if the end of the stream is reached</div>
    
 
      <pre><span><span class="keyword">val</span> ungroup : <code class="type">'a list <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">ungroup t</code> takes a stream of lists and unpacks the items from each list into a single
    stream</div>
    
 
      <pre><span><span class="keyword">val</span> interleave : <code class="type">'a <a href="Async_stream.html#TYPEt">t</a> <a href="Async_stream.html#TYPEt">t</a> -&gt; 'a <a href="Async_stream.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">interleave list</code> takes a stream of streams and returns a stream of their items
    interleaved as they become determined. The interleaved stream will be closed when the
    outer stream and all of the inner streams have been closed.</div>
    
<br/>The <code class="code">Raw</code> interface exposed here is for async's internal use only.  It must be
    exported here because we want the <code class="code">Stream.t</code> type to be abstract, so that is shows up
    nicely in type errors, yet other async code defined later needs to deal with the raw
    type.<br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Import.Raw.html">Import.Raw</a></code> with type execution_context = <a href="Execution_context.html#TYPEt">Execution_context.t</a> with type raw = ('a, 'b) <a href="Raw_stream.html#TYPEt">Raw_stream.t</a> with type t = 'a <a href="Async_stream.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Import.Raw.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Async_stream.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">create f</code> returns a stream <code class="code">t</code> and calls <code class="code">f tail</code>, where the elements of the stream
    are determined as the tail is extended, and the end of the stream is reached when the
    tail is closed.<br/>
	  
<br/><code class="code">next t</code> returns a deferred that will become determined when the next part of the
    stream is determined.  This is <code class="code">Cons (v, t')</code>, where v is the next element of the
    stream and t' is the rest of the stream, or with Nil at the end of the stream.<br/>
	  
<br/><code class="code">first_exn t</code> returns a deferred that becomes determined with the first element of
    <code class="code">t</code>.<br/>
	  
<br/>Streams can be converted to and from lists.  Although, conversion to a list returns a
    deferred, because the stream is determined asynchronously.<br/>
	  
<br/><code class="code">of_list l</code> returns a stream with the elements of list l.<br/>
	  
<br/><code class="code">to_list t</code> returns a deferred that will become determined with the list
   of elements in t, if the end of t is reached.<br/>
	  
<br/><code class="code">of_fun f</code> returns a stream whose elements are determined by calling <code class="code">f</code> forever.<br/>
	  
<br/><code class="code">copy_to_tail t tail</code> reads elements from <code class="code">t</code> and puts them in <code class="code">tail</code>, until
    the end of <code class="code">t</code> is reached.<br/>
	  
<br/>Sequence operations
    ----------------------------------------------------------------------
    There are the usual sequence operations:<br/>    <span class="verbatim">      append, fold, iter, map, filter_map, take
    </span><br/>    There are also deferred variants:<br/>    <span class="verbatim">      iter', map', filter_map'
    </span><br/>    These take anonymous functions that return deferreds generalizing the usual sequence
    operation and allowing the client to control the rate at which the sequence is
    processed.<br/>
	  
<br/><code class="code">append t1 t2</code> returns a stream with all the values of t1, in order, and if t1 ends,
    these values are followed by all the values of t2.<br/>
	  
<br/><code class="code">concat t</code> takes a stream of streams and produces a stream that is the concatenation
    of each stream in order (you see all of stream 1, then all of stream 2... etc.)<br/>
	  
<br/><code class="code">available_now t</code> returns t prefix of t that is available now, along with the rest of
    the stream.<br/>
	  
<br/><code class="code">filter_deprecated s ~f</code> returns a stream with one element, v, for each v in s such
    with f v = true.<br/>    Using <code class="code">filter_deprecated</code> can easily lead to space leaks.  It is better to use
    <code class="code">Async.Pipe</code> than <code class="code">Async.Stream</code>.<br/>
	  
<br/><code class="code">filter_map_deprecated s ~f</code> returns a stream with one element, v', for each v in s
    such with f v = Some v'.<br/>    Using <code class="code">filter_map_deprecated</code> can easily lead to space leaks.  It is better to use
    <code class="code">Async.Pipe</code> than <code class="code">Async.Stream</code>.<br/>
	  
<br/><code class="code">fold' t ~init ~f</code> is like list fold, walking over the elements of the stream in
    order, as they become available.  <code class="code">fold'</code> returns a deferred that will yield the final
    value of the accumulator, if the end of the stream is reached.<br/>
	  
<br/><code class="code">fold t ~init ~f</code> is a variant of <code class="code">fold'</code> in which <code class="code">f</code> does not return a deferred.<br/>
	  
<br/><code class="code">iter' t ~f</code> applies <code class="code">f</code> to each element of the stream in turn, as they become
    available.  It continues onto the next element only after the deferred returned by <code class="code">f</code>
    becomes determined.<br/>
	  
<br/><code class="code">closed t</code> returns a deferred that becomes determined when the end of <code class="code">t</code> is
    reached.<br/>
	  
<br/><code class="code">iter t ~f</code> = <code class="code">don't_wait_for (iter' t ~f:(fun a -&gt; f a; Deferred.unit))</code> <br/>
	  
<br/><code class="code">take_until t d</code> returns a stream <code class="code">t'</code> that has the same elements as <code class="code">t</code> up until <code class="code">d</code>
    becomes determined.<br/>
	  
<br/><code class="code">iter_durably' t ~f</code> is like <code class="code">iter' t ~f</code>, except if <code class="code">f</code> raises an exception it
    continues with the next element of the stream *and* reraises the exception (to the
    monitor in scope when iter_durably was called).<br/>    <code class="code">iter_durably t ~f</code> is like <code class="code">iter t ~f</code>, except if <code class="code">f</code> raises an exception it
    continues with the next element of the stream *and* reraises the exception (to the
    monitor in scope when iter_durably was called).<br/>    <code class="code">iter_durably_report_end t ~f</code> is equivalent to <code class="code">iter_durably' t ~f:(fun x -&gt; return
    (f x))</code> but it is more efficient<br/>
	  
<br/><code class="code">length s</code> returns a deferred that is determined when the end of s is reached, taking
    the value of the number of elements in s<br/>
	  
<br/><code class="code">map' t f</code> creates a new stream that with one element, (f v), for each element v of
    t.<br/>
	  
<br/><code class="code">map t ~f</code> creates a new stream that with one element, (f v), for each element v of t.
    <code class="code">map t f</code> = <code class="code">map' t ~f:(fun a -&gt; return (f a))</code>.<br/>
	  
<br/><code class="code">first_n t n</code> returns a stream with the first n elements of t, if t has n or more
    elements, or it returns t.<br/>
	  
<br/>Stream generation
    ----------------------------------------------------------------------<br/>
	  
<br/><code class="code">unfold b f</code> returns a stream <code class="code">a1; a2; ...; an</code> whose elements are
    determined by the equations:
    <span class="verbatim">      b0 = b
      Some (a1, b1) = f b0
      Some (a2, b2) = f b1
      ...
      None = f bn
    </span>
<br/>
	  
<br/>Miscellaneous operations
    ----------------------------------------------------------------------<br/>
	  
<br/><code class="code">split ~stop ~f t</code> returns a pair <code class="code">(p, d)</code>, where <code class="code">p</code> is a prefix of <code class="code">t</code> that ends
    for one of three reasons:
    <span class="verbatim">      1. [t] ends
      2. stop becomes determined
      3. f returns `Found
    </span>
    The deferred <code class="code">d</code> describes why the prefix ended, and returns the suffix of the
    stream in case (2) or (3).<br/>
	  
<br/><code class="code">find ~f t</code> returns a deferred that becomes determined when <code class="code">f x</code> is true for some
    element of <code class="code">t</code>, or if the end of the stream is reached<br/>
	  
<br/><code class="code">ungroup t</code> takes a stream of lists and unpacks the items from each list into a single
    stream<br/>
	  
<br/><code class="code">interleave list</code> takes a stream of streams and returns a stream of their items
    interleaved as they become determined. The interleaved stream will be closed when the
    outer stream and all of the inner streams have been closed.<br/>
	  
<br/>The <code class="code">Raw</code> interface exposed here is for async's internal use only.  It must be
    exported here because we want the <code class="code">Stream.t</code> type to be abstract, so that is shows up
    nicely in type errors, yet other async code defined later needs to deal with the raw
    type.<br/>
	  

<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">unit -&gt; 'a <a href="Tail.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ()</code> returns a new tail.</div>
    
 
      <pre><span><span class="keyword">val</span> extend : <code class="type">'a <a href="Tail.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info"><code class="code">extend t v</code> extends the stream, and will raise an exception if <code class="code">t</code> has been
    closed.</div>
    
 
      <pre><span><span class="keyword">val</span> close_exn : <code class="type">'a <a href="Tail.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">close_exn t</code> closes <code class="code">t</code>.  Subsequent calls to <code class="code">close_exn</code> or <code class="code">extend</code>
    will raise an exception.</div>
    
 
      <pre><span><span class="keyword">val</span> close_if_open : <code class="type">'a <a href="Tail.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">close_if_open t</code> closes <code class="code">t</code>, if it's not already closed.  If <code class="code">t</code> is already
    closed, then this is a no-op.</div>
    
 
      <pre><span><span class="keyword">val</span> is_closed : <code class="type">'a <a href="Tail.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info"><code class="code">is_closed t</code> returns true iff the stream <code class="code">t</code> is closed.</div>
    
<br/>The <code class="code">Raw</code> interface and <code class="code">Stream</code> module exposed here are for async's internal use
    only.  They must be exported here because we want the <code class="code">Tail.t</code> and <code class="code">Stream.t</code> types to
    be fully abstract, so that they show up nicely in type errors, yet other async code
    defined later needs to deal with the raw types.<br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Import.Raw.html">Import.Raw</a></code> with type execution_context = <a href="Execution_context.html#TYPEt">Execution_context.t</a> with type raw = ('a, 'b) <a href="Raw_tail.html#TYPEt">Raw_tail.t</a> with type t = 'a <a href="Tail.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Import.Raw.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Tail.Stream.html">Stream</a> : <code class="code">sig</code> <a href="Tail.Stream.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Tail.Stream.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> collect : <code class="type">'a <a href="Tail.html#TYPEt">t</a> -&gt; 'a <a href="Tail.Stream.html#TYPEt">Stream.t</a></code></span></pre>
      <div class="info"><code class="code">collect t</code> returns the stream starting at the current position of the tail, i.e. the
    stream consisting of all subsequent <code class="code">extend</code>s.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Tail.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">create ()</code> returns a new tail.<br/>
	  
<br/><code class="code">extend t v</code> extends the stream, and will raise an exception if <code class="code">t</code> has been
    closed.<br/>
	  
<br/><code class="code">close_exn t</code> closes <code class="code">t</code>.  Subsequent calls to <code class="code">close_exn</code> or <code class="code">extend</code>
    will raise an exception.<br/>
	  
<br/><code class="code">close_if_open t</code> closes <code class="code">t</code>, if it's not already closed.  If <code class="code">t</code> is already
    closed, then this is a no-op.<br/>
	  
<br/><code class="code">is_closed t</code> returns true iff the stream <code class="code">t</code> is closed.<br/>
	  
<br/>The <code class="code">Raw</code> interface and <code class="code">Stream</code> module exposed here are for async's internal use
    only.  They must be exported here because we want the <code class="code">Tail.t</code> and <code class="code">Stream.t</code> types to
    be fully abstract, so that they show up nicely in type errors, yet other async code
    defined later needs to deal with the raw types.<br/>
	  
<br/><code class="code">collect t</code> returns the stream starting at the current position of the tail, i.e. the
    stream consisting of all subsequent <code class="code">extend</code>s.<br/>
	  

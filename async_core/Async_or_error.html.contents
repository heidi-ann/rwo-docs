<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span>= <code class="type">'a <a href="../core/Std.Or_error.html#TYPEt">Core.Std.Or_error.t</a> <a href="Deferred.html#TYPEt">Deferred.t</a></code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core/Std.Monad.S.html">Core.Std.Monad.S</a></code> with type t = 'a <a href="Async_or_error.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core/Std.Monad.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> fail : <code class="type"><a href="../core/Std.Error.html#TYPEt">Core.Std.Error.t</a> -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">fail error = Deferred.return (Error error)</code> *</div>
    
 
      <pre><span><span class="keyword">val</span> ok_exn : <code class="type">'a <a href="Async_or_error.html#TYPEt">t</a> -&gt; 'a <a href="Deferred.html#TYPEt">Deferred.t</a></code></span></pre>
      <div class="info">These functions are direct analogs of the corresponding <code class="code">Core.Or_error</code> functions.</div>
    
 
      <pre><span><span class="keyword">val</span> of_exn : <code class="type">exn -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_exn_result : <code class="type">('a, exn) <a href="../core/Std.Result.html#TYPEt">Core.Std.Result.t</a> <a href="Deferred.html#TYPEt">Deferred.t</a> -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> error : <code class="type">string -&gt; 'a -&gt; ('a -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a>) -&gt; 'b <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> error_string : <code class="type">string -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unimplemented : <code class="type">string -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> combine_errors : <code class="type">'a <a href="Async_or_error.html#TYPEt">t</a> list -&gt; 'a list <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> combine_errors_unit : <code class="type">unit <a href="Async_or_error.html#TYPEt">t</a> list -&gt; unit <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ok_unit : <code class="type">unit <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">ok_unit = return ()</code> </div>
    
 
      <pre><span><span class="keyword">val</span> try_with : <code class="type">?extract_exn:bool -&gt; ?name:string -&gt; (unit -&gt; 'a <a href="Deferred.html#TYPEt">Deferred.t</a>) -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">try_with f</code> catches exceptions thrown by <code class="code">f</code> and returns them in the Result.t as an
    Error.t.  <code class="code">try_with_join</code> is like <code class="code">try_with</code>, except that <code class="code">f</code> can throw exceptions or
    return an <code class="code">Error</code> directly, without ending up with a nested error; it is equivalent to
    <code class="code">try_with f &gt;&gt;| Result.join</code>.<br/>    The option <code class="code">extract_exn</code> is passed along to <code class="code">Monitor.try_with ?extract_exn</code> and
    specifies whether or not the monitor exn wrapper should be skipped (<code class="code">extract_exn:true</code>
    or kept (<code class="code">extract_exn:false</code>).</div>
    
 
      <pre><span><span class="keyword">val</span> try_with_join : <code class="type">?extract_exn:bool -&gt; ?name:string -&gt; (unit -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a>) -&gt; 'a <a href="Async_or_error.html#TYPEt">t</a></code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Async_or_error.List.html">List</a> : <code class="code"><a href="Deferred_intf.Monad_sequence.html">Deferred_intf.Monad_sequence</a></code> with type monad = 'a <a href="Async_or_error.html#TYPEt">t</a> with type t = 'a list</pre>
	<div class="content" style="display:none">
	<div file="Async_or_error.List.html.contents" class="content_to_load"> </div>
	</div>
  </div>

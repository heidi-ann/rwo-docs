<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type"><a href="Type.html#TYPEt">Type.t</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Atom"><span class="constructor">Atom</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.List"><span class="constructor">List</span></span> <span class="keyword">of</span> <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> list</code></code></td>
	   </tr></table>
      <div class="info">Type of S-expressions</div>
    
<pre><span id="TYPEbigstring"><span class="keyword">type</span> bigstring </span>= <code class="type">(char, <a href="../otherlibs/Bigarray.html#TYPEint8_unsigned_elt">Bigarray.int8_unsigned_elt</a>, <a href="../otherlibs/Bigarray.html#TYPEc_layout">Bigarray.c_layout</a>) <a href="../otherlibs/Bigarray.Array1.html#TYPEt">Bigarray.Array1.t</a></code> </pre>
      
    
<br/><br/><h6 id="6_TITLE">Defaults</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> default_indent : <code class="type">int <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">S-expression size</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> size : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; int * int</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Scan functions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> scan_sexp : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scan_sexps : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scan_rev_sexps : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scan_sexp_opt : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scan_iter_sexps : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; f:(<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit) -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scan_fold_sexps : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; f:('a -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; init:'a -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scan_sexps_conv : <code class="type">?buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; f:(<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; <a href="../stdlib/Lexing.html#TYPElexbuf">Lexing.lexbuf</a> -&gt; 'a list</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Type and exception definitions for (partial) parsing</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Sexp_intf.S.Parse_pos.html">Parse_pos</a> : <code class="code">sig</code> <a href="Sexp_intf.S.Parse_pos.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Sexp_intf.S.Parse_pos.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Sexp_intf.S.Cont_state.html">Cont_state</a> : <code class="code">sig</code> <a href="Sexp_intf.S.Cont_state.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Sexp_intf.S.Cont_state.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEparse_result"><span class="keyword">type</span> <code class="type">('a, 't) </code>parse_result </span>= <code class="type">('a, 't) <a href="Pre_sexp.html#TYPEparse_result">Pre_sexp.parse_result</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTparse_result.Done"><span class="constructor">Done</span></span> <span class="keyword">of</span> <code class="type">'t * <a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a></code></code></td><td class="typefieldcomment" align="left"><code class="code">Done (t, parse_pos)</code> finished parsing
                                    an S-expression.  Current parse position
                                    is <code class="code">parse_pos</code>.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTparse_result.Cont"><span class="constructor">Cont</span></span> <span class="keyword">of</span> <code class="type"><a href="Sexp_intf.S.Cont_state.html#TYPEt">Cont_state.t</a> * ('a, 't) parse_fun</code></code></td><td class="typefieldcomment" align="left"><code class="code">Cont (cont_state, parse_fun)</code> met the end of input before completely
          parsing an S-expression.  The user has to call <code class="code">parse_fun</code> to
          continue parsing the S-expression in another buffer.  <code class="code">cont_state</code>
          is the current parsing state of the continuation.
          NOTE: the continuation may only be called once and will raise
          <code class="code">Failure</code> otherwise!</td>
	   </tr></table>
      <div class="info">Type of result from calling TODO reference : Sexp.parse.</div>
    
<pre><span id="TYPEparse_fun"><span class="keyword">type</span> <code class="type">('a, 't) </code>parse_fun </span>= <code class="type">pos:int -&gt; len:int -&gt; 'a -&gt; ('a, 't) <a href="Sexp_intf.S.html#TYPEparse_result">parse_result</a></code> </pre>
      <div class="info">Type of parsing functions with given offsets and lengths.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Sexp_intf.S.Annotated.html">Annotated</a> : <code class="code">sig</code> <a href="Sexp_intf.S.Annotated.html">..</a> <code class="code">end</code></pre><div class="info">Module for parsing S-expressions annotated with location information</div>
	<div class="content" style="display:none">
	<div file="Sexp_intf.S.Annotated.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEparse_state"><span class="keyword">type</span> <code class="type">'t </code>parse_state </span>= {<code class="type">'t <a href="Pre_sexp.html#TYPEparse_state">Pre_sexp.parse_state</a></code> <span class="keyword">private</span></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTparse_state.parse_pos">parse_pos</span> :<code class="type"><a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a></code>;</code></td><td class="typefieldcomment" align="left">Current parse position</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code><span class="keyword">mutable</span> <span id="TYPEELTparse_state.pstack">pstack</span> :<code class="type">'t</code>;</code></td><td class="typefieldcomment" align="left">Stack of found S-expression lists</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTparse_state.pbuf">pbuf</span> :<code class="type"><a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a></code>;</code></td><td class="typefieldcomment" align="left">Current atom buffer</td>
	  </tr></table>}
      <div class="info">Type of state maintained during parsing</div>
    
<pre><span id="TYPEparse_error"><span class="keyword">type</span> parse_error </span>= {<code class="type"><a href="Pre_sexp.html#TYPEparse_error">Pre_sexp.parse_error</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTparse_error.location">location</span> :<code class="type">string</code>;</code></td><td class="typefieldcomment" align="left">Function in which the parse failed</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTparse_error.err_msg">err_msg</span> :<code class="type">string</code>;</code></td><td class="typefieldcomment" align="left">Reason why parsing failed</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTparse_error.parse_state">parse_state</span> :<code class="type">[ `Annot of <a href="Sexp_intf.S.Annotated.html#TYPEstack">Annotated.stack</a> <a href="Sexp_intf.S.html#TYPEparse_state">parse_state</a> | `Sexp of <a href="Sexp_intf.S.html#TYPEt">t</a> list list <a href="Sexp_intf.S.html#TYPEparse_state">parse_state</a> ]</code>;</code></td><td class="typefieldcomment" align="left">State of parser</td>
	  </tr></table>}
      <div class="info">Type of parse errors</div>
    
<pre><span id="EXCEPTIONParse_error"><span class="keyword">exception</span> Parse_error</span> <span class="keyword">of</span> <code class="type"><a href="Sexp_intf.S.html#TYPEparse_error">parse_error</a></code></pre><div class="info">Exception raised during partial parsing</div>
<br/><br/><h6 id="6_TITLE">Unannotated (partial) parsing</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> parse : <code class="type">?parse_pos:<a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a> -&gt; ?len:int -&gt; string -&gt; (string, <a href="Sexp_intf.S.html#TYPEt">t</a>) <a href="Sexp_intf.S.html#TYPEparse_result">parse_result</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> parse_bigstring : <code class="type">?parse_pos:<a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a> -&gt;
?len:int -&gt; <a href="Sexp_intf.S.html#TYPEbigstring">bigstring</a> -&gt; (<a href="Sexp_intf.S.html#TYPEbigstring">bigstring</a>, <a href="Sexp_intf.S.html#TYPEt">t</a>) <a href="Sexp_intf.S.html#TYPEparse_result">parse_result</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_sexp : <code class="type">?parse_pos:<a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a> -&gt; <a href="../stdlib/Pervasives.html#TYPEin_channel">in_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_sexps : <code class="type">?parse_pos:<a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a> -&gt; ?buf:string -&gt; <a href="../stdlib/Pervasives.html#TYPEin_channel">in_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_rev_sexps : <code class="type">?parse_pos:<a href="Sexp_intf.S.Parse_pos.html#TYPEt">Parse_pos.t</a> -&gt; ?buf:string -&gt; <a href="../stdlib/Pervasives.html#TYPEin_channel">in_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Loading of (converted) S-expressions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> load_sexp : <code class="type">?strict:bool -&gt; ?buf:string -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_sexps : <code class="type">?buf:string -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_rev_sexps : <code class="type">?buf:string -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_sexp_conv : <code class="type">?strict:bool -&gt; ?buf:string -&gt; string -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a <a href="Sexp_intf.S.Annotated.html#TYPEconv">Annotated.conv</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_sexp_conv_exn : <code class="type">?strict:bool -&gt; ?buf:string -&gt; string -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_sexps_conv : <code class="type">?buf:string -&gt; string -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a <a href="Sexp_intf.S.Annotated.html#TYPEconv">Annotated.conv</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_sexps_conv_exn : <code class="type">?buf:string -&gt; string -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a list</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Output of S-expressions to I/O-channels</h6><br/> <br/>
	  
<br/>NOTE: for performance reasons these output functions may need to
      allocate large strings to write out huge S-expressions.  This may
      cause problems on 32-bit platforms.  If you think that you may need to
      write huge S-expressions on such platforms, you might want to use the
      pretty-printers that write to formatters instead (see further below).<br/>
	  
 
      <pre><span><span class="keyword">val</span> output_hum : <code class="type"><a href="../stdlib/Pervasives.html#TYPEout_channel">out_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_hum_indent : <code class="type">int -&gt; <a href="../stdlib/Pervasives.html#TYPEout_channel">out_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_mach : <code class="type"><a href="../stdlib/Pervasives.html#TYPEout_channel">out_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output : <code class="type"><a href="../stdlib/Pervasives.html#TYPEout_channel">out_channel</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Output of S-expressions to file</h6><br/> <br/>
	  
<br/>All save-functions write to a temporary file before moving it into
      place to avoid intermittent garbling of existing files, which may
      cause problems for other processes that try to read.<br/>
	  
 
      <pre><span><span class="keyword">val</span> save_hum : <code class="type">?perm:int -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save_mach : <code class="type">?perm:int -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save : <code class="type">?perm:int -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save_sexps_hum : <code class="type">?perm:int -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save_sexps_mach : <code class="type">?perm:int -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save_sexps : <code class="type">?perm:int -&gt; string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> list -&gt; unit</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Output of S-expressions to formatters</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> pp_hum : <code class="type"><a href="../stdlib/Format.html#TYPEformatter">Format.formatter</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pp_hum_indent : <code class="type">int -&gt; <a href="../stdlib/Format.html#TYPEformatter">Format.formatter</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pp_mach : <code class="type"><a href="../stdlib/Format.html#TYPEformatter">Format.formatter</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pp : <code class="type"><a href="../stdlib/Format.html#TYPEformatter">Format.formatter</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">String and bigstring conversions</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Sexp_intf.S.Of_string_conv_exn.html">Of_string_conv_exn</a> : <code class="code">sig</code> <a href="Sexp_intf.S.Of_string_conv_exn.html">..</a> <code class="code">end</code></pre><div class="info">Module encapsulating the exception raised by string converters when
      type conversions fail.</div>
	<div class="content" style="display:none">
	<div file="Sexp_intf.S.Of_string_conv_exn.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> of_string : <code class="type">string -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_string_conv : <code class="type">string -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a <a href="Sexp_intf.S.Annotated.html#TYPEconv">Annotated.conv</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_string_conv_exn : <code class="type">string -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_bigstring : <code class="type"><a href="Sexp_intf.S.html#TYPEbigstring">bigstring</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_bigstring_conv : <code class="type"><a href="Sexp_intf.S.html#TYPEbigstring">bigstring</a> -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a <a href="Sexp_intf.S.Annotated.html#TYPEconv">Annotated.conv</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_bigstring_conv_exn : <code class="type"><a href="Sexp_intf.S.html#TYPEbigstring">bigstring</a> -&gt; (<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; 'a) -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_string_hum : <code class="type">?indent:int -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_string_mach : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Buffer conversions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> to_buffer_hum : <code class="type">buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; ?indent:int -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_buffer_mach : <code class="type">buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_buffer : <code class="type">buf:<a href="../stdlib/Buffer.html#TYPEt">Buffer.t</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_buffer_gen : <code class="type">buf:'buffer -&gt;
add_char:('buffer -&gt; char -&gt; unit) -&gt;
add_string:('buffer -&gt; string -&gt; unit) -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Utilities for automated type conversions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> unit : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Utilities for conversion error handling</h6><br/> <br/>
	  
<pre><span id="TYPEfound"><span class="keyword">type</span> found </span>= <code class="type">[ `Found | `Pos of int * <a href="Sexp_intf.S.html#TYPEfound">found</a> ]</code> </pre>
      
    
<pre><span id="TYPEsearch_result"><span class="keyword">type</span> search_result </span>= <code class="type">[ `Found | `Not_found | `Pos of int * <a href="Sexp_intf.S.html#TYPEfound">found</a> ]</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> search_physical : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; contained:<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; <a href="Sexp_intf.S.html#TYPEsearch_result">search_result</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> subst_found : <code class="type"><a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; subst:<a href="Sexp_intf.S.html#TYPEt">t</a> -&gt; <a href="Sexp_intf.S.html#TYPEfound">found</a> -&gt; <a href="Sexp_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Sexp_intf.S.With_layout.html">With_layout</a> : <code class="code">sig</code> <a href="Sexp_intf.S.With_layout.html">..</a> <code class="code">end</code></pre><div class="info">S-expressions annotated with relative source positions and comments</div>
	<div class="content" style="display:none">
	<div file="Sexp_intf.S.With_layout.html.contents" class="content_to_load"> </div>
	</div>
  </div>

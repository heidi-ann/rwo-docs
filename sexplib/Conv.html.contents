<pre><span id="TYPEsexp_bool"><span class="keyword">type</span> sexp_bool </span>= <code class="type">bool</code> </pre>
      <div class="info">Dummy definitions for &quot;optional&quot; options, lists, and for opaque types</div>
    
<pre><span id="TYPEsexp_option"><span class="keyword">type</span> <code class="type">'a </code>sexp_option </span>= <code class="type">'a option</code> </pre>
      
    
<pre><span id="TYPEsexp_list"><span class="keyword">type</span> <code class="type">'a </code>sexp_list </span>= <code class="type">'a list</code> </pre>
      
    
<pre><span id="TYPEsexp_array"><span class="keyword">type</span> <code class="type">'a </code>sexp_array </span>= <code class="type">'a array</code> </pre>
      
    
<pre><span id="TYPEsexp_opaque"><span class="keyword">type</span> <code class="type">'a </code>sexp_opaque </span>= <code class="type">'a</code> </pre>
      
    
<br/><br/><h6 id="6_TITLE">Type aliases</h6><br/> <br/>
	  
<pre><span id="TYPEbigstring"><span class="keyword">type</span> bigstring </span>= <code class="type"><a href="Sexp.html#TYPEbigstring">Sexp.bigstring</a></code> </pre>
      
    
<pre><span id="TYPEfloat32_vec"><span class="keyword">type</span> float32_vec </span>= <code class="type">(float, <a href="../otherlibs/Bigarray.html#TYPEfloat32_elt">Bigarray.float32_elt</a>, <a href="../otherlibs/Bigarray.html#TYPEfortran_layout">Bigarray.fortran_layout</a>) <a href="../otherlibs/Bigarray.Array1.html#TYPEt">Bigarray.Array1.t</a></code> </pre>
      
    
<pre><span id="TYPEfloat64_vec"><span class="keyword">type</span> float64_vec </span>= <code class="type">(float, <a href="../otherlibs/Bigarray.html#TYPEfloat64_elt">Bigarray.float64_elt</a>, <a href="../otherlibs/Bigarray.html#TYPEfortran_layout">Bigarray.fortran_layout</a>) <a href="../otherlibs/Bigarray.Array1.html#TYPEt">Bigarray.Array1.t</a></code> </pre>
      
    
<pre><span id="TYPEvec"><span class="keyword">type</span> vec </span>= <code class="type"><a href="Conv.html#TYPEfloat64_vec">float64_vec</a></code> </pre>
      
    
<pre><span id="TYPEfloat32_mat"><span class="keyword">type</span> float32_mat </span>= <code class="type">(float, <a href="../otherlibs/Bigarray.html#TYPEfloat32_elt">Bigarray.float32_elt</a>, <a href="../otherlibs/Bigarray.html#TYPEfortran_layout">Bigarray.fortran_layout</a>) <a href="../otherlibs/Bigarray.Array2.html#TYPEt">Bigarray.Array2.t</a></code> </pre>
      
    
<pre><span id="TYPEfloat64_mat"><span class="keyword">type</span> float64_mat </span>= <code class="type">(float, <a href="../otherlibs/Bigarray.html#TYPEfloat64_elt">Bigarray.float64_elt</a>, <a href="../otherlibs/Bigarray.html#TYPEfortran_layout">Bigarray.fortran_layout</a>) <a href="../otherlibs/Bigarray.Array2.html#TYPEt">Bigarray.Array2.t</a></code> </pre>
      
    
<pre><span id="TYPEmat"><span class="keyword">type</span> mat </span>= <code class="type"><a href="Conv.html#TYPEfloat64_mat">float64_mat</a></code> </pre>
      
    
<br/><br/><h6 id="6_TITLE">Conversion of OCaml-values to S-expressions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> default_string_of_float : <code class="type">(float -&gt; string) <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> write_old_option_format : <code class="type">bool <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> read_old_option_format : <code class="type">bool <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> list_map : <code class="type">('a -&gt; 'b) -&gt; 'a list -&gt; 'b list</code></span></pre>
      <div class="info">We re-export a tail recursive map function, because some modules
    override the standard library functions (e.g. <code class="code">StdLabels</code>) which
    wrecks havoc with the camlp4 extension.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_unit : <code class="type">unit -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_bool : <code class="type">bool -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_string : <code class="type">string -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_char : <code class="type">char -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_int : <code class="type">int -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_float : <code class="type">float -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_int32 : <code class="type">int32 -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_int64 : <code class="type">int64 -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_nativeint : <code class="type">nativeint -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_big_int : <code class="type"><a href="../otherlibs/Big_int.html#TYPEbig_int">Big_int.big_int</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_nat : <code class="type"><a href="../otherlibs/Nat.html#TYPEnat">Nat.nat</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_num : <code class="type"><a href="../otherlibs/Num.html#TYPEnum">Num.num</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_ratio : <code class="type"><a href="../otherlibs/Ratio.html#TYPEratio">Ratio.ratio</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_ref : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a <a href="../stdlib/Pervasives.html#TYPEref">ref</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_lazy_t : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a lazy_t -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_option : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a option -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_pair : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; ('b -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a * 'b -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_triple : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; ('b -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; ('c -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a * 'b * 'c -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_list : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a list -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_array : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a array -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_hashtbl : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; ('b -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; ('a, 'b) <a href="../stdlib/Hashtbl.html#TYPEt">Hashtbl.t</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_bigstring : <code class="type"><a href="Conv.html#TYPEbigstring">bigstring</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_float32_vec : <code class="type"><a href="Conv.html#TYPEfloat32_vec">float32_vec</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_float64_vec : <code class="type"><a href="Conv.html#TYPEfloat64_vec">float64_vec</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_vec : <code class="type"><a href="Conv.html#TYPEvec">vec</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_float32_mat : <code class="type"><a href="Conv.html#TYPEfloat32_mat">float32_mat</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_float64_mat : <code class="type"><a href="Conv.html#TYPEfloat64_mat">float64_mat</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_mat : <code class="type"><a href="Conv.html#TYPEmat">mat</a> -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_opaque : <code class="type">'a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_fun : <code class="type">('a -&gt; 'b) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> string_of__of__sexp_of : <code class="type">('a -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a>) -&gt; 'a -&gt; string</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Conversion of S-expressions to OCaml-values</h6><br/> <br/>
	  
<pre><span id="EXCEPTIONOf_sexp_error"><span class="keyword">exception</span> Of_sexp_error</span> <span class="keyword">of</span> <code class="type">exn * <a href="Sexp.html#TYPEt">Sexp.t</a></code></pre>
 
      <pre><span><span class="keyword">val</span> record_check_extra_fields : <code class="type">bool <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_sexp_error : <code class="type">string -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_sexp_error_exn : <code class="type">exn -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unit_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bool_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> string_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> char_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; char</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int32_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; int32</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int64_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; int64</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> nativeint_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; nativeint</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> big_int_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="../otherlibs/Big_int.html#TYPEbig_int">Big_int.big_int</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> nat_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="../otherlibs/Nat.html#TYPEnat">Nat.nat</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> num_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="../otherlibs/Num.html#TYPEnum">Num.num</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ratio_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="../otherlibs/Ratio.html#TYPEratio">Ratio.ratio</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ref_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lazy_t_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a lazy_t</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> option_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pair_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; (<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'b) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a * 'b</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> triple_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; (<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'b) -&gt; (<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'c) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a * 'b * 'c</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> list_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> array_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a array</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> hashtbl_of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; (<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'b) -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; ('a, 'b) <a href="../stdlib/Hashtbl.html#TYPEt">Hashtbl.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bigstring_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEbigstring">bigstring</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float32_vec_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEfloat32_vec">float32_vec</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float64_vec_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEfloat64_vec">float64_vec</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> vec_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEvec">vec</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float32_mat_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEfloat32_mat">float32_mat</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float64_mat_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEfloat64_mat">float64_mat</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mat_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; <a href="Conv.html#TYPEmat">mat</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> opaque_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fun_of_sexp : <code class="type"><a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_string__of__of_sexp : <code class="type">(<a href="Sexp.html#TYPEt">Sexp.t</a> -&gt; 'a) -&gt; string -&gt; 'a</code></span></pre>
      
    
<br/>Exception converters<br/>
	  
 
      <pre><span><span class="keyword">val</span> sexp_of_exn : <code class="type">exn -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_exn_opt : <code class="type">exn -&gt; <a href="Sexp.html#TYPEt">Sexp.t</a> option</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Conv.Exn_converter.html">Exn_converter</a> : <code class="code">sig</code> <a href="Conv.Exn_converter.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Conv.Exn_converter.html.contents" class="content_to_load"> </div>
	</div>
  </div>

<pre><span id="TYPEmessage"><span class="keyword">type</span> message </span>= <code class="type">[ `Debug | `Error | `Fatal | `Info | `Warn ] * string</code> </pre>
      
    
<pre><span id="TYPEsize"><span class="keyword">type</span> size </span>= <code class="type">[ `Kb of int64 | `Mb of int64 | `Unlimited ]</code> </pre>
      
    
<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'messagetype </code>t </span></pre>
      
    
<pre><span id="TYPEdefault_t"><span class="keyword">type</span> default_t </span>= <code class="type"><a href="Logger.html#TYPEmessage">message</a> <a href="Logger.html#TYPEt">t</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?max_size:<a href="Logger.html#TYPEsize">size</a> -&gt;
?mode:<a href="../core/Std.Unix.html#TYPEfile_perm">Core.Std.Unix.file_perm</a> -&gt;
?max_archives:[ `Max of int | `Unlimited ] -&gt;
?full_callback:(string <a href="../core/Std.Squeue.html#TYPEt">Core.Std.Squeue.t</a> -&gt; unit) -&gt;
?filter:('messagetype -&gt; bool) -&gt;
message_to_string:('messagetype -&gt; string) -&gt; string -&gt; 'messagetype <a href="Logger.html#TYPEt">t</a></code></span></pre>
      <div class="info"><ul><li>max_size - the maximum size of each log file (default 50Mb)</li><li>mode - mode to open the files in</li><li>max_archives - maximum number of archives to keep (default 4)</li><li>full_callback - called when the logger queue backs up so far that log items
                    may have been lost.  Defaults to doing nothing.</li><li>filter - if set, then every message is passed to filter before actually being
             logged.  If filter returns false the message is dropped.</li><li>message_to_string - called to convert your message type to a string for logging
</li></ul></div>
    
 
      <pre><span><span class="keyword">val</span> create_default : <code class="type">?max_size:<a href="Logger.html#TYPEsize">size</a> -&gt;
?mode:<a href="../core/Std.Unix.html#TYPEfile_perm">Core.Std.Unix.file_perm</a> -&gt;
?max_archives:[ `Max of int | `Unlimited ] -&gt;
?full_callback:(string <a href="../core/Std.Squeue.html#TYPEt">Core.Std.Squeue.t</a> -&gt; unit) -&gt; string -&gt; <a href="Logger.html#TYPEmessage">message</a> <a href="Logger.html#TYPEt">t</a></code></span></pre>
      <div class="info">creates a log using the default message type and a filter that drops 
  `Debug messages</div>
    
 
      <pre><span><span class="keyword">val</span> log : <code class="type">'messagetype <a href="Logger.html#TYPEt">t</a> -&gt; 'messagetype -&gt; unit</code></span></pre>
      <div class="info">logs a message to log</div>
    
 
      <pre><span><span class="keyword">val</span> filter : <code class="type">'messagetype <a href="Logger.html#TYPEt">t</a> -&gt; ('messagetype -&gt; bool) -&gt; unit</code></span></pre>
      <div class="info">Sets the filter for a log</div>
    
 
      <pre><span><span class="keyword">val</span> clear_filter : <code class="type">'messagetype <a href="Logger.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">removes the filter from a log</div>
    
<br/>misc helper functions<br/>
	  
 
      <pre><span><span class="keyword">val</span> maybe_log : <code class="type">'messagetype <a href="Logger.html#TYPEt">t</a> option -&gt; 'messagetype -&gt; unit</code></span></pre>
      <div class="info">logs a message to Some log, returns silently if log is None</div>
    
 
      <pre><span><span class="keyword">val</span> timestamp : <code class="type">unit -&gt; string</code></span></pre>
      <div class="info">Returns a timestamp as a string suitable for log files</div>
    

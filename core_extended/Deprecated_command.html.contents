<br/>command-line parsing with hierarchical sub-commands<br/>
	  
<pre><span id="EXCEPTIONInvalid_arguments"><span class="keyword">exception</span> Invalid_arguments</span> <span class="keyword">of</span> <code class="type">string list</code></pre>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Flag.html">Flag</a> : <code class="code">sig</code> <a href="Deprecated_command.Flag.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Flag.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Shared_flags.html">Shared_flags</a> : <code class="code">sig</code> <a href="Deprecated_command.Shared_flags.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Shared_flags.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Autocomplete.html">Autocomplete</a> : <code class="code">sig</code> <a href="Deprecated_command.Autocomplete.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Autocomplete.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><code class="code">create ~autocomplete ~summary ~usage_arg ~init ~flags ~final main</code>
    constructs a base command from the following data:
    <ul><li><code class="code">main</code> the main function, parameterized by the argument structure </li><li><code class="code">help</code> an optional function that will be called to generate help
                for a command instead of the standard help </li><li><code class="code">final</code> a function that constructs the final argument
              structure of type <code class="code">'args</code> from the accumulated arguments.
              The second argument to the function is the list of all
              annonymous arguments.  This function should raise an
              exception with some explanation if it is unable to
              construct a complete value of type <code class="code">'args</code>. </li><li><code class="code">flags</code> a list of command line flags together with their
              associated accumulator-mutating actions </li><li><code class="code">init</code> a function that creates an mutable
              accumulator of type <code class="code">'accum</code> </li><li><code class="code">usage_arg</code> an abbreviation of the arguments it expects </li><li><code class="code">readme</code> a longer description of what the command does </li><li><code class="code">summary</code> a short description of what the command does </li><li><code class="code">autocomplete</code> an optional argument defining a bash autocompletion
            function for the base command. </li><li><code class="code">'args</code> a composite argument type for the command, build from <code class="code">'accum</code> </li><li><code class="code">'accum</code> a mutable accumulator type for gathering arguments </li></ul>
<br/>
	  
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?autocomplete:<a href="Deprecated_command.Autocomplete.html#TYPEt">Autocomplete.t</a> -&gt;
?readme:(unit -&gt; string) -&gt;
summary:string -&gt;
usage_arg:string -&gt;
init:(unit -&gt; 'accum) -&gt;
flags:'accum <a href="Deprecated_command.Flag.html#TYPEt">Flag.t</a> list -&gt;
final:('accum -&gt; string list -&gt; 'argv) -&gt; ('argv -&gt; unit) -&gt; <a href="Deprecated_command.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create0 : <code class="type">?autocomplete:<a href="Deprecated_command.Autocomplete.html#TYPEt">Autocomplete.t</a> -&gt;
?readme:(unit -&gt; string) -&gt;
summary:string -&gt;
usage_arg:string -&gt;
init:(unit -&gt; 'accum) -&gt;
flags:'accum <a href="Deprecated_command.Flag.html#TYPEt">Flag.t</a> list -&gt; final:('accum -&gt; 'args) -&gt; ('args -&gt; unit) -&gt; <a href="Deprecated_command.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create_no_accum : <code class="type">?autocomplete:<a href="Deprecated_command.Autocomplete.html#TYPEt">Autocomplete.t</a> -&gt;
?readme:(unit -&gt; string) -&gt;
summary:string -&gt;
usage_arg:string -&gt;
flags:unit <a href="Deprecated_command.Flag.html#TYPEt">Flag.t</a> list -&gt;
final:(string list -&gt; 'args) -&gt; ('args -&gt; unit) -&gt; <a href="Deprecated_command.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create_no_accum0 : <code class="type">?autocomplete:<a href="Deprecated_command.Autocomplete.html#TYPEt">Autocomplete.t</a> -&gt;
?readme:(unit -&gt; string) -&gt;
summary:string -&gt;
usage_arg:string -&gt; flags:unit <a href="Deprecated_command.Flag.html#TYPEt">Flag.t</a> list -&gt; (unit -&gt; unit) -&gt; <a href="Deprecated_command.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> group : <code class="type">summary:string -&gt; ?readme:(unit -&gt; string) -&gt; (string * <a href="Deprecated_command.html#TYPEt">t</a>) list -&gt; <a href="Deprecated_command.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">group ~summary [...; (name_i, t_i); ...]</code> is an aggregate command
    that dispatches to one of the named sub-commands.  A <code class="code">&quot;help&quot;</code>
    sub-command will also be generated for the group.<br/>    The name cannot contain underscores, however passing <code class="code">allow_underscores=true</code> into run
    will parse underscores as dashes on the command line.</div>
    
<pre><span id="TYPEwith_run_flags"><span class="keyword">type</span> <code class="type">'a </code>with_run_flags </span>= <code class="type">?version:string -&gt;
?build_info:string -&gt;
?argv:string list -&gt;
?allow_unknown_flags:bool -&gt;
?allow_underscores:bool -&gt;
?hash_bang_expand:bool -&gt;
?post_parse:([ `Error | `Help | `Ok ] -&gt; string list -&gt; unit) -&gt; <a href="Deprecated_command.html#TYPEt">t</a> -&gt; 'a</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> run : <code class="type">unit <a href="Deprecated_command.html#TYPEwith_run_flags">with_run_flags</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> get_expanded_argv : <code class="type">unit -&gt; string list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> get_expanded_cmdline : <code class="type">unit -&gt; string</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Version.html">Version</a> : <code class="code">sig</code> <a href="Deprecated_command.Version.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Version.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Annotated_field.html">Annotated_field</a> : <code class="code">sig</code> <a href="Deprecated_command.Annotated_field.html">..</a> <code class="code">end</code></pre><div class="info">This module is intended to help in using pa_fields to easily generate
   Command.t's when you have a record type each field of which you would
   like specified as a command line argument.<br/>   An example is as follows:<br/><pre class="codepre"><code class="code">module M = struct
  type t = {
    field1 : int;
    field2 : float;
    field3 : bool;
    field4 : string option;
  } with fields

  module A = Annotated_field

  let ann_fields = Fields.fold ~init:[]
    ~field1:(A.required ~doc:&quot; documentation for field1&quot;)
    ~field2:(A.default 1.0 string_of_float ~doc:&quot; documentation for field2&quot;)
    ~field3:(A.set ~doc:&quot; documentation for field3&quot;)
    ~field4:(A.optional ~doc:&quot; documentation for field4&quot;)

  let command = create
    ~summary:&quot;summary&quot;
    ~init:(fun () -&gt; A.init ann_fields)
    ~usage_arg:&quot;&quot;
    ~flags:(List.map ann_fields ~f:A.to_flag)
    ~final:(fun accum _anon_args -&gt;
      let get of_string = A.get accum of_string in
      let get_opt of_string = A.get_opt accum of_string in
      Fields.map
        ~field1:(get int_of_string)
        ~field2:(get Float.of_string)
        ~field3:(get bool_of_string)
        ~field4:(get_opt ident)
    )
    ~main:(fun _ -&gt; assert false)</code></pre>
end</div>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Annotated_field.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Flags_ext.html">Flags_ext</a> : <code class="code">sig</code> <a href="Deprecated_command.Flags_ext.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Flags_ext.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Deprecated_command.Helpers.html">Helpers</a> : <code class="code">sig</code> <a href="Deprecated_command.Helpers.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Deprecated_command.Helpers.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> of_core_command : <code class="type"><a href="../core/Std.Command.html#TYPEt">Core.Std.Command.t</a> -&gt; <a href="Deprecated_command.html#TYPEt">t</a></code></span></pre>
      
    

<br/>Lazy values reimplementation.<br/>    There are two advantages to reimplementing the lazy module in pure
    Ocaml.  Advantage number one is speed: I've measured ~140 clocks to
    force a standard lazy value the first time, and ~80 clocks to force
    it the second time.  If the lazy computation you're avoiding is
    creating a simple cons cell, this is horribly expensive.  The following
    implementation is like ~30 clocks to force the lazy value the first
    time, and single-digit clocks to force it the second time.<br/>    The second one is that we can make lazy values a monad.  This is a
    correctness issue, as a common mistake with laziness is not being
    lazy enough.  This is much easier to get right if you're doing
    monadic binding.<br/>    There are two downsides to doing it this way.  One, you can't use
    lazy keyword.  And two, this implementation uses a little more memory
    per lazy value (it currently uses 5 words/lazy value).<br/>
	  
<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_val : <code class="type">'a -&gt; 'a <a href="Lazy_m.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_fun : <code class="type">(unit -&gt; 'a) -&gt; 'a <a href="Lazy_m.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> force : <code class="type">'a <a href="Lazy_m.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_val : <code class="type">'a <a href="Lazy_m.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core/Std.Interfaces.Monad.html">Core.Std.Interfaces.Monad</a></code> with type t = 'a <a href="Lazy_m.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core/Std.Interfaces.Monad.html.contents" class="content_to_load"> </div>
	</div>
  </div>

<pre><span id="TYPEstatus"><span class="keyword">type</span> status </span>= <code class="type">[ `Exited of int
| `Signaled of <a href="../core/Std.Signal.html#TYPEt">Core.Std.Signal.t</a>
| `Timeout of <a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> ]</code> </pre>
      
    
<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      
    
<pre><code><span id="TYPEresult"><span class="keyword">type</span> result </span>= {</code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTresult.command">command</span> :<code class="type"><a href="Shell.Process.html#TYPEt">t</a></code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTresult.status">status</span> :<code class="type"><a href="Shell.Process.html#TYPEstatus">status</a></code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTresult.stdout">stdout</span> :<code class="type">string</code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTresult.stderr">stderr</span> :<code class="type">string</code>;</code></td>
	  </tr></table>}
      
    
<pre><span id="EXCEPTIONFailed"><span class="keyword">exception</span> Failed</span> <span class="keyword">of</span> <code class="type"><a href="Shell.Process.html#TYPEresult">result</a></code></pre>
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Shell.Process.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> status_to_string : <code class="type"><a href="Shell.Process.html#TYPEstatus">status</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set_defaults : <code class="type">?timeout:<a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> option -&gt;
?verbose:bool -&gt; ?echo:bool -&gt; unit -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> format_failed : <code class="type"><a href="Shell.Process.html#TYPEresult">result</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> cmd : <code class="type">string -&gt; string list -&gt; <a href="Shell.Process.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> shell : <code class="type">string -&gt; <a href="Shell.Process.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> make_ssh_command : <code class="type">?ssh_options:string list -&gt;
?quote_args:bool -&gt; ?user:string -&gt; host:string -&gt; string list -&gt; <a href="Shell.Process.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remote : <code class="type">?ssh_options:string list -&gt;
?quote_args:bool -&gt; ?user:string -&gt; host:string -&gt; <a href="Shell.Process.html#TYPEt">t</a> -&gt; <a href="Shell.Process.html#TYPEt">t</a></code></span></pre>
      
    
<pre><span id="TYPEreader"><span class="keyword">type</span> <code class="type">'a </code>reader </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> content : <code class="type">string <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> content_and_stderr : <code class="type">(string * string) <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> discard : <code class="type">unit <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lines : <code class="type">?eol:char -&gt; unit -&gt; string list <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> head : <code class="type">?eol:char -&gt; unit -&gt; string option <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
<pre><span id="EXCEPTIONEmpty_head"><span class="keyword">exception</span> Empty_head</span></pre>
 
      <pre><span><span class="keyword">val</span> head_exn : <code class="type">?eol:char -&gt; unit -&gt; string <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> callback : <code class="type">add:(string -&gt; int -&gt; unit) -&gt; flush:(unit -&gt; unit) -&gt; unit <a href="Shell.Process.html#TYPEreader">reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> run : <code class="type">(<a href="Shell.Process.html#TYPEt">t</a> -&gt; 'a <a href="Shell.Process.html#TYPEreader">reader</a> -&gt; 'a) <a href="Shell.html#TYPEwith_run_flags">with_run_flags</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> run_k : <code class="type">((<a href="Shell.Process.html#TYPEt">t</a> -&gt; 'a <a href="Shell.Process.html#TYPEreader">reader</a> -&gt; 'a) -&gt; 'b) -&gt; 'b <a href="Shell.html#TYPEwith_run_flags">with_run_flags</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> test : <code class="type">(<a href="Shell.Process.html#TYPEt">t</a> -&gt; bool) <a href="Shell.html#TYPEwith_test_flags">with_test_flags</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> test_k : <code class="type">((<a href="Shell.Process.html#TYPEt">t</a> -&gt; bool) -&gt; 'a) -&gt; 'a <a href="Shell.html#TYPEwith_test_flags">with_test_flags</a></code></span></pre>
      
    

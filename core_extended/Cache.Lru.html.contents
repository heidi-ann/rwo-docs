<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">('k, 'v) </code>t </span></pre>
      
    
<pre><span id="TYPEmemo"><span class="keyword">type</span> <code class="type">('a, 'b) </code>memo </span>= <code class="type">('a, ('b, exn) <a href="../core/Std.Result.html#TYPEt">Core.Std.Result.t</a>) <a href="Cache.Lru.html#TYPEt">t</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> find : <code class="type">('k, 'v) <a href="Cache.Lru.html#TYPEt">t</a> -&gt; 'k -&gt; 'v option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> add : <code class="type">('k, 'v) <a href="Cache.Lru.html#TYPEt">t</a> -&gt; key:'k -&gt; data:'v -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remove : <code class="type">('k, 'a) <a href="Cache.Lru.html#TYPEt">t</a> -&gt; 'k -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> clear : <code class="type">('a, 'b) <a href="Cache.Lru.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">destruct:('v -&gt; unit) option -&gt; int -&gt; ('k, 'v) <a href="Cache.Lru.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> call_with_cache : <code class="type">cache:('a, 'b) <a href="Cache.Lru.html#TYPEmemo">memo</a> -&gt; ('a -&gt; 'b) -&gt; 'a -&gt; 'b</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> memoize : <code class="type">?destruct:('b -&gt; unit) -&gt; ('a -&gt; 'b) -&gt; int -&gt; ('a, 'b) <a href="Cache.Lru.html#TYPEmemo">memo</a> * ('a -&gt; 'b)</code></span></pre>
      
    

<br/>Extensions to <code class="code">Sexplib.Sexp</code>.<br/>
	  
 
      <pre><span><span class="keyword">val</span> is_atom : <code class="type"><a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_list : <code class="type"><a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; bool</code></span></pre>
      
    
<br/><br/><h3 id="3_TITLE">Constructors </h3><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> atom : <code class="type">string -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> list : <code class="type"><a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> list -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a></code></span></pre>
      
    
<br/><br/><h3 id="3_TITLE">Printing </h3><br/><br/>
	  
 
      <pre><span><span class="keyword">val</span> to_string_hum' : <code class="type"><a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; string</code></span></pre>
      <div class="info">The ocaml pretty printer (used by sexplib) is a speed daemon  but is,
   sadly enough, produces wrong output (e.g it overflows in places where this
   could have avoided). This uses a printer from wadler's a prettier printer to
   output strings suited to human consumption.</div>
    
 
      <pre><span><span class="keyword">val</span> format : <code class="type"><a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; <a href="Pp.html#TYPEt">Pp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pp_hum' : <code class="type"><a href="../stdlib/Format.html#TYPEformatter">Format.formatter</a> -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; unit</code></span></pre>
      <div class="info">A more readable but less compact pretty printer than the one bundled by
   sexplib. This is going through a test period at which point it might
   make it in sexplib. It uses ocaml's pretty-printing library so it is both
   fast and broken.</div>
    
 
      <pre><span><span class="keyword">val</span> comment : <code class="type">string -&gt; string</code></span></pre>
      <div class="info">Takes a string and returns the same string but commented according to
    sexp's syntax</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Extended_sexp.Diff.html">Diff</a> : <code class="code">sig</code> <a href="Extended_sexp.Diff.html">..</a> <code class="code">end</code></pre><div class="info"><br/><h3 id="3_TITLE">Various</h3><br/> </div>
	<div class="content" style="display:none">
	<div file="Extended_sexp.Diff.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> print_diff : <code class="type">?oc:<a href="../stdlib/Pervasives.html#TYPEout_channel">out_channel</a> -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> summarize : <code class="type"><a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt;
sub_sexp:<a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt;
size:[ `depth of int | `string of int ] -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a></code></span></pre>
      <div class="info">Returns a smaller sexp by replacing sections with &quot;...&quot;.  Will try to show parts of the
   sexp &quot;near&quot; sub_sexp.<br/>   Limiting size to length a string length is less efficient than a certain depth.  The
   meaning of a given depth is arbitrary except that more depth gives you a bigger sexp.  Try
   100 or so.</div>
    
 
      <pre><span><span class="keyword">val</span> of_sexp_allow_extra_fields : <code class="type">(<a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; 'a) -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">of_sexp_allow_extra_fields of_sexp sexp</code> uses <code class="code">of_sexp</code> to convert <code class="code">sexp</code> to a
    value, but will not fail if there any extra fields in a record.</div>
    
<br/><br/><h3 id="3_TITLE">Transforming sexp parsers</h3><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> filter_record : <code class="type">(<a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; 'a) -&gt; string list -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; 'a</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Extended_sexp.Records_table.html">Records_table</a> : <code class="code">sig</code> <a href="Extended_sexp.Records_table.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Extended_sexp.Records_table.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Extended_sexp.Make_explicit_sexp_option.html">Make_explicit_sexp_option</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">T</code><code class="code"> : </code><code class="code">sig</code> <a href="Extended_sexp.Make_explicit_sexp_option.Anon_1.html">..</a> <code class="code">end</code><code class="code">) -&gt; </code><code class="code">sig</code> <a href="Extended_sexp.Make_explicit_sexp_option.html">..</a> <code class="code">end</code></div></pre>
	<div class="content" style="display:none">
	<div file="Extended_sexp.Make_explicit_sexp_option.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> load_sexp_conv_exn_sample : <code class="type">?strict:bool -&gt;
?buf:string -&gt;
?on_non_existence:[ `Exit | `Raise ] -&gt;
?name:string -&gt;
string -&gt;
sexp_of_t:('a -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a>) -&gt;
t_of_sexp:(<a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; 'a) -&gt; sample:'a -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> load_sexp_with_includes : <code class="type">?max_depth:int -&gt; ?buf:string -&gt; string -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a></code></span></pre>
      
    

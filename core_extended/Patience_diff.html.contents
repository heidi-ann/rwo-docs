<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Patience_diff.Matching_block.html">Matching_block</a> : <code class="code">sig</code> <a href="Patience_diff.Matching_block.html">..</a> <code class="code">end</code></pre><div class="info">Bram Cohen's comment from the original Python code (with syntax changed to OCaml):<br/>    <code class="code">get_matching_blocks a b</code> returns a list of triples describing matching
    subsequences.<br/>    Each triple is of the form (i, j, n), and means that
    a &lt;|&gt; (i,i+n) = b &lt;|&gt; (j,j+n).  The triples are monotonically increasing in
    i and in j.<br/>    The last triple is a dummy, (Array.length a, Array.length b, 0), and is the only
    triple with n=0.<br/>    Example:
    get_matching_blocks <code class="code">|&quot;a&quot;;&quot;b&quot;;&quot;x&quot;;&quot;c&quot;;&quot;d&quot;|</code> <code class="code">|&quot;a&quot;;&quot;b&quot;;&quot;c&quot;;&quot;d&quot;|</code>
    returns
    <code class="code">(0, 0, 2), (3, 2, 2), (5, 4, 0)</code>
</div>
	<div class="content" style="display:none">
	<div file="Patience_diff.Matching_block.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> get_matching_blocks : <code class="type">transform:('a -&gt; 'b) -&gt;
compare:('b -&gt; 'b -&gt; int) -&gt;
mine:'a array -&gt; other:'a array -&gt; <a href="Patience_diff.Matching_block.html#TYPEt">Matching_block.t</a> list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ratio : <code class="type">'a array -&gt; 'a array -&gt; float</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Patience_diff.Range.html">Range</a> : <code class="code">sig</code> <a href="Patience_diff.Range.html">..</a> <code class="code">end</code></pre><div class="info">For handling diffs abstractly.  A range is a subarray of the two original
    arrays with a constructor defining its relationship to the two original
    arrays.  A <code class="code">Same</code> range contains a series of elements which can be found in
    both arrays.  A <code class="code">New</code> range contains elements found only in the new array,
    while an <code class="code">Old</code> range contains elements found only in the old array.<br/>    A <code class="code">Replace</code> contains two arrays: elements in the first array are elements
    found only in the original, old array which have been replaced by elements
    in the second array, which are elements found only in the new array.</div>
	<div class="content" style="display:none">
	<div file="Patience_diff.Range.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Patience_diff.Hunk.html">Hunk</a> : <code class="code">sig</code> <a href="Patience_diff.Hunk.html">..</a> <code class="code">end</code></pre><div class="info">In diff terms, a hunk is a unit of consecutive ranges with some <code class="code">Same</code>
    context before and after <code class="code">New</code>, <code class="code">Old</code>, and <code class="code">Replace</code> ranges.  Each
    hunk contains information about the original arrays, specifically the
    starting indexes and the number of elements in both arrays to which
    the hunk refers.<br/>    Furthermore, a diff is essentially a list of hunks.  The simplest case
    is a diff with infinite context, consisting of exactly one hunk.</div>
	<div class="content" style="display:none">
	<div file="Patience_diff.Hunk.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> get_hunks : <code class="type">transform:('a -&gt; 'b) -&gt;
compare:('b -&gt; 'b -&gt; int) -&gt;
context:int -&gt; mine:'a array -&gt; other:'a array -&gt; 'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list</code></span></pre>
      <div class="info"><code class="code">get_hunks a b ~context ~compare</code> will compare the arrays <code class="code">a</code> and <code class="code">b</code> using
    <code class="code">compare</code> and produce a list of hunks. (The hunks will contain Same ranges
    of at most <code class="code">context</code> elements.)  <code class="code">context</code> defaults to infinity (producing a
    singleton hunk list), <code class="code">compare</code> defaults to polymorphic compare.</div>
    
 
      <pre><span><span class="keyword">val</span> print_ranges : <code class="type">string <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> all_same : <code class="type">'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list -&gt; bool</code></span></pre>
      <div class="info"><code class="code">get_status hunks</code> returns `Same if each hunk in <code class="code">hunks</code> has only Same ranges.</div>
    
 
      <pre><span><span class="keyword">val</span> unified : <code class="type">'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list -&gt; 'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list</code></span></pre>
      <div class="info"><code class="code">unified hunks</code> converts all Replace ranges in hunks to an Old range
    followed by a New range.</div>
    
 
      <pre><span><span class="keyword">val</span> old_only : <code class="type">'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list -&gt; 'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list</code></span></pre>
      <div class="info"><code class="code">old_only hunks</code> drops all New ranges from hunks and converts all Replace
    ranges to Old ranges.</div>
    
 
      <pre><span><span class="keyword">val</span> new_only : <code class="type">'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list -&gt; 'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list</code></span></pre>
      <div class="info"><code class="code">new_only hunks</code> drops all Old ranges from hunks and converts all Replace
    ranges to New ranges.</div>
    
 
      <pre><span><span class="keyword">val</span> ranges : <code class="type">'a <a href="Patience_diff.Hunk.html#TYPEt">Hunk.t</a> list -&gt; 'a <a href="Patience_diff.Range.html#TYPEt">Range.t</a> list</code></span></pre>
      <div class="info"><code class="code">ranges hunks</code> concatenates all the ranges of all hunks together *</div>
    
<pre><code><span id="TYPEsegment"><span class="keyword">type</span> <code class="type">'a </code>segment </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTsegment.Same"><span class="constructor">Same</span></span> <span class="keyword">of</span> <code class="type">'a array</code></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTsegment.Different"><span class="constructor">Different</span></span> <span class="keyword">of</span> <code class="type">'a array array</code></code></td>
	   </tr></table>
      
    
<pre><span id="TYPEmerged_array"><span class="keyword">type</span> <code class="type">'a </code>merged_array </span>= <code class="type">'a <a href="Patience_diff.html#TYPEsegment">segment</a> list</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> merge : <code class="type">'a array array -&gt; 'a <a href="Patience_diff.html#TYPEmerged_array">merged_array</a></code></span></pre>
      
    

 
      <pre><span><span class="keyword">val</span> to_string : <code class="type">exn -&gt; string</code></span></pre>
      <div class="info">The <code class="code">to_string</code> function is slightly tweaked to avoid escaping the string
content of <code class="code">Failure</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> to_string_hum : <code class="type">exn -&gt; string</code></span></pre>
      <div class="info">This is also an ever so slight variation of <code class="code">to_string</code> target more at user
than developers (<code class="code">Failure s</code> is just printed as <code class="code">s</code>)</div>
    
 
      <pre><span><span class="keyword">val</span> unwrap : <code class="type">exn -&gt; exn</code></span></pre>
      <div class="info"><code class="code">unwrap e</code><br/>    Tries to unwrap an exception to find the original cause of the error
    (Finally for instance has the propency to burry exception...). This is
    useful when matching on exceptions.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Extended_exn.Exn_string.html">Exn_string</a> : <code class="code">sig</code> <a href="Extended_exn.Exn_string.html">..</a> <code class="code">end</code></pre><div class="info">The point of this module is to be able to include an exn in a type that has to be
    sexpable or binable.  The <code class="code">Exn_string.t</code> type is more descriptive than just converting
    to a string and is guaranteed to have come from an exn (unless someone abuses the
    <code class="code">t_of_sexp</code> function or something).</div>
	<div class="content" style="display:none">
	<div file="Extended_exn.Exn_string.html.contents" class="content_to_load"> </div>
	</div>
  </div>

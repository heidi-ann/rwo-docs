<pre><code><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span>= {</code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code><span class="keyword">mutable</span> <span id="TYPEELTt.data">data</span> :<code class="type">'a array</code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code><span class="keyword">mutable</span> <span id="TYPEELTt.start">start</span> :<code class="type">int</code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code><span class="keyword">mutable</span> <span id="TYPEELTt.length">length</span> :<code class="type">int</code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.never_shrink">never_shrink</span> :<code class="type">bool</code>;</code></td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.dummy">dummy</span> :<code class="type">'a</code>;</code></td>
	  </tr></table>}
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?never_shrink:bool -&gt; 'a -&gt; <a href="../core/Std.Int.html#TYPEt">Core.Std.Int.t</a> -&gt; 'a <a href="Cbuffer.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> length : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> phys_length : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_full : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> check_index : <code class="type">string -&gt; 'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> get : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> copy_data : <code class="type">src:'a <a href="../core/Std.Array.html#TYPEt">Core.Std.Array.t</a> -&gt; dst:'a <a href="../core/Std.Array.html#TYPEt">Core.Std.Array.t</a> -&gt; int -&gt; int -&gt; unit</code></span></pre>
      <div class="info">copies data from one array to another.  This assumes that the destination
    array is large enough to accommodate the data</div>
    
 
      <pre><span><span class="keyword">val</span> swap_array : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int -&gt; unit</code></span></pre>
      <div class="info"><code class="code">swap_array buf len</code> copies the contents of <code class="code">buf</code> to a new array of length
    <code class="code">len</code> and places that new data into the buffer</div>
    
 
      <pre><span><span class="keyword">val</span> expand : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">double the size of the buffer</div>
    
 
      <pre><span><span class="keyword">val</span> shrink : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">half the size of the buffer</div>
    
 
      <pre><span><span class="keyword">val</span> to_array : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; 'a <a href="../core/Std.Array.html#TYPEt">Core.Std.Array.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> add : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> drop_from : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> drop_last : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> iter : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; f:(int -&gt; 'a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iter buf ~f</code> calls func on each buffer element starting with 0
    like this: (func pos element)</div>
    
 
      <pre><span><span class="keyword">val</span> iterr : <code class="type">'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; f:(int -&gt; 'a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iterr buf ~f</code> calls func on each buffer element starting with end
    like this: (func pos element)</div>
    
 
      <pre><span><span class="keyword">val</span> of_array : <code class="type">'a <a href="../core/Std.Array.html#TYPEt">Core.Std.Array.t</a> -&gt; 'a <a href="Cbuffer.html#TYPEt">t</a></code></span></pre>
      <div class="info">initialize Cbuffer from array</div>
    
 
      <pre><span><span class="keyword">val</span> cb_compare : <code class="type">f:('a -&gt; 'b -&gt; bool) -&gt;
b1:'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; b2:'b <a href="Cbuffer.html#TYPEt">t</a> -&gt; s1:int -&gt; s2:int -&gt; n:int -&gt; bool</code></span></pre>
      <div class="info">compare two buffer fragments</div>
    
 
      <pre><span><span class="keyword">val</span> drop_old : <code class="type">?cmp:('a -&gt; 'a -&gt; int) -&gt;
?free:('b -&gt; unit) -&gt; f:('b -&gt; 'a) -&gt; cutoff:'a -&gt; 'b <a href="Cbuffer.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info">drop stuff from the end.
    equivalent to
    while cutoff &gt; f (get buf (length buf - 1)) do drop_last buf; done
    but calls drop just once</div>
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Cbuffer.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Cbuffer.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/>copies data from one array to another.  This assumes that the destination
    array is large enough to accommodate the data<br/>
	  
<br/><code class="code">swap_array buf len</code> copies the contents of <code class="code">buf</code> to a new array of length
    <code class="code">len</code> and places that new data into the buffer<br/>
	  
<br/>double the size of the buffer<br/>
	  
<br/>half the size of the buffer<br/>
	  
<br/><code class="code">iter buf ~f</code> calls func on each buffer element starting with 0
    like this: (func pos element)<br/>
	  
<br/><code class="code">iterr buf ~f</code> calls func on each buffer element starting with end
    like this: (func pos element)<br/>
	  
<br/>initialize Cbuffer from array<br/>
	  
<br/>compare two buffer fragments<br/>
	  
<br/>drop stuff from the end.
    equivalent to
    while cutoff &gt; f (get buf (length buf - 1)) do drop_last buf; done
    but calls drop just once<br/>
	  

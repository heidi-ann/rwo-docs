<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      <div class="info">The type of a line buffer.</div>
    
<pre><code><span id="TYPEerror_type"><span class="keyword">type</span> error_type </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror_type.Null_retry"><span class="constructor">Null_retry</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror_type.Too_many_nulls"><span class="constructor">Too_many_nulls</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror_type.Exception"><span class="constructor">Exception</span></span> <span class="keyword">of</span> <code class="type">string * exn</code></code></td>
	   </tr></table>
      
    
<pre><code><span id="TYPElnum"><span class="keyword">type</span> lnum </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTlnum.Known"><span class="constructor">Known</span></span> <span class="keyword">of</span> <code class="type">int</code></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTlnum.Unknown"><span class="constructor">Unknown</span></span></code></td>
	   </tr></table>
      
    
<pre><code><span id="TYPEresult"><span class="keyword">type</span> result </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTresult.Success"><span class="constructor">Success</span></span> <span class="keyword">of</span> <code class="type"><a href="Linebuf.html#TYPElnum">lnum</a> * string</code></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTresult.Nothing_available"><span class="constructor">Nothing_available</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTresult.Error"><span class="constructor">Error</span></span> <span class="keyword">of</span> <code class="type"><a href="Linebuf.html#TYPEerror_type">error_type</a></code></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTresult.Fatal_error"><span class="constructor">Fatal_error</span></span> <span class="keyword">of</span> <code class="type">string * exn</code></code></td>
	   </tr></table>
      
    
<pre><span id="EXCEPTIONFile_truncated_or_deleted"><span class="keyword">exception</span> File_truncated_or_deleted</span></pre>
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?pos:<a href="../stdlib/Int64.html#TYPEt">Int64.t</a> -&gt;
?close_on_eof:bool -&gt;
?null_hack:[ `Off | `Retry | `Retry_then_fail ] -&gt;
?eprint_nulls:bool -&gt;
?follow_deletes:bool -&gt; ?signal_on_truncate_or_delete:bool -&gt; string -&gt; <a href="Linebuf.html#TYPEt">t</a></code></span></pre>
      <div class="info">Open a line buffer from the passed filename.  If <code class="code">close_on_eof</code> is
    set, when <code class="code">eof</code> is read, the file will be closed and reopened if
    necessary. if <code class="code">follow_deletes</code> is set, then when <code class="code">eof</code> is read linebuf
    will stat the file, and if it has been deleted and recreated it
    will open the new file.  If <code class="code">eprint_nulls</code> is set, then when nulls are found,
    a warning message will be printed to stderr. <code class="code">null_hack</code> specifies the
    behaviour of the linebuf upon reception of null characters in the file (as
    seen when tailing files over CIFS).
    Null hack options:
     `Off: don't check for nulls, just keep going.
     `Retry: close and reopen file when nulls are read from the file.
      If max_null_retries is reached, then pass the line with nulls.
     `Retry_then_fail: the same as retry, except that an exception is raised
      once max_null_retries is reached.</div>
    
 
      <pre><span><span class="keyword">val</span> close : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">Closes the line buffer (and the underlying file).</div>
    
 
      <pre><span><span class="keyword">val</span> is_closed : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">Returns whether or not the line buffer is closed</div>
    
 
      <pre><span><span class="keyword">val</span> try_read : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; string option</code></span></pre>
      <div class="info">Tries to read a line from the file.  If no more lines are available,
    returns <code class="code">None</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> try_read_lnum : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; (<a href="Linebuf.html#TYPElnum">lnum</a> * string) option</code></span></pre>
      <div class="info"><code class="code">try_read_lnum</code> is like <code class="code">try_read</code> except also provides the line number of the
    read line.</div>
    
 
      <pre><span><span class="keyword">val</span> try_read_lnum_verbose : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; <a href="Linebuf.html#TYPEresult">result</a></code></span></pre>
      <div class="info">Like try_read, except that it returns more verbose errors</div>
    
 
      <pre><span><span class="keyword">val</span> read : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; string</code></span></pre>
      <div class="info">Calls try_read every 0.01 seconds and returns when a line is available.</div>
    
 
      <pre><span><span class="keyword">val</span> tail : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">Seeks to the end of the file and blocks until another line is available -- this new
    line is not returned.  Successive return values of <code class="code">try_read_lnum</code> and
    <code class="code">try_read_lnum</code> will return <code class="code">Unknown</code> as the current line number until
    <code class="code">reset</code> is called</div>
    
 
      <pre><span><span class="keyword">val</span> unsafe_tail : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">Same as <code class="code">tail</code> except it may return before a new line is available on the file
    i.e. it (usually) doesn't block.  Note that this does interact with files in
    a fairly naive way, so there's no guarantee that it absolutely doesn't block.<br/>    Note that when this functions is called, the next line that's read may be a partial
    line.  After that first line, only full lines will be read.</div>
    
 
      <pre><span><span class="keyword">val</span> name : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> reset : <code class="type"><a href="Linebuf.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">reopens the file and seeks to the beginning.  Also recovers the ability to get line
    numbers if <code class="code">tail</code> has been called</div>
    

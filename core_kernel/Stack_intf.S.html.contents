<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Invariant.S1.html">Invariant.S1</a></code> with type t = 'a <a href="Stack_intf.S.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Invariant.S1.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Container.S1.html">Container.S1</a></code> with type t = 'a <a href="Stack_intf.S.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Container.S1.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> of_list : <code class="type">'a list -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">of_list l</code> returns a stack whose top is the first element of <code class="code">l</code> and bottom is the
      last element of <code class="code">l</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">unit -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ()</code> returns an empty stack.</div>
    
 
      <pre><span><span class="keyword">val</span> push : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info"><code class="code">push t a</code> adds <code class="code">a</code> to the top of stack <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> pop : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">pop t</code> removes and returns the top element of <code class="code">t</code> as <code class="code">Some a</code>, or returns <code class="code">None</code> if
      <code class="code">t</code> is empty.</div>
    
 
      <pre><span><span class="keyword">val</span> pop_exn : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> top : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">top t</code> returns <code class="code">Some a</code>, where <code class="code">a</code> is the top of <code class="code">t</code>, unless <code class="code">is_empty t</code>, in which
      case <code class="code">top</code> returns <code class="code">None</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> top_exn : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> clear : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">clear t</code> discards all elements from <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> copy : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">copy t</code> returns a copy of <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> until_empty : <code class="type">'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; ('a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">until_empty t f</code> repeatedly pops an element <code class="code">a</code> off of <code class="code">t</code> and runs <code class="code">f a</code>, until
      <code class="code">t</code> becomes empty.  It is fine if <code class="code">f</code> adds more elements to <code class="code">t</code>, in which case the
      most-recently-added element will be processed next.</div>
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Stack_intf.S.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><code class="code">fold</code>, <code class="code">iter</code>, <code class="code">find</code>, and <code class="code">find_map</code> visit the elements in order from the top of
      the stack to the bottom.  <code class="code">to_list</code> and <code class="code">to_array</code> return the elements in order from
      the top of the stack to the bottom.<br/>
	  
<br/><code class="code">of_list l</code> returns a stack whose top is the first element of <code class="code">l</code> and bottom is the
      last element of <code class="code">l</code>.<br/>
	  
<br/><code class="code">create ()</code> returns an empty stack.<br/>
	  
<br/><code class="code">push t a</code> adds <code class="code">a</code> to the top of stack <code class="code">t</code>.<br/>
	  
<br/><code class="code">pop t</code> removes and returns the top element of <code class="code">t</code> as <code class="code">Some a</code>, or returns <code class="code">None</code> if
      <code class="code">t</code> is empty.<br/>
	  
<br/><code class="code">top t</code> returns <code class="code">Some a</code>, where <code class="code">a</code> is the top of <code class="code">t</code>, unless <code class="code">is_empty t</code>, in which
      case <code class="code">top</code> returns <code class="code">None</code>.<br/>
	  
<br/><code class="code">clear t</code> discards all elements from <code class="code">t</code>.<br/>
	  
<br/><code class="code">copy t</code> returns a copy of <code class="code">t</code>.<br/>
	  
<br/><code class="code">until_empty t f</code> repeatedly pops an element <code class="code">a</code> off of <code class="code">t</code> and runs <code class="code">f a</code>, until
      <code class="code">t</code> becomes empty.  It is fine if <code class="code">f</code> adds more elements to <code class="code">t</code>, in which case the
      most-recently-added element will be processed next.<br/>
	  

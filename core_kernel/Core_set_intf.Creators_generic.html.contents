<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">('a, 'cmp) </code>t </span></pre>
      
    
<pre><span id="TYPEset"><span class="keyword">type</span> <code class="type">('a, 'cmp) </code>set </span></pre>
      
    
<pre><span id="TYPEtree"><span class="keyword">type</span> <code class="type">('a, 'cmp) </code>tree </span></pre>
      
    
<pre><span id="TYPEelt"><span class="keyword">type</span> <code class="type">'a </code>elt </span></pre>
      
    
<pre><span id="TYPEoptions"><span class="keyword">type</span> <code class="type">('a, 'cmp, 'z) </code>options </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> empty : <code class="type">('a, 'cmp, ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> singleton : <code class="type">('a, 'cmp, 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> union_list : <code class="type">('a, 'cmp, ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a> list -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_list : <code class="type">('a, 'cmp, 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> list -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_array : <code class="type">('a, 'cmp, 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> array -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_sorted_array : <code class="type">('a, 'cmp, 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> array -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a> <a href="Or_error.html#TYPEt">Or_error.t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_sorted_array_unchecked : <code class="type">('a, 'cmp, 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> array -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> stable_dedup_list : <code class="type">('a, 'b, 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> list -&gt; 'a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> list) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> map : <code class="type">('b, 'cmp, ('a, 'c) <a href="Core_set_intf.Creators_generic.html#TYPEset">set</a> -&gt; f:('a -&gt; 'b <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a>) -&gt; ('b, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      <div class="info">The types of <code class="code">map</code> and <code class="code">filter_map</code> are subtle.  The input set, <code class="code">('a, _) set</code>,
      reflects the fact that these functions take a set of *any* type, with any
      comparator, while the output set, <code class="code">('b, 'cmp) t</code>, reflects that the output set has
      the particular <code class="code">'cmp</code> of the creation function.  The comparator can come in one of
      three ways, depending on which set module is used<br/>      - <code class="code">Set.map</code> -- comparator comes as an argument<ul><li><code class="code">Set.Poly.map</code> -- comparator is polymorphic comparison</li><li><code class="code">Foo.Set.map</code> -- comparator is <code class="code">Foo.comparator</code> </li></ul></div>
    
 
      <pre><span><span class="keyword">val</span> filter_map : <code class="type">('b, 'cmp, ('a, 'c) <a href="Core_set_intf.Creators_generic.html#TYPEset">set</a> -&gt; f:('a -&gt; 'b <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a> option) -&gt; ('b, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_tree : <code class="type">('a, 'cmp, ('a <a href="Core_set_intf.Creators_generic.html#TYPEelt">elt</a>, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEtree">tree</a> -&gt; ('a, 'cmp) <a href="Core_set_intf.Creators_generic.html#TYPEt">t</a>) <a href="Core_set_intf.Creators_generic.html#TYPEoptions">options</a></code></span></pre>
      
    

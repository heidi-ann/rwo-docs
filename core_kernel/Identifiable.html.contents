<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Identifiable.S.html">S</a> = <code class="type"><code class="code">sig</code> <a href="Identifiable.S.html">..</a> <code class="code">end</code></code></pre>
	<div class="content" style="display:none">
	<div file="Identifiable.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Identifiable.Make.html">Make</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">M</code><code class="code"> : </code><code class="code">sig</code> <a href="Identifiable.Make.Anon_19.html">..</a> <code class="code">end</code><code class="code">) -&gt; </code><code class="code"><a href="Identifiable.S.html">S</a></code> with type <a href="Identifiable.S.html#TYPEt">t</a> = M.t</div></pre>
	<div class="content" style="display:none">
	<div file="Identifiable.Make.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/>There used to be a functor <code class="code">Identifiable.Of_sexpable</code>, but we removed it because it
    encouraged a terrible implementation of <code class="code">Identifiable.S</code>.  In particular, <code class="code">hash</code>,
    <code class="code">compare</code>, and <code class="code">bin_io</code> were all built by converting the type to a sexp, and then to a
    string.<br/>    One should use <code class="code">Identifiable.Make</code> instead.  Here is what a use might look like:<br/>    <pre class="codepre"><code class="code">
      module Id = struct
        module T = struct
          type t = A | B with bin_io, compare, sexp
          let hash (t : t) = Hashtbl.hash t
          include Sexpable.To_stringable (struct type nonrec t = t with sexp end)
        end
        include T
        include Identifiable.Make (T)
      end
    </code></pre><br/>    We also removed <code class="code">Identifiable.Of_stringable</code>, which wasn't as obviously bad as
    <code class="code">Of_sexpable</code>.  But it still used the string as an intermediate, which is often the
    wrong choice -- especially for <code class="code">compare</code> and <code class="code">bin_io</code>, that can be generated by
    preprocessors.<br/>
	  

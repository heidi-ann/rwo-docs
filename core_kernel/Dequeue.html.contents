<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Container.S1.html">Container.S1</a></code> with type t = 'a <a href="Dequeue.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Container.S1.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?initial_length:int -&gt; ?never_shrink:bool -&gt; unit -&gt; 'a <a href="Dequeue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ?initial_length ?never_shrink ()</code> create a new <code class="code">t</code>.  <code class="code">initial_length</code> is the
    initial length of the dequeue; it will be able to hold <code class="code">initial_length</code> elements
    without resizing.  It must be positive.  If <code class="code">never_shrink</code> is true, the physical array
    will never shrink; only expand.  If <code class="code">initial_length</code> is given without <code class="code">never_shrink</code>
    then <code class="code">never_shrink</code> is presumed to be <code class="code">true</code>, otherwise <code class="code">never_shrink</code> defaults to
    <code class="code">false</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> front_index : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; int option</code></span></pre>
      <div class="info"><code class="code">front_index t</code> return the index of the front item in <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> back_index : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; int option</code></span></pre>
      <div class="info"><code class="code">back_index t</code> return the index of the back item in <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> get : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; int -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">get t i</code> return the element at index <code class="code">i</code>.  Return <code class="code">None</code> if <code class="code">i</code> is invalid.</div>
    
 
      <pre><span><span class="keyword">val</span> get_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; int -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">get_exn t i</code> return the element at index <code class="code">i</code>.  Raise an exception if <code class="code">i</code> is
    invalid.</div>
    
 
      <pre><span><span class="keyword">val</span> peek : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back | `front ] -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">peek t back_or_front</code> return the value at the back or front of the dequeue without
    removing it.</div>
    
 
      <pre><span><span class="keyword">val</span> peek_front : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> peek_front_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> peek_back : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> peek_back_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; int -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_exn t i v</code> mutate the element at <code class="code">i</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> iter' : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back_to_front | `front_to_back ] -&gt; f:('a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iter' t ~f</code> iter over the elements of <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> iteri : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; f:(int -&gt; 'a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iteri t ~f</code> iter over the elements of t <code class="code">`front_to_back</code> passing in the index.</div>
    
 
      <pre><span><span class="keyword">val</span> iteri' : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back_to_front | `front_to_back ] -&gt; f:(int -&gt; 'a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iteri' t ~f</code> as <code class="code">iter</code>, but also passes in the index of the current element.</div>
    
 
      <pre><span><span class="keyword">val</span> fold' : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt;
[ `back_to_front | `front_to_back ] -&gt; init:'b -&gt; f:('b -&gt; 'a -&gt; 'b) -&gt; 'b</code></span></pre>
      <div class="info"><code class="code">fold' t ~init ~f</code> fold over the elements of <code class="code">t</code> </div>
    
 
      <pre><span><span class="keyword">val</span> foldi : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; init:'b -&gt; f:(int -&gt; 'b -&gt; 'a -&gt; 'b) -&gt; 'b</code></span></pre>
      <div class="info"><code class="code">foldi t ~init ~f</code> as <code class="code">fold</code>, but also passes in the index of the current element.</div>
    
 
      <pre><span><span class="keyword">val</span> foldi' : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt;
[ `back_to_front | `front_to_back ] -&gt;
init:'b -&gt; f:(int -&gt; 'b -&gt; 'a -&gt; 'b) -&gt; 'b</code></span></pre>
      <div class="info"><code class="code">foldi' t ~init ~f</code> as <code class="code">fold'</code>, but also passes in the index of the current element to
    <code class="code">f</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> enqueue : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back | `front ] -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info"><code class="code">enqueue t back_or_front v</code> push <code class="code">v</code> onto the <code class="code">back_or_front</code> of <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> enqueue_front : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> enqueue_back : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> clear : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">clear t</code> removes all elements from <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> drop : <code class="type">?n:int -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back | `front ] -&gt; unit</code></span></pre>
      <div class="info"><code class="code">drop ?n t back_or_front</code> drop <code class="code">n</code> elements (default 1) from the <code class="code">back_or_front</code> of
    <code class="code">t</code>.  If <code class="code">t</code> has fewer than <code class="code">n</code> elements then it is cleared.</div>
    
 
      <pre><span><span class="keyword">val</span> drop_front : <code class="type">?n:int -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> drop_back : <code class="type">?n:int -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back | `front ] -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">dequeue t back_or_front</code> remove and return the <code class="code">back_or_front</code> of <code class="code">t</code> </div>
    
 
      <pre><span><span class="keyword">val</span> dequeue_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; [ `back | `front ] -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue_front : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue_front_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue_back : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue_back_exn : <code class="type">'a <a href="Dequeue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Dequeue.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Dequeue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><code class="code">create ?initial_length ?never_shrink ()</code> create a new <code class="code">t</code>.  <code class="code">initial_length</code> is the
    initial length of the dequeue; it will be able to hold <code class="code">initial_length</code> elements
    without resizing.  It must be positive.  If <code class="code">never_shrink</code> is true, the physical array
    will never shrink; only expand.  If <code class="code">initial_length</code> is given without <code class="code">never_shrink</code>
    then <code class="code">never_shrink</code> is presumed to be <code class="code">true</code>, otherwise <code class="code">never_shrink</code> defaults to
    <code class="code">false</code>.<br/>
	  
<br/><code class="code">front_index t</code> return the index of the front item in <code class="code">t</code>.<br/>
	  
<br/><code class="code">back_index t</code> return the index of the back item in <code class="code">t</code>.<br/>
	  
<br/><code class="code">get t i</code> return the element at index <code class="code">i</code>.  Return <code class="code">None</code> if <code class="code">i</code> is invalid.<br/>
	  
<br/><code class="code">get_exn t i</code> return the element at index <code class="code">i</code>.  Raise an exception if <code class="code">i</code> is
    invalid.<br/>
	  
<br/><code class="code">peek t back_or_front</code> return the value at the back or front of the dequeue without
    removing it.<br/>
	  
<br/><code class="code">set_exn t i v</code> mutate the element at <code class="code">i</code>.<br/>
	  
<br/><code class="code">iter' t ~f</code> iter over the elements of <code class="code">t</code>.<br/>
	  
<br/><code class="code">iteri t ~f</code> iter over the elements of t <code class="code">`front_to_back</code> passing in the index.<br/>
	  
<br/><code class="code">iteri' t ~f</code> as <code class="code">iter</code>, but also passes in the index of the current element.<br/>
	  
<br/><code class="code">fold' t ~init ~f</code> fold over the elements of <code class="code">t</code> <br/>
	  
<br/><code class="code">foldi t ~init ~f</code> as <code class="code">fold</code>, but also passes in the index of the current element.<br/>
	  
<br/><code class="code">foldi' t ~init ~f</code> as <code class="code">fold'</code>, but also passes in the index of the current element to
    <code class="code">f</code>.<br/>
	  
<br/><code class="code">enqueue t back_or_front v</code> push <code class="code">v</code> onto the <code class="code">back_or_front</code> of <code class="code">t</code>.<br/>
	  
<br/><code class="code">clear t</code> removes all elements from <code class="code">t</code>.<br/>
	  
<br/><code class="code">drop ?n t back_or_front</code> drop <code class="code">n</code> elements (default 1) from the <code class="code">back_or_front</code> of
    <code class="code">t</code>.  If <code class="code">t</code> has fewer than <code class="code">n</code> elements then it is cleared.<br/>
	  
<br/><code class="code">dequeue t back_or_front</code> remove and return the <code class="code">back_or_front</code> of <code class="code">t</code> <br/>
	  

<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Container.S1.html">Container.S1</a></code> with type t = 'a <a href="Core_queue.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Container.S1.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> create : <code class="type">unit -&gt; 'a <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ()</code> returns an empty queue.</div>
    
 
      <pre><span><span class="keyword">val</span> enqueue : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info"><code class="code">enqueue t x</code> adds <code class="code">x</code> to the end of <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> dequeue : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">dequeue t</code> returns <code class="code">None</code> if <code class="code">t</code> is empty, otherwise it removes and returns
    the front of <code class="code">t</code> </div>
    
 
      <pre><span><span class="keyword">val</span> dequeue_exn : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> peek : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">peek t</code> returns <code class="code">None</code> if <code class="code">t</code> is empty, otherwise it returns <code class="code">Some x</code> where
    <code class="code">x</code> is the front of <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> peek_exn : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> clear : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">clear t</code> discards all elements from <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> copy : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">copy t</code> returns a copy of <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> filter_inplace : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; f:('a -&gt; bool) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">filter_inplace t ~f</code> removes all elements of <code class="code">t</code> that don't satisfy <code class="code">f</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> transfer : <code class="type">src:'a <a href="Core_queue.html#TYPEt">t</a> -&gt; dst:'a <a href="Core_queue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">transfer ~src ~dst</code> adds all of the elements of <code class="code">src</code> to the end of <code class="code">dst</code>,
    then clears <code class="code">src</code>. It is equivalent to the sequence
      <code class="code">iter ~src ~f:(enqueue dst); clear src</code>
    but runs in constant time.</div>
    
 
      <pre><span><span class="keyword">val</span> of_list : <code class="type">'a list -&gt; 'a <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">of_list list</code> returns a queue <code class="code">t</code> with the elements of <code class="code">list</code> in the same
    order as the elements of <code class="code">list</code> (i.e. the first element of <code class="code">t</code> is the first
    element of the list).</div>
    
 
      <pre><span><span class="keyword">val</span> to_list : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> partial_iter : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; f:('a -&gt; [ `Continue | `Stop ]) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">partial_iter t ~f</code> iterates through t until f returns `Stop</div>
    
 
      <pre><span><span class="keyword">val</span> map : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; f:('a -&gt; 'b) -&gt; 'b <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> concat_map : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; f:('a -&gt; 'b list) -&gt; 'b <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> filter_map : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; f:('a -&gt; 'b option) -&gt; 'b <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_array : <code class="type">'a array -&gt; 'a <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_array : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; 'a array</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fold : <code class="type">'a <a href="Core_queue.html#TYPEt">t</a> -&gt; init:'b -&gt; f:('b -&gt; 'a -&gt; 'b) -&gt; 'b</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> singleton : <code class="type">'a -&gt; 'a <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Core_queue.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Core_queue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><code class="code">create ()</code> returns an empty queue.<br/>
	  
<br/><code class="code">enqueue t x</code> adds <code class="code">x</code> to the end of <code class="code">t</code>.<br/>
	  
<br/><code class="code">dequeue t</code> returns <code class="code">None</code> if <code class="code">t</code> is empty, otherwise it removes and returns
    the front of <code class="code">t</code> <br/>
	  
<br/><code class="code">peek t</code> returns <code class="code">None</code> if <code class="code">t</code> is empty, otherwise it returns <code class="code">Some x</code> where
    <code class="code">x</code> is the front of <code class="code">t</code>.<br/>
	  
<br/><code class="code">clear t</code> discards all elements from <code class="code">t</code>.<br/>
	  
<br/><code class="code">copy t</code> returns a copy of <code class="code">t</code>.<br/>
	  
<br/><code class="code">filter_inplace t ~f</code> removes all elements of <code class="code">t</code> that don't satisfy <code class="code">f</code>.<br/>
	  
<br/><code class="code">transfer ~src ~dst</code> adds all of the elements of <code class="code">src</code> to the end of <code class="code">dst</code>,
    then clears <code class="code">src</code>. It is equivalent to the sequence
      <code class="code">iter ~src ~f:(enqueue dst); clear src</code>
    but runs in constant time.<br/>
	  
<br/><code class="code">of_list list</code> returns a queue <code class="code">t</code> with the elements of <code class="code">list</code> in the same
    order as the elements of <code class="code">list</code> (i.e. the first element of <code class="code">t</code> is the first
    element of the list).<br/>
	  
<br/><code class="code">partial_iter t ~f</code> iterates through t until f returns `Stop<br/>
	  

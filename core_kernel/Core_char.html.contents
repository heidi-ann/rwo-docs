<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type">char</code> </pre>
      <div class="info">An alias for the type of characters.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Identifiable.S.html">Identifiable.S</a></code> with type t = <a href="Core_char.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Identifiable.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> to_int : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info">Return the ASCII code of the argument.</div>
    
 
      <pre><span><span class="keyword">val</span> of_int : <code class="type">int -&gt; <a href="Core_char.html#TYPEt">t</a> option</code></span></pre>
      <div class="info">Return the character with the given ASCII code or <code class="code">None</code> is the argument is outside
    the range 0 to 255.</div>
    
 
      <pre><span><span class="keyword">val</span> of_int_exn : <code class="type">int -&gt; <a href="Core_char.html#TYPEt">t</a></code></span></pre>
      <div class="info">Return the character with the given ASCII code.  Raise <code class="code">Failure</code> if the argument is
    outside 0 to 255.</div>
    
 
      <pre><span><span class="keyword">val</span> unsafe_of_int : <code class="type">int -&gt; <a href="Core_char.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> escaped : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; string</code></span></pre>
      <div class="info">Return a string representing the given character, with special characters escaped
    following the lexical conventions of Objective Caml.</div>
    
 
      <pre><span><span class="keyword">val</span> lowercase : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; <a href="Core_char.html#TYPEt">t</a></code></span></pre>
      <div class="info">Convert the given character to its equivalent lowercase character.</div>
    
 
      <pre><span><span class="keyword">val</span> uppercase : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; <a href="Core_char.html#TYPEt">t</a></code></span></pre>
      <div class="info">Convert the given character to its equivalent uppercase character.</div>
    
 
      <pre><span><span class="keyword">val</span> is_digit : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">'0' - '9'</div>
    
 
      <pre><span><span class="keyword">val</span> is_lowercase : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">'a' - 'z'</div>
    
 
      <pre><span><span class="keyword">val</span> is_uppercase : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">'A' - 'Z'</div>
    
 
      <pre><span><span class="keyword">val</span> is_alpha : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">'a' - 'z' or 'A' - 'Z'</div>
    
 
      <pre><span><span class="keyword">val</span> is_alphanum : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">'a' - 'z' or 'A' - 'Z' or '0' - '9'</div>
    
 
      <pre><span><span class="keyword">val</span> is_print : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">' ' - '~'</div>
    
 
      <pre><span><span class="keyword">val</span> is_whitespace : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">' ' or '\t' or '\r' or '\n'</div>
    
 
      <pre><span><span class="keyword">val</span> get_digit : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; int option</code></span></pre>
      <div class="info">Return <code class="code">Some i</code> if <code class="code">is_digit c</code> and <code class="code">None</code> otherwise.</div>
    
 
      <pre><span><span class="keyword">val</span> get_digit_exn : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info">Return <code class="code">i</code> if <code class="code">is_digit c</code>.  Raises <code class="code">Failure</code> otherwise.</div>
    
 
      <pre><span><span class="keyword">val</span> min_value : <code class="type"><a href="Core_char.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> max_value : <code class="type"><a href="Core_char.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Core_char.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">(int -&gt; <a href="Core_char.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type"><a href="Core_char.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/>Return the ASCII code of the argument.<br/>
	  
<br/>Return the character with the given ASCII code or <code class="code">None</code> is the argument is outside
    the range 0 to 255.<br/>
	  
<br/>Return the character with the given ASCII code.  Raise <code class="code">Failure</code> if the argument is
    outside 0 to 255.<br/>
	  
<br/>Return a string representing the given character, with special characters escaped
    following the lexical conventions of Objective Caml.<br/>
	  
<br/>Convert the given character to its equivalent lowercase character.<br/>
	  
<br/>Convert the given character to its equivalent uppercase character.<br/>
	  
<br/>'0' - '9'<br/>
	  
<br/>'a' - 'z'<br/>
	  
<br/>'A' - 'Z'<br/>
	  
<br/>'a' - 'z' or 'A' - 'Z'<br/>
	  
<br/>'a' - 'z' or 'A' - 'Z' or '0' - '9'<br/>
	  
<br/>' ' - '~'<br/>
	  
<br/>' ' or '\t' or '\r' or '\n'<br/>
	  
<br/>Return <code class="code">Some i</code> if <code class="code">is_digit c</code> and <code class="code">None</code> otherwise.<br/>
	  
<br/>Return <code class="code">i</code> if <code class="code">is_digit c</code>.  Raises <code class="code">Failure</code> otherwise.<br/>
	  

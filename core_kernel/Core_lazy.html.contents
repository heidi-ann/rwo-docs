<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span>= <code class="type">'a lazy_t</code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Monad.S.html">Monad.S</a></code> with type t = 'a <a href="Core_lazy.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Monad.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="EXCEPTIONUndefined"><span class="keyword">exception</span> Undefined</span></pre>
 
      <pre><span><span class="keyword">val</span> force : <code class="type">'a <a href="Core_lazy.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">force x</code> forces the suspension <code class="code">x</code> and returns its result.
   If <code class="code">x</code> has already been forced, <code class="code">Lazy.force x</code> returns the
   same value again without recomputing it.  If it raised an exception,
   the same exception is raised again.
   Raise <code class="code">Undefined</code> if the forcing of <code class="code">x</code> tries to force <code class="code">x</code> itself
   recursively.</div>
    
 
      <pre><span><span class="keyword">val</span> force_val : <code class="type">'a <a href="Core_lazy.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      <div class="info">Like <code class="code">force</code> except that if the computation of <code class="code">x</code> raises an exception, it is
    unspecified whether <code class="code">force_val x</code> raises the same exception or <code class="code">Undefined</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> lazy_from_fun : <code class="type">(unit -&gt; 'a) -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">lazy_from_fun f</code> is the same as <code class="code">lazy (f ())</code> but slightly more
    efficient.</div>
    
 
      <pre><span><span class="keyword">val</span> lazy_from_val : <code class="type">'a -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">lazy_from_val v</code> returns an already-forced suspension of <code class="code">v</code>
    This is for special purposes only and should not be confused with
    <code class="code">lazy (v)</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> lazy_is_val : <code class="type">'a <a href="Core_lazy.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info"><code class="code">lazy_is_val x</code> returns <code class="code">true</code> if <code class="code">x</code> has already been forced and
    did not raise an exception.</div>
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> compare : <code class="type">('a -&gt; 'a -&gt; int) -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Core_lazy.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><code class="code">force x</code> forces the suspension <code class="code">x</code> and returns its result.
   If <code class="code">x</code> has already been forced, <code class="code">Lazy.force x</code> returns the
   same value again without recomputing it.  If it raised an exception,
   the same exception is raised again.
   Raise <code class="code">Undefined</code> if the forcing of <code class="code">x</code> tries to force <code class="code">x</code> itself
   recursively.<br/>
	  
<br/>Like <code class="code">force</code> except that if the computation of <code class="code">x</code> raises an exception, it is
    unspecified whether <code class="code">force_val x</code> raises the same exception or <code class="code">Undefined</code>.<br/>
	  
<br/><code class="code">lazy_from_fun f</code> is the same as <code class="code">lazy (f ())</code> but slightly more
    efficient.<br/>
	  
<br/><code class="code">lazy_from_val v</code> returns an already-forced suspension of <code class="code">v</code>
    This is for special purposes only and should not be confused with
    <code class="code">lazy (v)</code>.<br/>
	  
<br/><code class="code">lazy_is_val x</code> returns <code class="code">true</code> if <code class="code">x</code> has already been forced and
    did not raise an exception.<br/>
	  

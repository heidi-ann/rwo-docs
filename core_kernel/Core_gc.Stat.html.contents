<pre><code><span id="TYPEt"><span class="keyword">type</span> t </span>= {</code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.minor_words">minor_words</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">Number of words allocated in the minor heap since
       the program was started.  This number is accurate in
       byte-code programs, but only an approximation in programs
       compiled to native code.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.promoted_words">promoted_words</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">Number of words allocated in the minor heap that
       survived a minor collection and were moved to the major heap
       since the program was started.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.major_words">major_words</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">Number of words allocated in the major heap, including
       the promoted words, since the program was started.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.minor_collections">minor_collections</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of minor collections since the program was started.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.major_collections">major_collections</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of major collection cycles completed since the program
        was started.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.heap_words">heap_words</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Total size of the major heap, in words.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.heap_chunks">heap_chunks</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of contiguous pieces of memory that make up the major heap.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.live_words">live_words</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of words of live data in the major heap, including the header
       words.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.live_blocks">live_blocks</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of live blocks in the major heap.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.free_words">free_words</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of words in the free list.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.free_blocks">free_blocks</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of blocks in the free list.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.largest_free">largest_free</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Size (in words) of the largest block in the free list.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.fragments">fragments</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of wasted words due to fragmentation.  These are
       1-words free blocks placed between two live blocks.  They
       are not available for allocation.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.compactions">compactions</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Number of heap compactions since the program was started.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.top_heap_words">top_heap_words</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Maximum size reached by the major heap, in words.</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTt.stack_size">stack_size</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Current size of the stack, in words.</td>
	  </tr></table>}
      
    
 
      <pre><span><span class="keyword">val</span> stack_size : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> top_heap_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> compactions : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fragments : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> largest_free : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> free_blocks : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> free_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> live_blocks : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> live_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> heap_chunks : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> heap_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> major_collections : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> minor_collections : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> major_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> promoted_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> minor_words : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; float</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_gc.Stat.Fields.html">Fields</a> : <code class="code">sig</code> <a href="Core_gc.Stat.Fields.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_gc.Stat.Fields.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Core_gc.Stat.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">(int -&gt; <a href="Core_gc.Stat.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type"><a href="Core_gc.Stat.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    

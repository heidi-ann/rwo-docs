<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Hash_queue.S.Key.html">Key</a> : <code class="code"><a href="Hash_queue.Key.html">Key</a></code></pre>
	<div class="content" style="display:none">
	<div file="Hash_queue.S.Key.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      <div class="info">a hash-queue, where the values are of type 'a</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Container.S1.html">Container.S1</a></code> with type t = 'a <a href="Hash_queue.S.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Container.S1.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> invariant : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">invariant t</code> checks the invariants of the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">unit -&gt; 'a <a href="Hash_queue.S.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ()</code> returns an empty queue.</div>
    
 
      <pre><span><span class="keyword">val</span> clear : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">clear the queue</div>
    
 
      <pre><span><span class="keyword">val</span> mem : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; bool</code></span></pre>
      <div class="info"><code class="code">mem q k</code> returns true iff there is some (k, v) in the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> lookup : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">lookup t k</code> returns the value of the key-value pair in the queue with
     key k, if there is one.</div>
    
 
      <pre><span><span class="keyword">val</span> lookup_exn : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> enqueue : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; 'a -&gt; [ `Key_already_present | `Ok ]</code></span></pre>
      <div class="info"><code class="code">enqueue t k v</code> adds the key-value pair (k, v) to the end of the queue,
       returning `Ok if the pair was added, or `Key_already_present
       if there is already a (k, v') in the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> enqueue_exn : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> first : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">first t</code> returns the front element of the queue, without removing it.</div>
    
 
      <pre><span><span class="keyword">val</span> keys : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> list</code></span></pre>
      <div class="info"><code class="code">keys t</code> returns the keys in the order of the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> dequeue : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info"><code class="code">dequeue t</code> returns the front element of the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> dequeue_exn : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue_with_key : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; (<a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> * 'a) option</code></span></pre>
      <div class="info"><code class="code">dequeue_with_key t</code> returns the front element of the queue and its key</div>
    
 
      <pre><span><span class="keyword">val</span> dequeue_with_key_exn : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> * 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> dequeue_all : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; f:('a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">dequeue_all t ~f</code> dequeues every element of the queue and applies f to each
       one.</div>
    
 
      <pre><span><span class="keyword">val</span> remove : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; [ `No_such_key | `Ok ]</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remove_exn : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> replace : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; 'a -&gt; [ `No_such_key | `Ok ]</code></span></pre>
      <div class="info"><code class="code">replace q k v</code> changes the value of key k in the queue to v.</div>
    
 
      <pre><span><span class="keyword">val</span> replace_exn : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; <a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> iteri : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; f:(key:<a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; data:'a -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">iter t ~f</code> applies f to each key and element of the queue.</div>
    
 
      <pre><span><span class="keyword">val</span> foldi : <code class="type">'a <a href="Hash_queue.S.html#TYPEt">t</a> -&gt; init:'b -&gt; f:('b -&gt; key:<a href="Hash_queue.S.Key.html#TYPEt">Key.t</a> -&gt; data:'a -&gt; 'b) -&gt; 'b</code></span></pre>
      
    

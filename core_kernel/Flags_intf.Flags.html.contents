<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Flags_intf.Flags.Make_arg.html">Make_arg</a> = <code class="type"><code class="code"><a href="Flags_intf.Make_arg.html">Make_arg</a></code></code></pre>
	<div class="content" style="display:none">
	<div file="Flags_intf.Flags.Make_arg.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Flags_intf.Flags.S.html">S</a> = <code class="type"><code class="code"><a href="Flags_intf.S.html">S</a></code></code></pre>
	<div class="content" style="display:none">
	<div file="Flags_intf.Flags.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> create : <code class="type">bit:int -&gt; <a href="Flags_intf.Int63.html#TYPEt">Int63.t</a></code></span></pre>
      <div class="info"><code class="code">create ~bit:n</code> creates a flag with the <code class="code">n</code>th bit set.  <code class="code">n</code> must be between 0 and
      62.<br/>      Typically a flag has one bit set; <code class="code">create</code> is useful in exactly those cases.  For
      flags with multiple bits one can either define the Int63.t directly or create it in
      terms of simpler flags, using <code class="code">+</code> and <code class="code">-</code>.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Flags_intf.Flags.Make.html">Make</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">M</code><code class="code"> : </code><code class="type"><a href="Flags_intf.Flags.Make_arg.html">Make_arg</a></code><code class="code">) -&gt; </code><code class="code"><a href="Flags_intf.Flags.S.html">S</a></code> with type <a href="Flags_intf.S.html#TYPEt">t</a> = <a href="Flags_intf.Int63.html#TYPEt">Int63.t</a></div></pre><div class="info"><code class="code">Flags.Make</code> builds a new flags module.  If there is an error in the <code class="code">known</code> flags,
      it behaves as per <code class="code">on_error</code>.<br/>      We expose <code class="code">type t = int</code> in the result of <code class="code">Flags.Make</code> so that one can easily use
      flag constants as values of the flag type without having to coerce them.  It is
      typical to hide the <code class="code">t = int</code> in another signature <code class="code">S</code>.</div>
	<div class="content" style="display:none">
	<div file="Flags_intf.Flags.Make.html.contents" class="content_to_load"> </div>
	</div>
  </div>

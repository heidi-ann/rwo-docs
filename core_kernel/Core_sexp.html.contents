<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Atom"><span class="constructor">Atom</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.List"><span class="constructor">List</span></span> <span class="keyword">of</span> <code class="type"><a href="Core_sexp.html#TYPEt">t</a> list</code></code></td>
	   </tr></table>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_sexp.O.html">O</a> : <code class="code">sig</code> <a href="Core_sexp.O.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_sexp.O.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Interfaces.Comparable.html">Interfaces.Comparable</a></code> with type t = <a href="Core_sexp.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Interfaces.Comparable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Interfaces.Stringable.html">Interfaces.Stringable</a></code> with type t = <a href="Core_sexp.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Interfaces.Stringable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../sexplib/Sexp_intf.S.html">Sexplib.Sexp_intf.S</a></code> with type t = <a href="Core_sexp.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../sexplib/Sexp_intf.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="EXCEPTIONOf_sexp_error"><span class="keyword">exception</span> Of_sexp_error</span> <span class="keyword">of</span> <code class="type">exn * <a href="Core_sexp.html#TYPEt">t</a></code></pre>
 
      <pre><span><span class="keyword">val</span> of_int_style : <code class="type">[ `No_underscores | `Underscores ] <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
<pre><span id="TYPEno_raise"><span class="keyword">type</span> <code class="type">'a </code>no_raise </span>= <code class="type">'a</code> </pre>
      <div class="info"><code class="code">no_raise</code> is the identity, but by using <code class="code">'a no_raise</code> in a sexpable type, the
    resulting use <code class="code">sexp_of_no_raise</code> protects the conversion of <code class="code">'a</code> to a sexp so that if
    it fails, one gets a sexp with an error message about the failure, rather than an
    exception being raised.<br/>    WARNING: The resulting <code class="code">no_raise_of_sexp</code> can still raise.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_sexp.Sexp_option.html">Sexp_option</a> : <code class="code">sig</code> <a href="Core_sexp.Sexp_option.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_sexp.Sexp_option.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_sexp.Sexp_list.html">Sexp_list</a> : <code class="code">sig</code> <a href="Core_sexp.Sexp_list.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_sexp.Sexp_list.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_sexp.Sexp_array.html">Sexp_array</a> : <code class="code">sig</code> <a href="Core_sexp.Sexp_array.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_sexp.Sexp_array.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_sexp.Sexp_opaque.html">Sexp_opaque</a> : <code class="code">sig</code> <a href="Core_sexp.Sexp_opaque.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_sexp.Sexp_opaque.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_sexp.Sexp_maybe.html">Sexp_maybe</a> : <code class="code">sig</code> <a href="Core_sexp.Sexp_maybe.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_sexp.Sexp_maybe.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Core_sexp.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">(int -&gt; <a href="Core_sexp.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type"><a href="Core_sexp.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> no_raise_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a></code></span></pre>
      <div class="info"><code class="code">no_raise</code> is the identity, but by using <code class="code">'a no_raise</code> in a sexpable type, the
    resulting use <code class="code">sexp_of_no_raise</code> protects the conversion of <code class="code">'a</code> to a sexp so that if
    it fails, one gets a sexp with an error message about the failure, rather than an
    exception being raised.<br/>    WARNING: The resulting <code class="code">no_raise_of_sexp</code> can still raise.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_no_raise : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_no_raise : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_no_raise : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_no_raise_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_no_raise__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_no_raise : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_no_raise : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_no_raise : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_no_raise_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt;
'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_no_raise : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Core_sexp.html#TYPEno_raise">no_raise</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    

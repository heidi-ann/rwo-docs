<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span>= <code class="type">('a, <a href="Error.html#TYPEt">Error.t</a>) <a href="Result.html#TYPEt">Result.t</a></code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Monad.S.html">Monad.S</a></code> with type t = 'a <a href="Or_error.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Monad.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> try_with : <code class="type">?backtrace:bool -&gt; (unit -&gt; 'a) -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">try_with f</code> catches exceptions thrown by <code class="code">f</code> and returns them in the Result.t as an
    Error.t.  <code class="code">try_with_join</code> is like <code class="code">try_with</code>, except that <code class="code">f</code> can throw exceptions or
    return an Error directly, without ending up with a nested error; it is equivalent to
    <code class="code">Result.join (try_with f)</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> try_with_join : <code class="type">?backtrace:bool -&gt; (unit -&gt; 'a <a href="Or_error.html#TYPEt">t</a>) -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ok_exn : <code class="type">'a <a href="Or_error.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">ok_exn t</code> throws an exception if <code class="code">t</code> is an <code class="code">Error</code>, and otherwise returns the
    contents of the <code class="code">Ok</code> constructor.</div>
    
 
      <pre><span><span class="keyword">val</span> of_exn : <code class="type">?backtrace:[ `Get | `This of string ] -&gt; exn -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">of_exn exn</code> is <code class="code">Error (Error.of_exn exn)</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> of_exn_result : <code class="type">('a, exn) <a href="Result.html#TYPEt">Result.t</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">of_exn_result (Ok a) = Ok a</code>, <code class="code">of_exn_result (Error exn) = of_exn exn</code> </div>
    
 
      <pre><span><span class="keyword">val</span> error : <code class="type">string -&gt; 'a -&gt; ('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'b <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">error message value sexp_of_value</code> constructs an <code class="code">Error.t</code> and returns it as a
    <code class="code">Result.Error</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> error_string : <code class="type">string -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">error_string message</code> is <code class="code">Error (Error.of_string message)</code> </div>
    
 
      <pre><span><span class="keyword">val</span> tag : <code class="type">'a <a href="Or_error.html#TYPEt">t</a> -&gt; string -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">tag t string</code> is <code class="code">Result.map_error t ~f:(fun e -&gt; Error.tag e string)</code>.
    <code class="code">tag_arg</code> is similar.</div>
    
 
      <pre><span><span class="keyword">val</span> tag_arg : <code class="type">'a <a href="Or_error.html#TYPEt">t</a> -&gt; string -&gt; 'b -&gt; ('b -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unimplemented : <code class="type">string -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">unimplemented name</code> returns a standard error value for an unimplemented value.</div>
    
 
      <pre><span><span class="keyword">val</span> combine_errors : <code class="type">'a <a href="Or_error.html#TYPEt">t</a> list -&gt; 'a list <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">combine_errors ts</code> returns <code class="code">Ok</code> if every element in <code class="code">ts</code> is <code class="code">Ok</code>, else it returns
    <code class="code">Error</code> with all the errors in <code class="code">ts</code>.  More precisely:<br/>    | combine_errors <code class="code">Ok a1; ...; Ok an</code> = Ok <code class="code">a1; ...; an</code>
    | combine_errors <code class="code">...; Error e1; ...; Error en; ...</code>
    |   = Error (Error.of_list <code class="code">e1; ...; en</code>)</div>
    
 
      <pre><span><span class="keyword">val</span> combine_errors_unit : <code class="type">unit <a href="Or_error.html#TYPEt">t</a> list -&gt; unit <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">combine_errors_unit</code> returns <code class="code">Ok</code> if every element in <code class="code">ts</code> is <code class="code">Ok ()</code>, else it
    returns <code class="code">Error</code> with all the errors in <code class="code">ts</code>, like <code class="code">combine_errors</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Or_error.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Or_error.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Or_error.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><code class="code">try_with f</code> catches exceptions thrown by <code class="code">f</code> and returns them in the Result.t as an
    Error.t.  <code class="code">try_with_join</code> is like <code class="code">try_with</code>, except that <code class="code">f</code> can throw exceptions or
    return an Error directly, without ending up with a nested error; it is equivalent to
    <code class="code">Result.join (try_with f)</code>.<br/>
	  
<br/><code class="code">ok_exn t</code> throws an exception if <code class="code">t</code> is an <code class="code">Error</code>, and otherwise returns the
    contents of the <code class="code">Ok</code> constructor.<br/>
	  
<br/><code class="code">of_exn exn</code> is <code class="code">Error (Error.of_exn exn)</code>.<br/>
	  
<br/><code class="code">of_exn_result (Ok a) = Ok a</code>, <code class="code">of_exn_result (Error exn) = of_exn exn</code> <br/>
	  
<br/><code class="code">error message value sexp_of_value</code> constructs an <code class="code">Error.t</code> and returns it as a
    <code class="code">Result.Error</code>.<br/>
	  
<br/><code class="code">error_string message</code> is <code class="code">Error (Error.of_string message)</code> <br/>
	  
<br/><code class="code">tag t string</code> is <code class="code">Result.map_error t ~f:(fun e -&gt; Error.tag e string)</code>.
    <code class="code">tag_arg</code> is similar.<br/>
	  
<br/><code class="code">unimplemented name</code> returns a standard error value for an unimplemented value.<br/>
	  
<br/><code class="code">combine_errors ts</code> returns <code class="code">Ok</code> if every element in <code class="code">ts</code> is <code class="code">Ok</code>, else it returns
    <code class="code">Error</code> with all the errors in <code class="code">ts</code>.  More precisely:<br/>    | combine_errors <code class="code">Ok a1; ...; Ok an</code> = Ok <code class="code">a1; ...; an</code>
    | combine_errors <code class="code">...; Error e1; ...; Error en; ...</code>
    |   = Error (Error.of_list <code class="code">e1; ...; en</code>)<br/>
	  
<br/><code class="code">combine_errors_unit</code> returns <code class="code">Ok</code> if every element in <code class="code">ts</code> is <code class="code">Ok ()</code>, else it
    returns <code class="code">Error</code> with all the errors in <code class="code">ts</code>, like <code class="code">combine_errors</code>.<br/>
	  

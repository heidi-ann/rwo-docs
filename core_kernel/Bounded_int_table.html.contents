<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">('key, 'data) </code>t </span></pre>
      
    
<pre><span id="TYPEtable"><span class="keyword">type</span> <code class="type">('a, 'b) </code>table </span>= <code class="type">('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a></code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Equal.S2.html">Equal.S2</a></code> with type t = ('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Equal.S2.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> invariant : <code class="type">('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?sexp_of_key:('key -&gt; <a href="Std_internal.Sexp.html#TYPEt">Std_internal.Sexp.t</a>) -&gt;
num_keys:int -&gt; key_to_int:('key -&gt; int) -&gt; unit -&gt; ('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ~num_keys ~key_to_int</code> returns a table where the keys can map to 0
    .. num_keys-1, according to <code class="code">key_to_int</code>.  It is an error if <code class="code">num_keys &lt; 0</code>.<br/>    <code class="code">sexp_of_key</code>, if supplied, will be used to display keys in error messages.</div>
    
 
      <pre><span><span class="keyword">val</span> keys : <code class="type">('key, 'a) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'key list</code></span></pre>
      <div class="info">Standard hashtbl functions.</div>
    
 
      <pre><span><span class="keyword">val</span> data : <code class="type">('a, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'data list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> find : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'key -&gt; 'data option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> find_exn : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'key -&gt; 'data</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> find_or_add : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'key -&gt; default:(unit -&gt; 'data) -&gt; 'data</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fold : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt;
init:'accum -&gt; f:(key:'key -&gt; data:'data -&gt; 'accum -&gt; 'accum) -&gt; 'accum</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> iter : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:(key:'key -&gt; data:'data -&gt; unit) -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> iter_vals : <code class="type">('a, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:('data -&gt; unit) -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> filter_mapi : <code class="type">('key, 'data1) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt;
f:(key:'key -&gt; data:'data1 -&gt; 'data2 option) -&gt; ('key, 'data2) <a href="Bounded_int_table.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> filter_map : <code class="type">('key, 'data1) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:('data1 -&gt; 'data2 option) -&gt; ('key, 'data2) <a href="Bounded_int_table.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mapi : <code class="type">('key, 'data1) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:(key:'key -&gt; data:'data1 -&gt; 'data2) -&gt; ('key, 'data2) <a href="Bounded_int_table.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> map : <code class="type">('key, 'data1) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:('data1 -&gt; 'data2) -&gt; ('key, 'data2) <a href="Bounded_int_table.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> for_alli : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:(key:'key -&gt; data:'data -&gt; bool) -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> existsi : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:(key:'key -&gt; data:'data -&gt; bool) -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> for_all : <code class="type">('a, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:('data -&gt; bool) -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> exists : <code class="type">('a, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; f:('data -&gt; bool) -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> length : <code class="type">('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mem : <code class="type">('key, 'a) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'key -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remove : <code class="type">('key, 'a) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; 'key -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set : <code class="type">('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; key:'a -&gt; data:'b -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> add : <code class="type">('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; key:'a -&gt; data:'b -&gt; [ `Duplicate of 'b | `Ok ]</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> add_exn : <code class="type">('a, 'b) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; key:'a -&gt; data:'b -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_alist : <code class="type">('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; ('key * 'data) list</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Bounded_int_table.With_key.html">With_key</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">Key</code><code class="code"> : </code><code class="code">sig</code> <a href="Bounded_int_table.With_key.Anon_6.html">..</a> <code class="code">end</code><code class="code">) -&gt; </code><code class="code">sig</code> <a href="Bounded_int_table.With_key.html">..</a> <code class="code">end</code></div></pre>
	<div class="content" style="display:none">
	<div file="Bounded_int_table.With_key.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> debug : <code class="type">bool <a href="../stdlib/Pervasives.html#TYPEref">ref</a></code></span></pre>
      <div class="info">set <code class="code">debug := true</code> to turn on debugging, including potentially slow invariant
    checking.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('key -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt;
('data -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; ('key, 'data) <a href="Bounded_int_table.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">create ~num_keys ~key_to_int</code> returns a table where the keys can map to 0
    .. num_keys-1, according to <code class="code">key_to_int</code>.  It is an error if <code class="code">num_keys &lt; 0</code>.<br/>    <code class="code">sexp_of_key</code>, if supplied, will be used to display keys in error messages.<br/>
	  
<br/>Standard hashtbl functions.<br/>
	  
<br/>Serialization of a bounded int table using <code class="code">bin_io</code> or <code class="code">sexp</code> preserves <code class="code">num_keys</code>,
      but only takes space proportional to the <code class="code">length</code> of the table.<br/>
	  
<br/>set <code class="code">debug := true</code> to turn on debugging, including potentially slow invariant
    checking.<br/>
	  

<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_map.Tree.html">Tree</a> : <code class="code">sig</code> <a href="Core_map.Tree.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Tree.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">('key, +'value, 'cmp) </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> invariants : <code class="type">('a, 'b, 'c) <a href="Core_map.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">Test if invariants of internal AVL search tree hold.</div>
    
 
      <pre><span><span class="keyword">val</span> comparator : <code class="type">('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; ('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> empty : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt; ('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">the empty map</div>
    
 
      <pre><span><span class="keyword">val</span> singleton : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt; 'a -&gt; 'b -&gt; ('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">map with one key, data pair</div>
    
 
      <pre><span><span class="keyword">val</span> of_alist : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt;
('a * 'b) list -&gt; [ `Duplicate_key of 'a | `Ok of ('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a> ]</code></span></pre>
      <div class="info">creates map from association list with unique keys</div>
    
 
      <pre><span><span class="keyword">val</span> of_alist_exn : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt; ('a * 'b) list -&gt; ('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">creates map from association list with unique keys.  Raises an exception if duplicate
    'a keys are found.</div>
    
 
      <pre><span><span class="keyword">val</span> of_alist_multi : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt; ('a * 'b) list -&gt; ('a, 'b list, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">creates map from association list with possibly repeated keys.</div>
    
 
      <pre><span><span class="keyword">val</span> of_alist_fold : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt;
('a * 'b) list -&gt; init:'c -&gt; f:('c -&gt; 'b -&gt; 'c) -&gt; ('a, 'c, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">combines an association list into a map, folding together bound values with common
    keys</div>
    
 
      <pre><span><span class="keyword">val</span> to_tree : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; ('k, 'v, 'cmp) <a href="Core_map.Tree.html#TYPEt">Tree.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_tree : <code class="type">comparator:('k, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt;
('k, 'v, 'cmp) <a href="Core_map.Tree.html#TYPEt">Tree.t</a> -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_sorted_array : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt;
('a * 'b) array -&gt; ('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a> <a href="Or_error.html#TYPEt">Or_error.t</a></code></span></pre>
      <div class="info">creates map from sorted array of key-data pairs. The input array must be sorted, as
    given by the relevant comparator (either in ascending or descending order), and must
    not contain any duplicate keys.  If either of these conditions do not hold, an error
    is returned.</div>
    
 
      <pre><span><span class="keyword">val</span> of_sorted_array_unchecked : <code class="type">comparator:('a, 'cmp) <a href="Comparator.html#TYPEt">Comparator.t</a> -&gt; ('a * 'b) array -&gt; ('a, 'b, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">Like <code class="code">of_sorted_array</code> except behavior is undefined when an <code class="code">Error</code> would have been
    returned.</div>
    
 
      <pre><span><span class="keyword">val</span> is_empty : <code class="type">('a, 'b, 'c) <a href="Core_map.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info">Test whether a map is empty or not.</div>
    
 
      <pre><span><span class="keyword">val</span> length : <code class="type">('a, 'b, 'c) <a href="Core_map.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info"><code class="code">length map</code> <b>Returns</b> number of elements in <code class="code">map</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> add : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; key:'k -&gt; data:'v -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">returns a new map with the specified new binding;
    if the key was already bound, its previous binding disappears.</div>
    
 
      <pre><span><span class="keyword">val</span> add_multi : <code class="type">('k, 'v list, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; key:'k -&gt; data:'v -&gt; ('k, 'v list, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">if key is not present then add a singleton list, otherwise, cons data on the head of
    the existing list.</div>
    
 
      <pre><span><span class="keyword">val</span> change : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; ('v option -&gt; 'v option) -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">change map key f</code> updates the given map by changing the value stored under <code class="code">key</code>
    according to <code class="code">f</code>.  Thus, for example, one might write:<br/>    <pre class="codepre"><code class="code">change m k (function None -&gt; Some 0 | Some x -&gt; Some (x + 1))</code></pre><br/>    to produce a new map where the integer stored under key <code class="code">k</code> is incremented by one
    (treating an unknown key as zero).</div>
    
 
      <pre><span><span class="keyword">val</span> find : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; 'v option</code></span></pre>
      <div class="info">returns the value bound to the given key, raising <code class="code">Not_found</code> if none such exists</div>
    
 
      <pre><span><span class="keyword">val</span> find_exn : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; 'v</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remove : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">returns a new map with any binding for the key in question removed</div>
    
 
      <pre><span><span class="keyword">val</span> mem : <code class="type">('k, 'a, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; bool</code></span></pre>
      <div class="info"><code class="code">mem map key</code> tests whether <code class="code">map</code> contains a binding for <code class="code">key</code> </div>
    
 
      <pre><span><span class="keyword">val</span> iter : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; f:(key:'k -&gt; data:'v -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info">iterator for map</div>
    
 
      <pre><span><span class="keyword">val</span> iter2 : <code class="type">('k, 'v1, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
('k, 'v2, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
f:(key:'k -&gt;
   data:[ `Both of 'v1 * 'v2 | `Left of 'v1 | `Right of 'v2 ] -&gt; unit) -&gt;
unit</code></span></pre>
      <div class="info">Iterate two maps side by side.  Complexity of this function is O(M+N).  If two inputs
    are <code class="code">(0, a); (1, a)</code> and <code class="code">(1, b); (2, b)</code>, <code class="code">f</code> will be called with <code class="code">(0, `Left a); (1,
    `Both (a, b)); (2, `Right b)</code> </div>
    
 
      <pre><span><span class="keyword">val</span> map : <code class="type">('k, 'v1, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; f:('v1 -&gt; 'v2) -&gt; ('k, 'v2, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">returns new map with bound values replaced by f applied to the bound values</div>
    
 
      <pre><span><span class="keyword">val</span> mapi : <code class="type">('k, 'v1, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; f:(key:'k -&gt; data:'v1 -&gt; 'v2) -&gt; ('k, 'v2, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">like <code class="code">map</code>, but function takes both key and data as arguments</div>
    
 
      <pre><span><span class="keyword">val</span> fold : <code class="type">('k, 'v, 'b) <a href="Core_map.html#TYPEt">t</a> -&gt; init:'a -&gt; f:(key:'k -&gt; data:'v -&gt; 'a -&gt; 'a) -&gt; 'a</code></span></pre>
      <div class="info">folds over keys and data in map in increasing order of key.</div>
    
 
      <pre><span><span class="keyword">val</span> fold_right : <code class="type">('k, 'v, 'b) <a href="Core_map.html#TYPEt">t</a> -&gt; init:'a -&gt; f:(key:'k -&gt; data:'v -&gt; 'a -&gt; 'a) -&gt; 'a</code></span></pre>
      <div class="info">folds over keys and data in map in decreasing order of key.</div>
    
 
      <pre><span><span class="keyword">val</span> filter : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; f:(key:'k -&gt; data:'v -&gt; bool) -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> filter_map : <code class="type">('k, 'v1, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; f:('v1 -&gt; 'v2 option) -&gt; ('k, 'v2, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">returns new map with bound values filtered by f applied to the bound values</div>
    
 
      <pre><span><span class="keyword">val</span> filter_mapi : <code class="type">('k, 'v1, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
f:(key:'k -&gt; data:'v1 -&gt; 'v2 option) -&gt; ('k, 'v2, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">like <code class="code">filter_map</code>, but function takes both key and data as arguments</div>
    
 
      <pre><span><span class="keyword">val</span> compare_direct : <code class="type">('v -&gt; 'v -&gt; int) -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info">Total ordering between maps.  The first argument is a total ordering used to compare
    data associated with equal keys in the two maps.</div>
    
 
      <pre><span><span class="keyword">val</span> equal : <code class="type">('v -&gt; 'v -&gt; bool) -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; ('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      <div class="info"><code class="code">equal cmp m1 m2</code> tests whether the maps <code class="code">m1</code> and <code class="code">m2</code> are equal, that is, contain
    equal keys and associate them with equal data.  <code class="code">cmp</code> is the equality predicate used
    to compare the data associated with the keys.</div>
    
 
      <pre><span><span class="keyword">val</span> keys : <code class="type">('k, 'a, 'b) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k list</code></span></pre>
      <div class="info">returns list of keys in map</div>
    
 
      <pre><span><span class="keyword">val</span> data : <code class="type">('a, 'v, 'b) <a href="Core_map.html#TYPEt">t</a> -&gt; 'v list</code></span></pre>
      <div class="info">returns list of data in map</div>
    
 
      <pre><span><span class="keyword">val</span> to_alist : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; ('k * 'v) list</code></span></pre>
      <div class="info">creates association list from map.  No guarantee about order.</div>
    
 
      <pre><span><span class="keyword">val</span> validate : <code class="type">name:('k -&gt; string) -&gt; 'v <a href="Validate.html#TYPEcheck">Validate.check</a> -&gt; ('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> <a href="Validate.html#TYPEcheck">Validate.check</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Additional operations on maps</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> merge : <code class="type">('k, 'v1, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
('k, 'v2, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
f:(key:'k -&gt;
   [ `Both of 'v1 * 'v2 | `Left of 'v1 | `Right of 'v2 ] -&gt; 'v3 option) -&gt;
('k, 'v3, 'cmp) <a href="Core_map.html#TYPEt">t</a></code></span></pre>
      <div class="info">merges two maps</div>
    
 
      <pre><span><span class="keyword">val</span> symmetric_diff : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
data_equal:('v -&gt; 'v -&gt; bool) -&gt;
('k * [ `Left of 'v | `Right of 'v | `Unequal of 'v * 'v ]) list</code></span></pre>
      <div class="info"><code class="code">symmetric_diff t1 t2 ~data_equal</code> returns a list of changes between <code class="code">t1</code> and <code class="code">t2</code>.
    It is intended to be efficient in the case where <code class="code">t1</code> and <code class="code">t2</code> share a large amount of
    structure.</div>
    
 
      <pre><span><span class="keyword">val</span> min_elt : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; ('k * 'v) option</code></span></pre>
      <div class="info"><code class="code">min_elt map</code> <b>Returns</b> Some <code class="code">(key, data)</code> pair corresponding to the minimum key in
    <code class="code">map</code>, None if empty.</div>
    
 
      <pre><span><span class="keyword">val</span> min_elt_exn : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k * 'v</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> max_elt : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; ('k * 'v) option</code></span></pre>
      <div class="info"><code class="code">max_elt map</code> <b>Returns</b> Some <code class="code">(key, data)</code> pair corresponding to the maximum key in
    <code class="code">map</code>, and None if <code class="code">map</code> is empty.</div>
    
 
      <pre><span><span class="keyword">val</span> max_elt_exn : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k * 'v</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> for_all : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; f:('v -&gt; bool) -&gt; bool</code></span></pre>
      <div class="info">same semantics as similar functions in List</div>
    
 
      <pre><span><span class="keyword">val</span> exists : <code class="type">('k, 'v, 'a) <a href="Core_map.html#TYPEt">t</a> -&gt; f:('v -&gt; bool) -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fold_range_inclusive : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt;
min:'k -&gt; max:'k -&gt; init:'a -&gt; f:(key:'k -&gt; data:'v -&gt; 'a -&gt; 'a) -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">fold_range_inclusive t ~min ~max ~init ~f</code>
    folds f (with initial value ~init) over all keys (and their associated values)
    that are in the range <code class="code">min, max</code> (inclusive).</div>
    
 
      <pre><span><span class="keyword">val</span> range_to_alist : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; min:'k -&gt; max:'k -&gt; ('k * 'v) list</code></span></pre>
      <div class="info"><code class="code">range_to_alist t ~min ~max</code> returns an associative list of the elements whose
    keys lie in <code class="code">min, max</code> (inclusive), with the smallest key being at the head of the
    list.</div>
    
 
      <pre><span><span class="keyword">val</span> prev_key : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; ('k * 'v) option</code></span></pre>
      <div class="info"><code class="code">prev_key t k</code> returns the largest (key, value) pair in t with key less than k</div>
    
 
      <pre><span><span class="keyword">val</span> next_key : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; ('k * 'v) option</code></span></pre>
      <div class="info"><code class="code">next_key t k</code> returns the smallest (key, value) pair in t with key greater than k</div>
    
 
      <pre><span><span class="keyword">val</span> rank : <code class="type">('k, 'v, 'cmp) <a href="Core_map.html#TYPEt">t</a> -&gt; 'k -&gt; int option</code></span></pre>
      <div class="info"><code class="code">rank t k</code> if k is in t, returns the number of keys strictly less than k in t,
    otherwise None</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_map.Poly.html">Poly</a> : <code class="code">sig</code> <a href="Core_map.Poly.html">..</a> <code class="code">end</code> with type <a href="Core_map.Poly.html#TYPEmap">map</a> = ('a, 'b, 'c) <a href="Core_map.html#TYPEt">t</a></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Poly.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Core_map.Key.html">Key</a> = <code class="type"><code class="code"><a href="Core_map_intf.Key.html">Core_map_intf.Key</a></code></code></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Key.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Core_map.Key_binable.html">Key_binable</a> = <code class="type"><code class="code"><a href="Core_map_intf.Key_binable.html">Core_map_intf.Key_binable</a></code></code></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Key_binable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Core_map.S.html">S</a> = <code class="type"><code class="code"><a href="Core_map_intf.S.html">Core_map_intf.S</a></code> with type map = ('a, 'b, 'c) <a href="Core_map.html#TYPEt">t</a> with type tree = ('a, 'b, 'c) <a href="Core_map.Tree.html#TYPEt">Tree.t</a></code></pre>
	<div class="content" style="display:none">
	<div file="Core_map.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Core_map.S_binable.html">S_binable</a> = <code class="type"><code class="code"><a href="Core_map_intf.S_binable.html">Core_map_intf.S_binable</a></code> with type map = ('a, 'b, 'c) <a href="Core_map.html#TYPEt">t</a> with type tree = ('a, 'b, 'c) <a href="Core_map.Tree.html#TYPEt">Tree.t</a></code></pre>
	<div class="content" style="display:none">
	<div file="Core_map.S_binable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_map.Make.html">Make</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">Key</code><code class="code"> : </code><code class="type"><a href="Core_map.Key.html">Key</a></code><code class="code">) -&gt; </code><code class="code"><a href="Core_map.S.html">S</a></code> with type Key.t = Key.t</div></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Make.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_map.Make_using_comparator.html">Make_using_comparator</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">Key</code><code class="code"> : </code><code class="type"><a href="Comparator.S.html">Comparator.S</a></code><code class="code">) -&gt; </code><code class="code"><a href="Core_map.S.html">S</a></code> with type Key.t = Key.t with type Key.comparator = Key.comparator</div></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Make_using_comparator.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_map.Make_binable.html">Make_binable</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">Key</code><code class="code"> : </code><code class="type"><a href="Core_map.Key_binable.html">Key_binable</a></code><code class="code">) -&gt; </code><code class="code"><a href="Core_map.S_binable.html">S_binable</a></code> with type Key.t = Key.t</div></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Make_binable.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Core_map.Make_binable_using_comparator.html">Make_binable_using_comparator</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">Key</code><code class="code"> : </code><code class="type"><a href="Comparator.S_binable.html">Comparator.S_binable</a></code><code class="code">) -&gt; </code><code class="code"><a href="Core_map.S_binable.html">S_binable</a></code> with type Key.t = Key.t with type Key.comparator = Key.comparator</div></pre>
	<div class="content" style="display:none">
	<div file="Core_map.Make_binable_using_comparator.html.contents" class="content_to_load"> </div>
	</div>
  </div>

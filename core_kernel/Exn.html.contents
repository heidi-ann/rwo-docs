<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type">exn</code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="Pretty_printer.S.html">Pretty_printer.S</a></code> with type t = <a href="Exn.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="Pretty_printer.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="EXCEPTIONFinally"><span class="keyword">exception</span> Finally</span> <span class="keyword">of</span> <code class="type"><a href="Exn.html#TYPEt">t</a> * <a href="Exn.html#TYPEt">t</a></code></pre><div class="info">Raised when finalization after an exception failed, too.
    The first exception argument is the one raised by the initial
    function, the second exception the one raised by the finalizer.</div>
<pre><span id="EXCEPTIONReraised"><span class="keyword">exception</span> Reraised</span> <span class="keyword">of</span> <code class="type">string * <a href="Exn.html#TYPEt">t</a></code></pre>
 
      <pre><span><span class="keyword">val</span> reraise : <code class="type"><a href="Exn.html#TYPEt">t</a> -&gt; string -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> reraisef : <code class="type"><a href="Exn.html#TYPEt">t</a> -&gt; ('a, unit, string, unit -&gt; 'b) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Exn.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_string_mach : <code class="type"><a href="Exn.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Exn.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> protectx : <code class="type">f:('a -&gt; 'b) -&gt; 'a -&gt; finally:('a -&gt; unit) -&gt; 'b</code></span></pre>
      <div class="info">Executes <code class="code">f</code> and afterwards executes <code class="code">finally</code>, whether <code class="code">f</code> throws an exception or
    not.</div>
    
 
      <pre><span><span class="keyword">val</span> protect : <code class="type">f:(unit -&gt; 'a) -&gt; finally:(unit -&gt; unit) -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> handle_uncaught : <code class="type">exit:bool -&gt; (unit -&gt; unit) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">handle_uncaught ~exit f</code> catches an exception escaping <code class="code">f</code> and prints an error
    message to stderr.  Exits with return code 1 if <code class="code">exit</code> is <code class="code">true</code>.  Otherwise returns
    unit.</div>
    
 
      <pre><span><span class="keyword">val</span> handle_uncaught_and_exit : <code class="type">(unit -&gt; <a href="Never_returns.html#TYPEnever_returns">Never_returns.never_returns</a>) -&gt; <a href="Never_returns.html#TYPEnever_returns">Never_returns.never_returns</a></code></span></pre>
      <div class="info">behaves as <code class="code">handle_uncaught ~exit:true</code> and also has a more precise
    type in this case</div>
    
 
      <pre><span><span class="keyword">val</span> reraise_uncaught : <code class="type">string -&gt; (unit -&gt; 'a) -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> backtrace : <code class="type">unit -&gt; string</code></span></pre>
      <div class="info"><code class="code">Printexc.get_backtrace</code> </div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Exn.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/>Raised when finalization after an exception failed, too.
    The first exception argument is the one raised by the initial
    function, the second exception the one raised by the finalizer.<br/>
	  
<br/>Executes <code class="code">f</code> and afterwards executes <code class="code">finally</code>, whether <code class="code">f</code> throws an exception or
    not.<br/>
	  
<br/><code class="code">handle_uncaught ~exit f</code> catches an exception escaping <code class="code">f</code> and prints an error
    message to stderr.  Exits with return code 1 if <code class="code">exit</code> is <code class="code">true</code>.  Otherwise returns
    unit.<br/>
	  
<br/>behaves as <code class="code">handle_uncaught ~exit:true</code> and also has a more precise
    type in this case<br/>
	  
<br/><code class="code">Printexc.get_backtrace</code> <br/>
	  

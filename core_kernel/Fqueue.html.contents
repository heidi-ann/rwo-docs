<pre><span id="EXCEPTIONEmpty"><span class="keyword">exception</span> Empty</span></pre>
<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> test_invariants : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info">test via asserts whether invariants hold</div>
    
 
      <pre><span><span class="keyword">val</span> empty : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a></code></span></pre>
      <div class="info">The empty queue</div>
    
 
      <pre><span><span class="keyword">val</span> enqueue : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a -&gt; 'a <a href="Fqueue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">enqueue t x</code> returns a queue with adds <code class="code">x</code> to the end of <code class="code">t</code>. Complexity: O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> enqueue_top : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a -&gt; 'a <a href="Fqueue.html#TYPEt">t</a></code></span></pre>
      <div class="info">enqueue a single element on the *top* of the queue.  Complexity: amortized O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> bot_exn : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      <div class="info">returns the bottom (most-recently enqueued element).  Raises <code class="code">Empty</code> if no element is
    found.  Complexity: O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> bot : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info">like <code class="code">bot_exn</code>, but returns result optionally, without exception.  Complexity: O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> top_exn : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a</code></span></pre>
      <div class="info">Like <code class="code">bot_exn</code>, except returns top (least-recently enqueued element.  Complexity:
    O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> top : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a option</code></span></pre>
      <div class="info">like <code class="code">top_exn</code>, but returns result optionally, without exception, Complexity: O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> dequeue_exn : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a * 'a <a href="Fqueue.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">dequeue_exn t</code> removes and returns the front of <code class="code">t</code>, raising <code class="code">Empty</code> if <code class="code">t</code>
    is empty.  Complexity: amortized O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> dequeue : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; ('a * 'a <a href="Fqueue.html#TYPEt">t</a>) option</code></span></pre>
      <div class="info">Like <code class="code">dequeue_exn</code>, but returns result optionally, without exception.  Complexity:
    amortized O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> discard_exn : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a></code></span></pre>
      <div class="info">Returns version of queue with top element removed.  Complexity: amortized O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> to_list : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a list</code></span></pre>
      <div class="info"><code class="code">to_list t</code> returns a list of the elements in <code class="code">t</code> in order from least-recently-added
    (at the head) to most-recently added (at the tail). Complexity: O(n)</div>
    
 
      <pre><span><span class="keyword">val</span> length : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info">complexity: O(1)</div>
    
 
      <pre><span><span class="keyword">val</span> is_empty : <code class="type">'a <a href="Fqueue.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> compare : <code class="type">('a -&gt; 'a -&gt; int) -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type">(<a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEt">Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Read_ml.html#TYPEreader">Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">'a <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a> -&gt;
(int -&gt; 'a <a href="Fqueue.html#TYPEt">t</a>) <a href="../bin_prot/Unsafe_read_c.html#TYPEreader">Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEreader">Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type">'a <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Size.html#TYPEsizer">Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Write_ml.html#TYPEwriter">Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type">'a <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Unsafe_write_c.html#TYPEwriter">Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type">'a <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a> -&gt; 'a <a href="Fqueue.html#TYPEt">t</a> <a href="../bin_prot/Type_class.html#TYPEwriter">Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/>test via asserts whether invariants hold<br/>
	  
<br/>The empty queue<br/>
	  
<br/><code class="code">enqueue t x</code> returns a queue with adds <code class="code">x</code> to the end of <code class="code">t</code>. Complexity: O(1)<br/>
	  
<br/>enqueue a single element on the *top* of the queue.  Complexity: amortized O(1)<br/>
	  
<br/>returns the bottom (most-recently enqueued element).  Raises <code class="code">Empty</code> if no element is
    found.  Complexity: O(1)<br/>
	  
<br/>like <code class="code">bot_exn</code>, but returns result optionally, without exception.  Complexity: O(1)<br/>
	  
<br/>Like <code class="code">bot_exn</code>, except returns top (least-recently enqueued element.  Complexity:
    O(1)<br/>
	  
<br/>like <code class="code">top_exn</code>, but returns result optionally, without exception, Complexity: O(1)<br/>
	  
<br/><code class="code">dequeue_exn t</code> removes and returns the front of <code class="code">t</code>, raising <code class="code">Empty</code> if <code class="code">t</code>
    is empty.  Complexity: amortized O(1)<br/>
	  
<br/>Like <code class="code">dequeue_exn</code>, but returns result optionally, without exception.  Complexity:
    amortized O(1)<br/>
	  
<br/>Returns version of queue with top element removed.  Complexity: amortized O(1)<br/>
	  
<br/><code class="code">to_list t</code> returns a list of the elements in <code class="code">t</code> in order from least-recently-added
    (at the head) to most-recently added (at the tail). Complexity: O(n)<br/>
	  
<br/>complexity: O(1)<br/>
	  
<br/>complexity: O(1)<br/>
	  

<pre><code><span id="TYPEshape"><span class="keyword">type</span> shape </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTshape.Function"><span class="constructor">Function</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTshape.Lazy"><span class="constructor">Lazy</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTshape.Class"><span class="constructor">Class</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTshape.Module"><span class="constructor">Module</span></span> <span class="keyword">of</span> <code class="type"><a href="CamlinternalMod.html#TYPEshape">shape</a> array</code></code></td>
	   </tr></table>
      
    
 
      <pre><span><span class="keyword">val</span> init_mod : <code class="type">string * int * int -&gt; <a href="CamlinternalMod.html#TYPEshape">shape</a> -&gt; <a href="Obj.html#TYPEt">Obj.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> update_mod : <code class="type"><a href="CamlinternalMod.html#TYPEshape">shape</a> -&gt; <a href="Obj.html#TYPEt">Obj.t</a> -&gt; <a href="Obj.html#TYPEt">Obj.t</a> -&gt; unit</code></span></pre>
      
    

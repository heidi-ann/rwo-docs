<br/><br/><h6 id="6_TITLE">Introduction</h6><br/> <br/>
	  
<br/><br/><div class="h7">Functional input with format strings</div><br/> <br/>
	  
<br/>The module <code class="code">Scanf</code> provides formatted input functions or <em>scanners</em>.<br/>    The formatted input functions can read from any kind of input, including
    strings, files, or anything that can return characters. The more general
    source of characters is named a <em>formatted input channel</em> (or <em>    scanning buffer</em>) and has type TODO reference : Scanning.in_channel. The more general
    formatted input function reads from any scanning buffer and is named
    <code class="code">bscanf</code>.<br/>    Generally speaking, the formatted input functions have 3 arguments:<ul><li>the first argument is a source of characters for the input,</li><li>the second argument is a format string that specifies the values to
      read,</li><li>the third argument is a <em>receiver function</em> that is applied to the
      values read.</li></ul>    Hence, a typical call to the formatted input function TODO reference : Scanf.bscanf is
    <code class="code">bscanf ic fmt f</code>, where:<br/>    - <code class="code">ic</code> is a source of characters (typically a <em>    formatted input channel</em> with type TODO reference : Scanning.in_channel),<br/>    - <code class="code">fmt</code> is a format string (the same format strings as those used to print
    material with module TODO reference : Printf or TODO reference : Format),<br/>    - <code class="code">f</code> is a function that has as many arguments as the number of values to
    read in the input.<br/>
	  
<br/><br/><div class="h7">A simple example</div><br/> <br/>
	  
<br/>As suggested above, the expression <code class="code">bscanf ic &quot;%d&quot; f</code> reads a decimal
    integer <code class="code">n</code> from the source of characters <code class="code">ic</code> and returns <code class="code">f n</code>.<br/>    For instance,<br/>    - if we use <code class="code">stdin</code> as the source of characters (TODO reference : Scanning.stdin is
    the predefined formatted input channel that reads from standard input),<br/>    - if we define the receiver <code class="code">f</code> as <code class="code">let f x = x + 1</code>,<br/>    then <code class="code">bscanf Scanning.stdin &quot;%d&quot; f</code> reads an integer <code class="code">n</code> from the
    standard input and returns <code class="code">f n</code> (that is <code class="code">n + 1</code>). Thus, if we
    evaluate <code class="code">bscanf stdin &quot;%d&quot; f</code>, and then enter <code class="code">41</code> at the
    keyboard, we get <code class="code">42</code> as the final result.<br/>
	  
<br/><br/><div class="h7">Formatted input as a functional feature</div><br/> <br/>
	  
<br/>The OCaml scanning facility is reminiscent of the corresponding C feature.
    However, it is also largely different, simpler, and yet more powerful:
    the formatted input functions are higher-order functionals and the
    parameter passing mechanism is just the regular function application not
    the variable assignment based mechanism which is typical for formatted
    input in imperative languages; the OCaml format strings also feature
    useful additions to easily define complex tokens; as expected within a
    functional programming language, the formatted input functions also
    support polymorphism, in particular arbitrary interaction with
    polymorphic user-defined scanners.  Furthermore, the OCaml formatted input
    facility is fully type-checked at compile time.<br/>
	  
<br/><br/><h6 id="6_TITLE">Formatted input channel</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Scanf.Scanning.html">Scanning</a> : <code class="code">sig</code> <a href="Scanf.Scanning.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Scanf.Scanning.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><br/><h6 id="6_TITLE">Type of formatted input functions</h6><br/> <br/>
	  
<pre><span id="TYPEscanner"><span class="keyword">type</span> <code class="type">('a, 'b, 'c, 'd) </code>scanner </span>= <code class="type">('a, <a href="Scanf.Scanning.html#TYPEin_channel">Scanning.in_channel</a>, 'b, 'c, 'a -&gt; 'd, 'd) format6 -&gt; 'c</code> </pre>
      
    
<pre><span id="EXCEPTIONScan_failure"><span class="keyword">exception</span> Scan_failure</span> <span class="keyword">of</span> <code class="type">string</code></pre>
<br/><br/><h6 id="6_TITLE">The general formatted input function</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> bscanf : <code class="type"><a href="Scanf.Scanning.html#TYPEin_channel">Scanning.in_channel</a> -&gt; ('a, 'b, 'c, 'd) <a href="Scanf.html#TYPEscanner">scanner</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Format string description</h6><br/> <br/>
	  
<br/>The format is a character string which contains three types of
    objects:<ul><li>plain characters, which are simply matched with the characters of the
      input (with a special case for space and line feed, see TODO reference : Scanf.space),</li><li>conversion specifications, each of which causes reading and conversion of
      one argument for the function <code class="code">f</code> (see TODO reference : Scanf.conversion),</li><li>scanning indications to specify boundaries of tokens
      (see scanning TODO reference : Scanf.indication). </li></ul><br/>
	  
<br/><br/><div class="h7">The space character in format strings</div><br/> <br/>
	  
<br/>As mentioned above, a plain character in the format string is just
    matched with the next character of the input; however, two characters are
    special exceptions to this rule: the space character (<code class="code">' '</code> or ASCII code
    32) and the line feed character (<code class="code">'\n'</code> or ASCII code 10).
    A space does not match a single space character, but any amount of
    ``whitespace'' in the input. More precisely, a space inside the format
    string matches <em>any number</em> of tab, space, line feed and carriage
    return characters. Similarly, a line feed character in the format string
    matches either a single line feed or a carriage return followed by a line
    feed.<br/>    Matching <em>any</em> amount of whitespace, a space in the format string
    also matches no amount of whitespace at all; hence, the call <code class="code">bscanf ib
    &quot;Price = %d $&quot; (fun p -&gt; p)</code> succeeds and returns <code class="code">1</code> when reading an
    input with various whitespace in it, such as <code class="code">Price = 1 $</code>,
    <code class="code">Price  =  1    $</code>, or even <code class="code">Price=1$</code>.<br/>
	  
<br/><br/><div class="h7">Conversion specifications in format strings</div><br/> <br/>
	  
<br/>Conversion specifications consist in the <code class="code">%</code> character, followed by
    an optional flag, an optional field width, and followed by one or
    two conversion characters. The conversion characters and their
    meanings are:<br/>    - <code class="code">d</code>: reads an optionally signed decimal integer.<ul><li><code class="code">i</code>: reads an optionally signed integer
      (usual input conventions for decimal (<code class="code">0-9</code>+), hexadecimal
       (<code class="code">0x[0-9a-f]+</code> and <code class="code">0X[0-9A-F]+</code>), octal (<code class="code">0o[0-7]+</code>), and binary
       (<code class="code">0b[0-1]+</code>) notations are understood).</li><li><code class="code">u</code>: reads an unsigned decimal integer.</li><li><code class="code">x</code> or <code class="code">X</code>: reads an unsigned hexadecimal integer (<code class="code">[0-9a-fA-F]+</code>).</li><li><code class="code">o</code>: reads an unsigned octal integer (<code class="code">[0-7]+</code>).</li><li><code class="code">s</code>: reads a string argument that spreads as much as possible, until the
      following bounding condition holds: <ul><li>the end-of-input has been reached.</li><li>a scanning indication (see scanning TODO reference : Scanf.indication) has been
         encountered,</li><li>a whitespace has been found (see TODO reference : Scanf.space),</li></ul>
      Hence, this conversion always succeeds: it returns an empty
      string if the bounding condition holds when the scan begins.</li><li><code class="code">S</code>: reads a delimited string argument (delimiters and special
      escaped characters follow the lexical conventions of OCaml).</li><li><code class="code">c</code>: reads a single character. To test the current input character
      without reading it, specify a null field width, i.e. use
      specification <code class="code">%0c</code>. Raise <code class="code">Invalid_argument</code>, if the field width
      specification is greater than 1.</li><li><code class="code">C</code>: reads a single delimited character (delimiters and special
      escaped characters follow the lexical conventions of OCaml).</li><li><code class="code">f</code>, <code class="code">e</code>, <code class="code">E</code>, <code class="code">g</code>, <code class="code">G</code>: reads an optionally signed
      floating-point number in decimal notation, in the style <code class="code">dddd.ddd
      e/E+-dd</code>.</li><li><code class="code">F</code>: reads a floating point number according to the lexical
      conventions of OCaml (hence the decimal point is mandatory if the
      exponent part is not mentioned).</li><li><code class="code">B</code>: reads a boolean argument (<code class="code">true</code> or <code class="code">false</code>).</li><li><code class="code">b</code>: reads a boolean argument (for backward compatibility; do not use
      in new programs).</li><li><code class="code">ld</code>, <code class="code">li</code>, <code class="code">lu</code>, <code class="code">lx</code>, <code class="code">lX</code>, <code class="code">lo</code>: reads an <code class="code">int32</code> argument to
      the format specified by the second letter for regular integers.</li><li><code class="code">nd</code>, <code class="code">ni</code>, <code class="code">nu</code>, <code class="code">nx</code>, <code class="code">nX</code>, <code class="code">no</code>: reads a <code class="code">nativeint</code> argument to
      the format specified by the second letter for regular integers.</li><li><code class="code">Ld</code>, <code class="code">Li</code>, <code class="code">Lu</code>, <code class="code">Lx</code>, <code class="code">LX</code>, <code class="code">Lo</code>: reads an <code class="code">int64</code> argument to
      the format specified by the second letter for regular integers.</li><li><code class="code">[ range ]</code>: reads characters that matches one of the characters
      mentioned in the range of characters <code class="code">range</code> (or not mentioned in
      it, if the range starts with <code class="code">^</code>). Reads a <code class="code">string</code> that can be
      empty, if the next input character does not match the range. The set of
      characters from <code class="code">c1</code> to <code class="code">c2</code> (inclusively) is denoted by <code class="code">c1-c2</code>.
      Hence, <code class="code">%[0-9]</code> returns a string representing a decimal number
      or an empty string if no decimal digit is found; similarly,
      <code class="code">%[\\048-\\057\\065-\\070]</code> returns a string of hexadecimal digits.
      If a closing bracket appears in a range, it must occur as the
      first character of the range (or just after the <code class="code">^</code> in case of
      range negation); hence <code class="code">[]]</code> matches a <code class="code">]</code> character and
      <code class="code">[^]]</code> matches any character that is not <code class="code">]</code>.
      Use <code class="code">%%</code> and <code class="code">%@</code> to include a <code class="code">%</code> or a <code class="code">@</code> in a range.</li><li><code class="code">r</code>: user-defined reader. Takes the next <code class="code">ri</code> formatted input
      function and applies it to the scanning buffer <code class="code">ib</code> to read the
      next argument. The input function <code class="code">ri</code> must therefore have type
      <code class="code">Scanning.in_channel -&gt; 'a</code> and the argument read has type <code class="code">'a</code>.</li><li><code class="code">{ fmt %}</code>: reads a format string argument.  The format string
      read must have the same type as the format string specification
      <code class="code">fmt</code>.  For instance, <code class="code">&quot;%{ %i %}&quot;</code> reads any format string that
      can read a value of type <code class="code">int</code>; hence, if <code class="code">s</code> is the string
      <code class="code">&quot;fmt:\&quot;number is %u\&quot;&quot;</code>, then <code class="code">Scanf.sscanf s &quot;fmt: %{%i%}&quot;</code>
      succeeds and returns the format string <code class="code">&quot;number is %u&quot;</code>.</li><li><code class="code">\( fmt %\)</code>: scanning format substitution.
      Reads a format string and then goes on scanning with the format string
      read, instead of using <code class="code">fmt</code>.
      The format string read must have the same type as the format string
      specification <code class="code">fmt</code> that it replaces.
      For instance, <code class="code">&quot;%( %i %)&quot;</code> reads any format string that can read a value
      of type <code class="code">int</code>.
      Returns the format string read, and the value read using the format
      string read.
      Hence, if <code class="code">s</code> is the string <code class="code">&quot;\&quot;%4d\&quot;1234.00&quot;</code>, then
      <code class="code">Scanf.sscanf s &quot;%(%i%)&quot; (fun fmt i -&gt; fmt, i)</code> evaluates to
      <code class="code">(&quot;%4d&quot;, 1234)</code>.
      If the special flag <code class="code">_</code> is used, the conversion discards the
      format string read and only returns the value read with the format
      string read.
      Hence, if <code class="code">s</code> is the string <code class="code">&quot;\&quot;%4d\&quot;1234.00&quot;</code>, then
      <code class="code">Scanf.sscanf s &quot;%_(%i%)&quot;</code> is simply equivalent to
      <code class="code">Scanf.sscanf &quot;1234.00&quot; &quot;%4d&quot;</code>.</li><li><code class="code">l</code>: returns the number of lines read so far.</li><li><code class="code">n</code>: returns the number of characters read so far.</li><li><code class="code">N</code> or <code class="code">L</code>: returns the number of tokens read so far.</li><li><code class="code">!</code>: matches the end of input condition.</li><li><code class="code">%</code>: matches one <code class="code">%</code> character in the input.</li><li><code class="code">@</code>: matches one <code class="code">@</code> character in the input.</li><li><code class="code">,</code>: does nothing.</li></ul>    Following the <code class="code">%</code> character that introduces a conversion, there may be
    the special flag <code class="code">_</code>: the conversion that follows occurs as usual,
    but the resulting value is discarded.
    For instance, if <code class="code">f</code> is the function <code class="code">fun i -&gt; i + 1</code>, and <code class="code">s</code> is the
    string <code class="code">&quot;x = 1&quot;</code>, then <code class="code">Scanf.sscanf s &quot;%_s = %i&quot; f</code> returns <code class="code">2</code>.<br/>    The field width is composed of an optional integer literal
    indicating the maximal width of the token to read.
    For instance, <code class="code">%6d</code> reads an integer, having at most 6 decimal digits;
    <code class="code">%4f</code> reads a float with at most 4 characters; and <code class="code">%8[\\000-\\255]</code>
    returns the next 8 characters (or all the characters still available,
    if fewer than 8 characters are available in the input).<br/>    Notes:<br/>    - as mentioned above, a <code class="code">%s</code> conversion always succeeds, even if there is
      nothing to read in the input: in this case, it simply returns <code class="code">&quot;&quot;</code>.<br/>    - in addition to the relevant digits, <code class="code">'_'</code> characters may appear
    inside numbers (this is reminiscent to the usual OCaml lexical
    conventions). If stricter scanning is desired, use the range
    conversion facility instead of the number conversions.<br/>    - the <code class="code">scanf</code> facility is not intended for heavy duty lexical
    analysis and parsing. If it appears not expressive enough for your
    needs, several alternative exists: regular expressions (module
    <code class="code">Str</code>), stream parsers, <code class="code">ocamllex</code>-generated lexers,
    <code class="code">ocamlyacc</code>-generated parsers.<br/>
	  
<br/><br/><div class="h7">Scanning indications in format strings</div><br/> <br/>
	  
<br/>Scanning indications appear just after the string conversions <code class="code">%s</code>
    and <code class="code">%[ range ]</code> to delimit the end of the token. A scanning
    indication is introduced by a <code class="code">@</code> character, followed by some
    plain character <code class="code">c</code>. It means that the string token should end
    just before the next matching <code class="code">c</code> (which is skipped). If no <code class="code">c</code>
    character is encountered, the string token spreads as much as
    possible. For instance, <code class="code">&quot;%s@\t&quot;</code> reads a string up to the next
    tab character or to the end of input. If a <code class="code">@</code> character appears
    anywhere else in the format string, it is treated as a plain character.<br/>    Note:<br/>    - As usual in format strings, <code class="code">%</code> characters must be escaped using <code class="code">%%</code>
      and <code class="code">%@</code> is equivalent to <code class="code">@</code>; this rule still holds within range
      specifications and scanning indications.
      For instance, <code class="code">&quot;%s@%%&quot;</code> reads a string up to the next <code class="code">%</code> character.<ul><li>The scanning indications introduce slight differences in the syntax of
    <code class="code">Scanf</code> format strings, compared to those used for the <code class="code">Printf</code>
    module. However, the scanning indications are similar to those used in
    the <code class="code">Format</code> module; hence, when producing formatted text to be scanned
    by <code class="code">!Scanf.bscanf</code>, it is wise to use printing functions from the
    <code class="code">Format</code> module (or, if you need to use functions from <code class="code">Printf</code>, banish
    or carefully double check the format strings that contain <code class="code">'@'</code>
    characters). </li></ul><br/>
	  
<br/><br/><div class="h7">Exceptions during scanning</div><br/> <br/>
	  
<br/>Scanners may raise the following exceptions when the input cannot be read
    according to the format string:<br/>    - Raise <code class="code">Scanf.Scan_failure</code> if the input does not match the format.<br/>    - Raise <code class="code">Failure</code> if a conversion to a number is not possible.<br/>    - Raise <code class="code">End_of_file</code> if the end of input is encountered while some more
      characters are needed to read the current conversion specification.<br/>    - Raise <code class="code">Invalid_argument</code> if the format string is invalid.<br/>    Note:<br/>    - as a consequence, scanning a <code class="code">%s</code> conversion never raises exception
    <code class="code">End_of_file</code>: if the end of input is reached the conversion succeeds and
    simply returns the characters read so far, or <code class="code">&quot;&quot;</code> if none were ever read.<br/>
	  
<br/><br/><h6 id="6_TITLE">Specialised formatted input functions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> fscanf : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; ('a, 'b, 'c, 'd) <a href="Scanf.html#TYPEscanner">scanner</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sscanf : <code class="type">string -&gt; ('a, 'b, 'c, 'd) <a href="Scanf.html#TYPEscanner">scanner</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> scanf : <code class="type">('a, 'b, 'c, 'd) <a href="Scanf.html#TYPEscanner">scanner</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> kscanf : <code class="type"><a href="Scanf.Scanning.html#TYPEin_channel">Scanning.in_channel</a> -&gt;
(<a href="Scanf.Scanning.html#TYPEin_channel">Scanning.in_channel</a> -&gt; exn -&gt; 'd) -&gt; ('a, 'b, 'c, 'd) <a href="Scanf.html#TYPEscanner">scanner</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Reading format strings from input</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> bscanf_format : <code class="type"><a href="Scanf.Scanning.html#TYPEin_channel">Scanning.in_channel</a> -&gt;
('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt;
(('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt; 'g) -&gt; 'g</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sscanf_format : <code class="type">string -&gt;
('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt;
(('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt; 'g) -&gt; 'g</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> format_from_string : <code class="type">string -&gt;
('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt; ('a, 'b, 'c, 'd, 'e, 'f) format6</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unescaped : <code class="type">string -&gt; string</code></span></pre>
      
    

<br/><br/><h6 id="6_TITLE">Exceptions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> raise : <code class="type">exn -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> invalid_arg : <code class="type">string -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> failwith : <code class="type">string -&gt; 'a</code></span></pre>
      
    
<pre><span id="EXCEPTIONExit"><span class="keyword">exception</span> Exit</span></pre>
<br/><br/><h6 id="6_TITLE">Comparisons</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> = : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &lt;&gt; : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &lt; : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &gt; : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &lt;= : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &gt;= : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> compare : <code class="type">'a -&gt; 'a -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> min : <code class="type">'a -&gt; 'a -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> max : <code class="type">'a -&gt; 'a -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> == : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> != : <code class="type">'a -&gt; 'a -&gt; bool</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Boolean operations</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> not : <code class="type">bool -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &amp;&amp; : <code class="type">bool -&gt; bool -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> &amp; : <code class="type">bool -&gt; bool -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> || : <code class="type">bool -&gt; bool -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> or : <code class="type">bool -&gt; bool -&gt; bool</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Integer arithmetic</h6><br/> <br/>
	  
<br/>Integers are 31 bits wide (or 63 bits on 64-bit processors).
   All operations are taken modulo 2<sup class="superscript">31</sup> (or 2<sup class="superscript">63</sup>).
   They do not fail on overflow.<br/>
	  
 
      <pre><span><span class="keyword">val</span> ~- : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ~+ : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> succ : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pred : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> + : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> - : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> * : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> / : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mod : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> abs : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> max_int : <code class="type">int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> min_int : <code class="type">int</code></span></pre>
      
    
<br/><br/><div class="h7">Bitwise operations</div><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> land : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lor : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lxor : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lnot : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lsl : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lsr : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> asr : <code class="type">int -&gt; int -&gt; int</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Floating-point arithmetic</h6><br/><br/>   OCaml's floating-point numbers follow the
   IEEE 754 standard, using double precision (64 bits) numbers.
   Floating-point operations never raise an exception on overflow,
   underflow, division by zero, etc.  Instead, special IEEE numbers
   are returned as appropriate, such as <code class="code">infinity</code> for <code class="code">1.0 /. 0.0</code>,
   <code class="code">neg_infinity</code> for <code class="code">-1.0 /. 0.0</code>, and <code class="code">nan</code> (``not a number'')
   for <code class="code">0.0 /. 0.0</code>.  These special numbers then propagate through
   floating-point computations as expected: for instance,
   <code class="code">1.0 /. infinity</code> is <code class="code">0.0</code>, and any arithmetic operation with <code class="code">nan</code>
   as argument returns <code class="code">nan</code> as result.<br/>
	  
 
      <pre><span><span class="keyword">val</span> ~-. : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ~+. : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> +. : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> -. : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> *. : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> /. : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ** : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sqrt : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> exp : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> log : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> log10 : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> expm1 : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> log1p : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> cos : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sin : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> tan : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> acos : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> asin : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> atan : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> atan2 : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> hypot : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> cosh : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sinh : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> tanh : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ceil : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> floor : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> abs_float : <code class="type">float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> copysign : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mod_float : <code class="type">float -&gt; float -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> frexp : <code class="type">float -&gt; float * int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ldexp : <code class="type">float -&gt; int -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> modf : <code class="type">float -&gt; float * float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float : <code class="type">int -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float_of_int : <code class="type">int -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> truncate : <code class="type">float -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int_of_float : <code class="type">float -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> infinity : <code class="type">float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> neg_infinity : <code class="type">float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> nan : <code class="type">float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> max_float : <code class="type">float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> min_float : <code class="type">float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> epsilon_float : <code class="type">float</code></span></pre>
      
    
<pre><code><span id="TYPEfpclass"><span class="keyword">type</span> fpclass </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTfpclass.FP_normal"><span class="constructor">FP_normal</span></span></code></td><td class="typefieldcomment" align="left">Normal number, none of the below</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTfpclass.FP_subnormal"><span class="constructor">FP_subnormal</span></span></code></td><td class="typefieldcomment" align="left">Number very close to 0.0, has reduced precision</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTfpclass.FP_zero"><span class="constructor">FP_zero</span></span></code></td><td class="typefieldcomment" align="left">Number is 0.0 or -0.0</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTfpclass.FP_infinite"><span class="constructor">FP_infinite</span></span></code></td><td class="typefieldcomment" align="left">Number is positive or negative infinity</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTfpclass.FP_nan"><span class="constructor">FP_nan</span></span></code></td><td class="typefieldcomment" align="left">Not a number: result of an undefined operation</td>
	   </tr></table>
      
    
 
      <pre><span><span class="keyword">val</span> classify_float : <code class="type">float -&gt; <a href="Pervasives.html#TYPEfpclass">fpclass</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">String operations</h6><br/><br/>   More string operations are provided in module TODO reference : String.<br/>
	  
 
      <pre><span><span class="keyword">val</span> ^ : <code class="type">string -&gt; string -&gt; string</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Character operations</h6><br/><br/>   More character operations are provided in module TODO reference : Char.<br/>
	  
 
      <pre><span><span class="keyword">val</span> int_of_char : <code class="type">char -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> char_of_int : <code class="type">int -&gt; char</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Unit operations</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> ignore : <code class="type">'a -&gt; unit</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">String conversion functions</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> string_of_bool : <code class="type">bool -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bool_of_string : <code class="type">string -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> string_of_int : <code class="type">int -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int_of_string : <code class="type">string -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> string_of_float : <code class="type">float -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float_of_string : <code class="type">string -&gt; float</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Pair operations</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> fst : <code class="type">'a * 'b -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> snd : <code class="type">'a * 'b -&gt; 'b</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">List operations</h6><br/><br/>   More list operations are provided in module TODO reference : List.<br/>
	  
 
      <pre><span><span class="keyword">val</span> @ : <code class="type">'a list -&gt; 'a list -&gt; 'a list</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Input/output</h6><br/>
    Note: all input/output functions can raise <code class="code">Sys_error</code> when the system
    calls they invoke fail.<br/>
	  
<pre><span id="TYPEin_channel"><span class="keyword">type</span> in_channel </span></pre>
      
    
<pre><span id="TYPEout_channel"><span class="keyword">type</span> out_channel </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> stdin : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> stdout : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> stderr : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a></code></span></pre>
      
    
<br/><br/><div class="h7">Output functions on standard output</div><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> print_char : <code class="type">char -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> print_string : <code class="type">string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> print_int : <code class="type">int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> print_float : <code class="type">float -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> print_endline : <code class="type">string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> print_newline : <code class="type">unit -&gt; unit</code></span></pre>
      
    
<br/><br/><div class="h7">Output functions on standard error</div><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> prerr_char : <code class="type">char -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> prerr_string : <code class="type">string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> prerr_int : <code class="type">int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> prerr_float : <code class="type">float -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> prerr_endline : <code class="type">string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> prerr_newline : <code class="type">unit -&gt; unit</code></span></pre>
      
    
<br/><br/><div class="h7">Input functions on standard input</div><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> read_line : <code class="type">unit -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> read_int : <code class="type">unit -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> read_float : <code class="type">unit -&gt; float</code></span></pre>
      
    
<br/><br/><div class="h7">General output functions</div><br/> <br/>
	  
<pre><code><span id="TYPEopen_flag"><span class="keyword">type</span> open_flag </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_rdonly"><span class="constructor">Open_rdonly</span></span></code></td><td class="typefieldcomment" align="left">open for reading.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_wronly"><span class="constructor">Open_wronly</span></span></code></td><td class="typefieldcomment" align="left">open for writing.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_append"><span class="constructor">Open_append</span></span></code></td><td class="typefieldcomment" align="left">open for appending: always write at end of file.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_creat"><span class="constructor">Open_creat</span></span></code></td><td class="typefieldcomment" align="left">create the file if it does not exist.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_trunc"><span class="constructor">Open_trunc</span></span></code></td><td class="typefieldcomment" align="left">empty the file if it already exists.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_excl"><span class="constructor">Open_excl</span></span></code></td><td class="typefieldcomment" align="left">fail if Open_creat and the file already exists.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_binary"><span class="constructor">Open_binary</span></span></code></td><td class="typefieldcomment" align="left">open in binary mode (no conversion).</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_text"><span class="constructor">Open_text</span></span></code></td><td class="typefieldcomment" align="left">open in text mode (may perform conversions).</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTopen_flag.Open_nonblock"><span class="constructor">Open_nonblock</span></span></code></td><td class="typefieldcomment" align="left">open in non-blocking mode.</td>
	   </tr></table>
      
    
 
      <pre><span><span class="keyword">val</span> open_out : <code class="type">string -&gt; <a href="Pervasives.html#TYPEout_channel">out_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> open_out_bin : <code class="type">string -&gt; <a href="Pervasives.html#TYPEout_channel">out_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> open_out_gen : <code class="type"><a href="Pervasives.html#TYPEopen_flag">open_flag</a> list -&gt; int -&gt; string -&gt; <a href="Pervasives.html#TYPEout_channel">out_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> flush : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> flush_all : <code class="type">unit -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_char : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; char -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_string : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; string -&gt; int -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_byte : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_binary_int : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> output_value : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> seek_out : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pos_out : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> out_channel_length : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close_out : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close_out_noerr : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set_binary_mode_out : <code class="type"><a href="Pervasives.html#TYPEout_channel">out_channel</a> -&gt; bool -&gt; unit</code></span></pre>
      
    
<br/><br/><div class="h7">General input functions</div><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> open_in : <code class="type">string -&gt; <a href="Pervasives.html#TYPEin_channel">in_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> open_in_bin : <code class="type">string -&gt; <a href="Pervasives.html#TYPEin_channel">in_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> open_in_gen : <code class="type"><a href="Pervasives.html#TYPEopen_flag">open_flag</a> list -&gt; int -&gt; string -&gt; <a href="Pervasives.html#TYPEin_channel">in_channel</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_char : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; char</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_line : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; string -&gt; int -&gt; int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> really_input : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; string -&gt; int -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_byte : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_binary_int : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> input_value : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> seek_in : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pos_in : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> in_channel_length : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close_in : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close_in_noerr : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set_binary_mode_in : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; bool -&gt; unit</code></span></pre>
      
    
<br/><br/><div class="h7">Operations on large files</div><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Pervasives.LargeFile.html">LargeFile</a> : <code class="code">sig</code> <a href="Pervasives.LargeFile.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Pervasives.LargeFile.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><br/><h6 id="6_TITLE">References</h6><br/> <br/>
	  
<pre><code><span id="TYPEref"><span class="keyword">type</span> <code class="type">'a </code>ref </span>= {</code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code><span class="keyword">mutable</span> <span id="TYPEELTref.contents">contents</span> :<code class="type">'a</code>;</code></td>
	  </tr></table>}
      
    
 
      <pre><span><span class="keyword">val</span> ref : <code class="type">'a -&gt; 'a <a href="Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ! : <code class="type">'a <a href="Pervasives.html#TYPEref">ref</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> := : <code class="type">'a <a href="Pervasives.html#TYPEref">ref</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> incr : <code class="type">int <a href="Pervasives.html#TYPEref">ref</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> decr : <code class="type">int <a href="Pervasives.html#TYPEref">ref</a> -&gt; unit</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Operations on format strings</h6><br/> <br/>
	  
<br/>Format strings are used to read and print data using formatted input
    functions in module TODO reference : Scanf and formatted output in modules TODO reference : Printf and
    TODO reference : Format.<br/>
	  
<pre><span id="TYPEformat4"><span class="keyword">type</span> <code class="type">('a, 'b, 'c, 'd) </code>format4 </span>= <code class="type">('a, 'b, 'c, 'c, 'c, 'd) format6</code> </pre>
      <div class="info">Format strings have a general and highly polymorphic type
    <code class="code">('a, 'b, 'c, 'd, 'e, 'f) format6</code>. Type <code class="code">format6</code> is built in.
    The two simplified types, <code class="code">format</code> and <code class="code">format4</code> below are
    included for backward compatibility with earlier releases of OCaml.
    <code class="code">'a</code> is the type of the parameters of the format,
    <code class="code">'b</code> is the type of the first argument given to
         <code class="code">%a</code> and <code class="code">%t</code> printing functions,
    <code class="code">'c</code> is the type of the result of the <code class="code">%a</code> and <code class="code">%t</code> functions, and
         also the type of the argument transmitted to the first argument
         of <code class="code">kprintf</code>-style functions,
    <code class="code">'d</code> is the result type for the <code class="code">scanf</code>-style functions,
    <code class="code">'e</code> is the type of the receiver function for the <code class="code">scanf</code>-style functions,
    <code class="code">'f</code> is the result type for the <code class="code">printf</code>-style function.</div>
    
<pre><span id="TYPEformat"><span class="keyword">type</span> <code class="type">('a, 'b, 'c) </code>format </span>= <code class="type">('a, 'b, 'c, 'c) <a href="Pervasives.html#TYPEformat4">format4</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> string_of_format : <code class="type">('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> format_of_string : <code class="type">('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt; ('a, 'b, 'c, 'd, 'e, 'f) format6</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ^^ : <code class="type">('a, 'b, 'c, 'd, 'e, 'f) format6 -&gt;
('f, 'b, 'c, 'e, 'g, 'h) format6 -&gt; ('a, 'b, 'c, 'd, 'g, 'h) format6</code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Program termination</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> exit : <code class="type">int -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> at_exit : <code class="type">(unit -&gt; unit) -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> valid_float_lexem : <code class="type">string -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unsafe_really_input : <code class="type"><a href="Pervasives.html#TYPEin_channel">in_channel</a> -&gt; string -&gt; int -&gt; int -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> do_at_exit : <code class="type">unit -&gt; unit</code></span></pre>
      
    

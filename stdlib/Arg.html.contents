<pre><code><span id="TYPEspec"><span class="keyword">type</span> spec </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Unit"><span class="constructor">Unit</span></span> <span class="keyword">of</span> <code class="type">unit -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Call the function with unit argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Bool"><span class="constructor">Bool</span></span> <span class="keyword">of</span> <code class="type">bool -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Call the function with a bool argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Set"><span class="constructor">Set</span></span> <span class="keyword">of</span> <code class="type">bool <a href="Pervasives.html#TYPEref">ref</a></code></code></td><td class="typefieldcomment" align="left">Set the reference to true</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Clear"><span class="constructor">Clear</span></span> <span class="keyword">of</span> <code class="type">bool <a href="Pervasives.html#TYPEref">ref</a></code></code></td><td class="typefieldcomment" align="left">Set the reference to false</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.String"><span class="constructor">String</span></span> <span class="keyword">of</span> <code class="type">string -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Call the function with a string argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Set_string"><span class="constructor">Set_string</span></span> <span class="keyword">of</span> <code class="type">string <a href="Pervasives.html#TYPEref">ref</a></code></code></td><td class="typefieldcomment" align="left">Set the reference to the string argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Int"><span class="constructor">Int</span></span> <span class="keyword">of</span> <code class="type">int -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Call the function with an int argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Set_int"><span class="constructor">Set_int</span></span> <span class="keyword">of</span> <code class="type">int <a href="Pervasives.html#TYPEref">ref</a></code></code></td><td class="typefieldcomment" align="left">Set the reference to the int argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Float"><span class="constructor">Float</span></span> <span class="keyword">of</span> <code class="type">float -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Call the function with a float argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Set_float"><span class="constructor">Set_float</span></span> <span class="keyword">of</span> <code class="type">float <a href="Pervasives.html#TYPEref">ref</a></code></code></td><td class="typefieldcomment" align="left">Set the reference to the float argument</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Tuple"><span class="constructor">Tuple</span></span> <span class="keyword">of</span> <code class="type"><a href="Arg.html#TYPEspec">spec</a> list</code></code></td><td class="typefieldcomment" align="left">Take several arguments according to the
                                   spec list</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Symbol"><span class="constructor">Symbol</span></span> <span class="keyword">of</span> <code class="type">string list * string -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Take one of the symbols as argument and
                                   call the function with the symbol</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTspec.Rest"><span class="constructor">Rest</span></span> <span class="keyword">of</span> <code class="type">string -&gt; unit</code></code></td><td class="typefieldcomment" align="left">Stop interpreting keywords and call the
                                   function with each remaining argument</td>
	   </tr></table>
      
    
<pre><span id="TYPEkey"><span class="keyword">type</span> key </span>= <code class="type">string</code> </pre>
      
    
<pre><span id="TYPEdoc"><span class="keyword">type</span> doc </span>= <code class="type">string</code> </pre>
      
    
<pre><span id="TYPEusage_msg"><span class="keyword">type</span> usage_msg </span>= <code class="type">string</code> </pre>
      
    
<pre><span id="TYPEanon_fun"><span class="keyword">type</span> anon_fun </span>= <code class="type">string -&gt; unit</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> parse : <code class="type">(<a href="Arg.html#TYPEkey">key</a> * <a href="Arg.html#TYPEspec">spec</a> * <a href="Arg.html#TYPEdoc">doc</a>) list -&gt; <a href="Arg.html#TYPEanon_fun">anon_fun</a> -&gt; <a href="Arg.html#TYPEusage_msg">usage_msg</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> parse_argv : <code class="type">?current:int <a href="Pervasives.html#TYPEref">ref</a> -&gt;
string array -&gt; (<a href="Arg.html#TYPEkey">key</a> * <a href="Arg.html#TYPEspec">spec</a> * <a href="Arg.html#TYPEdoc">doc</a>) list -&gt; <a href="Arg.html#TYPEanon_fun">anon_fun</a> -&gt; <a href="Arg.html#TYPEusage_msg">usage_msg</a> -&gt; unit</code></span></pre>
      
    
<pre><span id="EXCEPTIONHelp"><span class="keyword">exception</span> Help</span> <span class="keyword">of</span> <code class="type">string</code></pre>
<pre><span id="EXCEPTIONBad"><span class="keyword">exception</span> Bad</span> <span class="keyword">of</span> <code class="type">string</code></pre>
 
      <pre><span><span class="keyword">val</span> usage : <code class="type">(<a href="Arg.html#TYPEkey">key</a> * <a href="Arg.html#TYPEspec">spec</a> * <a href="Arg.html#TYPEdoc">doc</a>) list -&gt; <a href="Arg.html#TYPEusage_msg">usage_msg</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> usage_string : <code class="type">(<a href="Arg.html#TYPEkey">key</a> * <a href="Arg.html#TYPEspec">spec</a> * <a href="Arg.html#TYPEdoc">doc</a>) list -&gt; <a href="Arg.html#TYPEusage_msg">usage_msg</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> align : <code class="type">(<a href="Arg.html#TYPEkey">key</a> * <a href="Arg.html#TYPEspec">spec</a> * <a href="Arg.html#TYPEdoc">doc</a>) list -&gt; (<a href="Arg.html#TYPEkey">key</a> * <a href="Arg.html#TYPEspec">spec</a> * <a href="Arg.html#TYPEdoc">doc</a>) list</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> current : <code class="type">int <a href="Pervasives.html#TYPEref">ref</a></code></span></pre>
      
    

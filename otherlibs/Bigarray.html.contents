<br/><br/><h6 id="6_TITLE">Element kinds</h6><br/> <br/>
	  
<br/>Big arrays can contain elements of the following kinds:<ul><li>IEEE single precision (32 bits) floating-point numbers
   (TODO reference : Bigarray.float32_elt),</li><li>IEEE double precision (64 bits) floating-point numbers
   (TODO reference : Bigarray.float64_elt),</li><li>IEEE single precision (2 * 32 bits) floating-point complex numbers
   (TODO reference : Bigarray.complex32_elt),</li><li>IEEE double precision (2 * 64 bits) floating-point complex numbers
   (TODO reference : Bigarray.complex64_elt),</li><li>8-bit integers (signed or unsigned)
   (TODO reference : Bigarray.int8_signed_elt or TODO reference : Bigarray.int8_unsigned_elt),</li><li>16-bit integers (signed or unsigned)
   (TODO reference : Bigarray.int16_signed_elt or TODO reference : Bigarray.int16_unsigned_elt),</li><li>OCaml integers (signed, 31 bits on 32-bit architectures,
   63 bits on 64-bit architectures) (TODO reference : Bigarray.int_elt),</li><li>32-bit signed integer (TODO reference : Bigarray.int32_elt),</li><li>64-bit signed integers (TODO reference : Bigarray.int64_elt),</li><li>platform-native signed integers (32 bits on 32-bit architectures,
   64 bits on 64-bit architectures) (TODO reference : Bigarray.nativeint_elt).</li></ul>   Each element kind is represented at the type level by one
   of the abstract types defined below.<br/>
	  
<pre><span id="TYPEfloat32_elt"><span class="keyword">type</span> float32_elt </span></pre>
      
    
<pre><span id="TYPEfloat64_elt"><span class="keyword">type</span> float64_elt </span></pre>
      
    
<pre><span id="TYPEcomplex32_elt"><span class="keyword">type</span> complex32_elt </span></pre>
      
    
<pre><span id="TYPEcomplex64_elt"><span class="keyword">type</span> complex64_elt </span></pre>
      
    
<pre><span id="TYPEint8_signed_elt"><span class="keyword">type</span> int8_signed_elt </span></pre>
      
    
<pre><span id="TYPEint8_unsigned_elt"><span class="keyword">type</span> int8_unsigned_elt </span></pre>
      
    
<pre><span id="TYPEint16_signed_elt"><span class="keyword">type</span> int16_signed_elt </span></pre>
      
    
<pre><span id="TYPEint16_unsigned_elt"><span class="keyword">type</span> int16_unsigned_elt </span></pre>
      
    
<pre><span id="TYPEint_elt"><span class="keyword">type</span> int_elt </span></pre>
      
    
<pre><span id="TYPEint32_elt"><span class="keyword">type</span> int32_elt </span></pre>
      
    
<pre><span id="TYPEint64_elt"><span class="keyword">type</span> int64_elt </span></pre>
      
    
<pre><span id="TYPEnativeint_elt"><span class="keyword">type</span> nativeint_elt </span></pre>
      
    
<pre><span id="TYPEkind"><span class="keyword">type</span> <code class="type">('a, 'b) </code>kind </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float32 : <code class="type">(float, <a href="Bigarray.html#TYPEfloat32_elt">float32_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> float64 : <code class="type">(float, <a href="Bigarray.html#TYPEfloat64_elt">float64_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> complex32 : <code class="type">(<a href="../stdlib/Complex.html#TYPEt">Complex.t</a>, <a href="Bigarray.html#TYPEcomplex32_elt">complex32_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> complex64 : <code class="type">(<a href="../stdlib/Complex.html#TYPEt">Complex.t</a>, <a href="Bigarray.html#TYPEcomplex64_elt">complex64_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int8_signed : <code class="type">(int, <a href="Bigarray.html#TYPEint8_signed_elt">int8_signed_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int8_unsigned : <code class="type">(int, <a href="Bigarray.html#TYPEint8_unsigned_elt">int8_unsigned_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int16_signed : <code class="type">(int, <a href="Bigarray.html#TYPEint16_signed_elt">int16_signed_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int16_unsigned : <code class="type">(int, <a href="Bigarray.html#TYPEint16_unsigned_elt">int16_unsigned_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int : <code class="type">(int, <a href="Bigarray.html#TYPEint_elt">int_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int32 : <code class="type">(int32, <a href="Bigarray.html#TYPEint32_elt">int32_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> int64 : <code class="type">(int64, <a href="Bigarray.html#TYPEint64_elt">int64_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> nativeint : <code class="type">(nativeint, <a href="Bigarray.html#TYPEnativeint_elt">nativeint_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> char : <code class="type">(char, <a href="Bigarray.html#TYPEint8_unsigned_elt">int8_unsigned_elt</a>) <a href="Bigarray.html#TYPEkind">kind</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Array layouts</h6><br/> <br/>
	  
<pre><span id="TYPEc_layout"><span class="keyword">type</span> c_layout </span></pre>
      
    
<pre><span id="TYPEfortran_layout"><span class="keyword">type</span> fortran_layout </span></pre>
      
    
<pre><span id="TYPElayout"><span class="keyword">type</span> <code class="type">'a </code>layout </span></pre>
      
    
<br/><br/><div class="h7">Supported layouts</div><br/><br/>   The abstract values <code class="code">c_layout</code> and <code class="code">fortran_layout</code> represent
   the two supported layouts at the level of values.<br/>
	  
 
      <pre><span><span class="keyword">val</span> c_layout : <code class="type"><a href="Bigarray.html#TYPEc_layout">c_layout</a> <a href="Bigarray.html#TYPElayout">layout</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fortran_layout : <code class="type"><a href="Bigarray.html#TYPEfortran_layout">fortran_layout</a> <a href="Bigarray.html#TYPElayout">layout</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Generic arrays (of arbitrarily many dimensions)</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Bigarray.Genarray.html">Genarray</a> : <code class="code">sig</code> <a href="Bigarray.Genarray.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Bigarray.Genarray.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><br/><h6 id="6_TITLE">One-dimensional arrays</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Bigarray.Array1.html">Array1</a> : <code class="code">sig</code> <a href="Bigarray.Array1.html">..</a> <code class="code">end</code></pre><div class="info">One-dimensional arrays. The <code class="code">Array1</code> structure provides operations
   similar to those of
   TODO reference : Bigarray.Genarray, but specialized to the case of one-dimensional arrays.
   (The <code class="code">Array2</code> and <code class="code">Array3</code> structures below provide operations
   specialized for two- and three-dimensional arrays.)
   Statically knowing the number of dimensions of the array allows
   faster operations, and more precise static type-checking.</div>
	<div class="content" style="display:none">
	<div file="Bigarray.Array1.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><br/><h6 id="6_TITLE">Two-dimensional arrays</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Bigarray.Array2.html">Array2</a> : <code class="code">sig</code> <a href="Bigarray.Array2.html">..</a> <code class="code">end</code></pre><div class="info">Two-dimensional arrays. The <code class="code">Array2</code> structure provides operations
   similar to those of TODO reference : Bigarray.Genarray, but specialized to the
   case of two-dimensional arrays.</div>
	<div class="content" style="display:none">
	<div file="Bigarray.Array2.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><br/><h6 id="6_TITLE">Three-dimensional arrays</h6><br/> <br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Bigarray.Array3.html">Array3</a> : <code class="code">sig</code> <a href="Bigarray.Array3.html">..</a> <code class="code">end</code></pre><div class="info">Three-dimensional arrays. The <code class="code">Array3</code> structure provides operations
   similar to those of TODO reference : Bigarray.Genarray, but specialized to the case
   of three-dimensional arrays.</div>
	<div class="content" style="display:none">
	<div file="Bigarray.Array3.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<br/><br/><h6 id="6_TITLE">Coercions between generic big arrays and fixed-dimension big arrays</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> genarray_of_array1 : <code class="type">('a, 'b, 'c) <a href="Bigarray.Array1.html#TYPEt">Array1.t</a> -&gt; ('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> genarray_of_array2 : <code class="type">('a, 'b, 'c) <a href="Bigarray.Array2.html#TYPEt">Array2.t</a> -&gt; ('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> genarray_of_array3 : <code class="type">('a, 'b, 'c) <a href="Bigarray.Array3.html#TYPEt">Array3.t</a> -&gt; ('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> array1_of_genarray : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href="Bigarray.Array1.html#TYPEt">Array1.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> array2_of_genarray : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href="Bigarray.Array2.html#TYPEt">Array2.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> array3_of_genarray : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; ('a, 'b, 'c) <a href="Bigarray.Array3.html#TYPEt">Array3.t</a></code></span></pre>
      
    
<br/><br/><h6 id="6_TITLE">Re-shaping big arrays</h6><br/> <br/>
	  
 
      <pre><span><span class="keyword">val</span> reshape : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; int array -&gt; ('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> reshape_1 : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; int -&gt; ('a, 'b, 'c) <a href="Bigarray.Array1.html#TYPEt">Array1.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> reshape_2 : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; int -&gt; int -&gt; ('a, 'b, 'c) <a href="Bigarray.Array2.html#TYPEt">Array2.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> reshape_3 : <code class="type">('a, 'b, 'c) <a href="Bigarray.Genarray.html#TYPEt">Genarray.t</a> -&gt; int -&gt; int -&gt; int -&gt; ('a, 'b, 'c) <a href="Bigarray.Array3.html#TYPEt">Array3.t</a></code></span></pre>
      
    

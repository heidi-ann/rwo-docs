<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type"><a href="Raw_scheduler.html#TYPEt">Raw_scheduler.t</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> t : <code class="type">unit -&gt; <a href="Scheduler.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">t ()</code> returns the async scheduler.  If the scheduler hasn't been created yet, this
    will create it and acquire the async lock.</div>
    
 
      <pre><span><span class="keyword">val</span> go : <code class="type">?raise_unhandled_exn:bool -&gt; unit -&gt; <a href="../core/Std.html#TYPEnever_returns">Core.Std.never_returns</a></code></span></pre>
      <div class="info"><code class="code">go ?raise_unhandled_exn ()</code> passes control to Async, at which point Async starts
    running handlers, one by one without interruption, until there are no more handlers to
    run.  When Async is out of handlers it blocks until the outside world schedules more
    of them.  Because of this, Async programs do not exit until <code class="code">shutdown</code> is called.<br/>    <code class="code">go ()</code> calls <code class="code">handle_signal Sys.sigpipe</code>, which causes the SIGPIPE signal to be
    ignored.  Low-level syscalls (e.g. write) still raise EPIPE.<br/>    If any async job raises an unhandled exception that is not handled by any monitor,
    async execution ceases.  Then, by default, async pretty prints the exception, and
    exits with status 1.  If you don't want this, pass <code class="code">~raise_unhandled_exn:true</code>, which
    will cause the unhandled exception to be raised to the caller of <code class="code">go ()</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> go_main : <code class="type">?raise_unhandled_exn:bool -&gt;
?file_descr_watcher:<a href="Import.Config.File_descr_watcher.html#TYPEt">Import.Config.File_descr_watcher.t</a> -&gt;
main:(unit -&gt; unit) -&gt; unit -&gt; <a href="../core/Std.html#TYPEnever_returns">Core.Std.never_returns</a></code></span></pre>
      <div class="info"><code class="code">go_main</code> is like <code class="code">go</code>, except that one supplies a <code class="code">main</code> function that will be run to
    initialize the async computation, and that <code class="code">go_main</code> will fail if any async has been
    used prior to <code class="code">go_main</code> being called.  Moreover it allows to configure more static
    options of the scheduler.</div>
    
<pre><span id="TYPEwith_options"><span class="keyword">type</span> <code class="type">'a </code>with_options </span>= <code class="type">?monitor:<a href="Import.Monitor.html#TYPEt">Import.Monitor.t</a> -&gt; ?priority:<a href="Import.Priority.html#TYPEt">Import.Priority.t</a> -&gt; 'a</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> within_context : <code class="type"><a href="Import.Execution_context.html#TYPEt">Import.Execution_context.t</a> -&gt; (unit -&gt; 'a) -&gt; ('a, unit) <a href="../core/Std.Result.html#TYPEt">Core.Std.Result.t</a></code></span></pre>
      <div class="info"><code class="code">within_context context f</code> runs <code class="code">f ()</code> right now with the specified execution
    context.  If <code class="code">f</code> raises, then the exception is sent to the monitor of <code class="code">context</code>, and
    <code class="code">Error ()</code> is returned.</div>
    
 
      <pre><span><span class="keyword">val</span> within' : <code class="type">((unit -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) <a href="Scheduler.html#TYPEwith_options">with_options</a></code></span></pre>
      <div class="info"><code class="code">within' f ~monitor ~priority</code> runs <code class="code">f ()</code> right now, with the specified
    block group, monitor, and priority set as specified.  They will be reset to their
    original values when <code class="code">f</code> returns.  If <code class="code">f</code> raises, then the result of <code class="code">within'</code> will
    never become determined, but the exception will end up in the specified monitor.</div>
    
 
      <pre><span><span class="keyword">val</span> within : <code class="type">((unit -&gt; unit) -&gt; unit) <a href="Scheduler.html#TYPEwith_options">with_options</a></code></span></pre>
      <div class="info"><code class="code">within</code> is like <code class="code">within'</code>, but doesn't require thunk to return a deferred.</div>
    
 
      <pre><span><span class="keyword">val</span> within_v : <code class="type">((unit -&gt; 'a) -&gt; 'a option) <a href="Scheduler.html#TYPEwith_options">with_options</a></code></span></pre>
      <div class="info"><code class="code">within_v</code> is like <code class="code">within</code>, but allows a value to be returned by <code class="code">f</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> schedule' : <code class="type">((unit -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) <a href="Scheduler.html#TYPEwith_options">with_options</a></code></span></pre>
      <div class="info">Just like <code class="code">within'</code>, but instead of running thunk right now, adds
    it to the async queue to be run with other async jobs.</div>
    
 
      <pre><span><span class="keyword">val</span> schedule : <code class="type">((unit -&gt; unit) -&gt; unit) <a href="Scheduler.html#TYPEwith_options">with_options</a></code></span></pre>
      <div class="info">Just like schedule', but doesn't require thunk to return a deferred.</div>
    
 
      <pre><span><span class="keyword">val</span> cycle_start : <code class="type">unit -&gt; <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a></code></span></pre>
      <div class="info"><code class="code">cycle_start ()</code> returns the result of <code class="code">Time.now ()</code> called at the beginning of
    cycle.</div>
    
 
      <pre><span><span class="keyword">val</span> cycle_times : <code class="type">unit -&gt; <a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> <a href="Import.Stream.html#TYPEt">Import.Stream.t</a></code></span></pre>
      <div class="info"><code class="code">cycle_times ()</code> returns a stream that will have one element for each cycle that Async
    runs, with the amount of time that the cycle took (as determined by calls to Time.now
    at the beginning and end of the cycle).</div>
    
 
      <pre><span><span class="keyword">val</span> report_long_cycle_times : <code class="type">?cutoff:<a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> -&gt; unit -&gt; unit</code></span></pre>
      <div class="info"><code class="code">report_long_cycle_times ?cutoff ()</code> sets up something that will print a warning to
    stderr whenever there is an async cycle that is too long, as specified by <code class="code">cutoff</code>,
    whose default is 1s.</div>
    
 
      <pre><span><span class="keyword">val</span> cycle_count : <code class="type">unit -&gt; int</code></span></pre>
      <div class="info"><code class="code">cycle_count ()</code> returns the total number of async cycles that have happened.</div>
    
 
      <pre><span><span class="keyword">val</span> force_current_cycle_to_end : <code class="type">unit -&gt; unit</code></span></pre>
      <div class="info"><code class="code">force_current_cycle_to_end ()</code> causes no more normal priority jobs to run in the
    current cycle, and for the end-of-cycle jobs (i.e. writes) to run, and then for the
    cycle to end.</div>
    
 
      <pre><span><span class="keyword">val</span> is_running : <code class="type">unit -&gt; bool</code></span></pre>
      <div class="info"><code class="code">is_running ()</code> returns true if the scheduler has been started.</div>
    
 
      <pre><span><span class="keyword">val</span> set_max_num_jobs_per_priority_per_cycle : <code class="type">int -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_max_num_jobs_per_priority_per_cycle int</code> sets the maximum number of jobs that
    will be done at each priority within each async cycle.  The default is <code class="code">500</code>.</div>
    
<pre><code><span id="TYPEfolder"><span class="keyword">type</span> <code class="type">'b </code>folder </span>= {</code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTfolder.folder">folder</span> :<code class="type">'a. 'b -&gt; <a href="Scheduler.html#TYPEt">t</a> -&gt; (<a href="Scheduler.html#TYPEt">t</a>, 'a) <a href="../core/Std.Field.html#TYPEt">Core.Std.Field.t</a> -&gt; 'b</code>;</code></td>
	  </tr></table>}
      <div class="info"><code class="code">fold_fields ~init folder</code> folds <code class="code">folder</code> over each field in the scheduler.  The
    fields themselves are not exposed -- <code class="code">folder</code> must be a polymorphic function that
    can work on any field.  So, it's only useful for generic operations, e.g. getting
    the size of each field.</div>
    
 
      <pre><span><span class="keyword">val</span> fold_fields : <code class="type">init:'b -&gt; 'b <a href="Scheduler.html#TYPEfolder">folder</a> -&gt; 'b</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_ready_to_initialize : <code class="type">unit -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> reset_in_forked_process : <code class="type">unit -&gt; unit</code></span></pre>
      <div class="info">If a process that has already created, but not started, the async scheduler would like
    to fork, and would like the child to have a clean async, i.e. not inherit any of the
    async work that was done in the parent, it can call <code class="code">reset_in_forked_process</code> at the
    start of execution in the child process.  After that, the child can do async stuff and
    then start the async scheduler.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Scheduler.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">t ()</code> returns the async scheduler.  If the scheduler hasn't been created yet, this
    will create it and acquire the async lock.<br/>
	  
<br/><code class="code">go ?raise_unhandled_exn ()</code> passes control to Async, at which point Async starts
    running handlers, one by one without interruption, until there are no more handlers to
    run.  When Async is out of handlers it blocks until the outside world schedules more
    of them.  Because of this, Async programs do not exit until <code class="code">shutdown</code> is called.<br/>    <code class="code">go ()</code> calls <code class="code">handle_signal Sys.sigpipe</code>, which causes the SIGPIPE signal to be
    ignored.  Low-level syscalls (e.g. write) still raise EPIPE.<br/>    If any async job raises an unhandled exception that is not handled by any monitor,
    async execution ceases.  Then, by default, async pretty prints the exception, and
    exits with status 1.  If you don't want this, pass <code class="code">~raise_unhandled_exn:true</code>, which
    will cause the unhandled exception to be raised to the caller of <code class="code">go ()</code>.<br/>
	  
<br/><code class="code">go_main</code> is like <code class="code">go</code>, except that one supplies a <code class="code">main</code> function that will be run to
    initialize the async computation, and that <code class="code">go_main</code> will fail if any async has been
    used prior to <code class="code">go_main</code> being called.  Moreover it allows to configure more static
    options of the scheduler.<br/>
	  
<br/><code class="code">within_context context f</code> runs <code class="code">f ()</code> right now with the specified execution
    context.  If <code class="code">f</code> raises, then the exception is sent to the monitor of <code class="code">context</code>, and
    <code class="code">Error ()</code> is returned.<br/>
	  
<br/><code class="code">within' f ~monitor ~priority</code> runs <code class="code">f ()</code> right now, with the specified
    block group, monitor, and priority set as specified.  They will be reset to their
    original values when <code class="code">f</code> returns.  If <code class="code">f</code> raises, then the result of <code class="code">within'</code> will
    never become determined, but the exception will end up in the specified monitor.<br/>
	  
<br/><code class="code">within</code> is like <code class="code">within'</code>, but doesn't require thunk to return a deferred.<br/>
	  
<br/><code class="code">within_v</code> is like <code class="code">within</code>, but allows a value to be returned by <code class="code">f</code>.<br/>
	  
<br/>Just like <code class="code">within'</code>, but instead of running thunk right now, adds
    it to the async queue to be run with other async jobs.<br/>
	  
<br/>Just like schedule', but doesn't require thunk to return a deferred.<br/>
	  
<br/><code class="code">cycle_start ()</code> returns the result of <code class="code">Time.now ()</code> called at the beginning of
    cycle.<br/>
	  
<br/><code class="code">cycle_times ()</code> returns a stream that will have one element for each cycle that Async
    runs, with the amount of time that the cycle took (as determined by calls to Time.now
    at the beginning and end of the cycle).<br/>
	  
<br/><code class="code">report_long_cycle_times ?cutoff ()</code> sets up something that will print a warning to
    stderr whenever there is an async cycle that is too long, as specified by <code class="code">cutoff</code>,
    whose default is 1s.<br/>
	  
<br/><code class="code">cycle_count ()</code> returns the total number of async cycles that have happened.<br/>
	  
<br/><code class="code">force_current_cycle_to_end ()</code> causes no more normal priority jobs to run in the
    current cycle, and for the end-of-cycle jobs (i.e. writes) to run, and then for the
    cycle to end.<br/>
	  
<br/><code class="code">is_running ()</code> returns true if the scheduler has been started.<br/>
	  
<br/><code class="code">set_max_num_jobs_per_priority_per_cycle int</code> sets the maximum number of jobs that
    will be done at each priority within each async cycle.  The default is <code class="code">500</code>.<br/>
	  
<br/><code class="code">fold_fields ~init folder</code> folds <code class="code">folder</code> over each field in the scheduler.  The
    fields themselves are not exposed -- <code class="code">folder</code> must be a polymorphic function that
    can work on any field.  So, it's only useful for generic operations, e.g. getting
    the size of each field.<br/>
	  
<br/>If a process that has already created, but not started, the async scheduler would like
    to fork, and would like the child to have a clean async, i.e. not inherit any of the
    async work that was done in the parent, it can call <code class="code">reset_in_forked_process</code> at the
    start of execution in the child process.  After that, the child can do async stuff and
    then start the async scheduler.<br/>
	  

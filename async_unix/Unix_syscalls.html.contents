<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Exit.html">Exit</a> : module type of <a href="../core/Std.Unix.Exit.html">Core.Std.Unix.Exit</a></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Exit.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Exit_or_signal.html">Exit_or_signal</a> : module type of <a href="../core/Std.Unix.Exit_or_signal.html">Core.Std.Unix.Exit_or_signal</a></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Exit_or_signal.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Exit_or_signal_or_stop.html">Exit_or_signal_or_stop</a> : module type of <a href="../core/Std.Unix.Exit_or_signal_or_stop.html">Core.Std.Unix.Exit_or_signal_or_stop</a></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Exit_or_signal_or_stop.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> system : <code class="type">string -&gt; <a href="Unix_syscalls.Exit_or_signal.html#TYPEt">Exit_or_signal.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> system_exn : <code class="type">string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getpid : <code class="type">unit -&gt; <a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getppid : <code class="type">unit -&gt; <a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getppid_exn : <code class="type">unit -&gt; <a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> this_process_became_child_of_init : <code class="type">?poll_delay:<a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> -&gt; unit -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">this_process_became_child_of_init</code> returns a deferred that becomes determined when
    the current process becomes a child of init(8).  This is useful to determine if one's
    parent has died, because in that case init will becomes one's parent.<br/>    See <code class="code">Linux_ext.pr_set_pdeathsig : Signal.t -&gt; unit</code> for related way to get information
    about parent death.<br/> </div>
    
 
      <pre><span><span class="keyword">val</span> nice : <code class="type">int -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> cores : <code class="type">(unit -&gt; int <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) <a href="../core/Std.Or_error.html#TYPEt">Core.Std.Or_error.t</a></code></span></pre>
      <div class="info"><code class="code">cores ()</code> Returns the number of cores</div>
    
<pre><span id="TYPEopen_flag"><span class="keyword">type</span> open_flag </span>= <code class="type">[ `Append
| `Creat
| `Dsync
| `Excl
| `Noctty
| `Nonblock
| `Rdonly
| `Rdwr
| `Rsync
| `Sync
| `Trunc
| `Wronly ]</code> </pre>
      
    
<pre><span id="TYPEfile_perm"><span class="keyword">type</span> file_perm </span>= <code class="type">int</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> openfile : <code class="type">?perm:<a href="Unix_syscalls.html#TYPEfile_perm">file_perm</a> -&gt;
?close_on_exec:bool -&gt;
string -&gt; mode:<a href="Unix_syscalls.html#TYPEopen_flag">open_flag</a> list -&gt; <a href="Fd.html#TYPEt">Fd.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> with_file : <code class="type">?exclusive:[ `Read | `Write ] -&gt;
?perm:<a href="Unix_syscalls.html#TYPEfile_perm">file_perm</a> -&gt;
string -&gt;
mode:<a href="Unix_syscalls.html#TYPEopen_flag">open_flag</a> list -&gt;
f:(<a href="Fd.html#TYPEt">Fd.t</a> -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">with_file file ~mode ~perm ~f ?exclusive</code> opens <code class="code">file</code>, and applies <code class="code">f</code> to the
    resulting file descriptor.  When the result of <code class="code">f</code> becomes determined, it closes the
    descriptor and returns the result of <code class="code">f</code>.  If <code class="code">exclusive</code> is supplied, then the file
    descriptor is locked before calling <code class="code">f</code> and unlocked after calling <code class="code">f</code>.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Open_flags.html">Open_flags</a> : module type of <a href="../core/Std.Unix.Open_flags.html">Core.Std.Unix.Open_flags</a></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Open_flags.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> fcntl_getfl : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; <a href="Unix_syscalls.Open_flags.html#TYPEt">Open_flags.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">fcntl_getfl</code> and <code class="code">fcntl_setf</code> are deferred wrappers around the corresponding
    functions in <code class="code">Core.Unix</code> for accessing the open-file-descriptor table.</div>
    
 
      <pre><span><span class="keyword">val</span> fcntl_setfl : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; <a href="Unix_syscalls.Open_flags.html#TYPEt">Open_flags.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close : <code class="type">?should_close_file_descriptor:bool -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">close fd</code> closes the file descriptor <code class="code">fd</code>, and raises an exception if <code class="code">fd</code> has
    already been closed.<br/>    In some situations, one may need to cause async to release an fd that it is managing
    without closing the underlying file descriptor.  In that case, one should supply
    <code class="code">~should_close_file_descriptor:false</code>, which will skip the underlying close() system
    call.</div>
    
 
      <pre><span><span class="keyword">val</span> lseek : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; int64 -&gt; mode:[&lt; `Cur | `End | `Set ] -&gt; int64 <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> truncate : <code class="type">string -&gt; len:int64 -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ftruncate : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; len:int64 -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fsync : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fdatasync : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sync : <code class="type">unit -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lockf : <code class="type">?len:<a href="../core/Std.Int64.html#TYPEt">Core.Std.Int64.t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; [ `Read | `Write ] -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">lockf fd read_or_write ?len</code> exclusively locks for reading/writing the section of the
    open file <code class="code">fd</code> specified by the current file position and <code class="code">len</code> (see man lockf).  It
    returns when the lock has been acquired.  It raises if <code class="code">fd</code> is closed.</div>
    
 
      <pre><span><span class="keyword">val</span> try_lockf : <code class="type">?len:<a href="../core/Std.Int64.html#TYPEt">Core.Std.Int64.t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; [ `Read | `Write ] -&gt; bool</code></span></pre>
      <div class="info"><code class="code">try_lockf fd read_or_write ?len</code> attempts to exclusively lock for reading/writing the
    section of the open file <code class="code">fd</code> specified by the current file position and <code class="code">len</code> (see
    man lockf).  It returns <code class="code">true</code> if it acquired the lock.  It raises if <code class="code">fd</code> is
    closed.</div>
    
 
      <pre><span><span class="keyword">val</span> test_lockf : <code class="type">?len:<a href="../core/Std.Int64.html#TYPEt">Core.Std.Int64.t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; bool</code></span></pre>
      <div class="info"><code class="code">lockf_is_locked fd ?len</code> checks the lock on section of the open file <code class="code">fd</code> specified
    by the current file position and <code class="code">len</code> (see man lockf).  If the section is unlocked or
    locked by this process, it returns true, else it returns false.  It raises if <code class="code">fd</code> is
    closed.</div>
    
 
      <pre><span><span class="keyword">val</span> unlockf : <code class="type">?len:<a href="../core/Std.Int64.html#TYPEt">Core.Std.Int64.t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">unlockf fd ?len</code> unlocks the section of the open file <code class="code">fd</code> specified by the current
    file position and <code class="code">len</code> (see man lockf).  It raises if <code class="code">fd</code> is closed.</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.File_kind.html">File_kind</a> : <code class="code">sig</code> <a href="Unix_syscalls.File_kind.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.File_kind.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Stats.html">Stats</a> : <code class="code">sig</code> <a href="Unix_syscalls.Stats.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Stats.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> fstat : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; <a href="Unix_syscalls.Stats.html#TYPEt">Stats.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> stat : <code class="type">string -&gt; <a href="Unix_syscalls.Stats.html#TYPEt">Stats.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> lstat : <code class="type">string -&gt; <a href="Unix_syscalls.Stats.html#TYPEt">Stats.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unlink : <code class="type">string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> remove : <code class="type">string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> rename : <code class="type">src:string -&gt; dst:string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> link : <code class="type">?force:bool -&gt;
target:string -&gt; link_name:string -&gt; unit -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> chmod : <code class="type">string -&gt; perm:<a href="Unix_syscalls.html#TYPEfile_perm">file_perm</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fchmod : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; perm:<a href="Unix_syscalls.html#TYPEfile_perm">file_perm</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> chown : <code class="type">string -&gt; uid:int -&gt; gid:int -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fchown : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; uid:int -&gt; gid:int -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> access : <code class="type">string -&gt;
[ `Exec | `Exists | `Read | `Write ] list -&gt;
(unit, exn) <a href="../core/Std.Result.html#TYPEt">Core.Std.Result.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> access_exn : <code class="type">string -&gt; [ `Exec | `Exists | `Read | `Write ] list -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> set_close_on_exec : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> clear_close_on_exec : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mkdir : <code class="type">?p:unit -&gt; ?perm:<a href="Unix_syscalls.html#TYPEfile_perm">file_perm</a> -&gt; string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> rmdir : <code class="type">string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> chdir : <code class="type">string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getcwd : <code class="type">unit -&gt; string <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> chroot : <code class="type">string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
<pre><span id="TYPEdir_handle"><span class="keyword">type</span> dir_handle </span>= <code class="type"><a href="../core/Std.Unix.html#TYPEdir_handle">Core.Std.Unix.dir_handle</a></code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> opendir : <code class="type">string -&gt; <a href="Unix_syscalls.html#TYPEdir_handle">dir_handle</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> readdir : <code class="type"><a href="Unix_syscalls.html#TYPEdir_handle">dir_handle</a> -&gt; string <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> rewinddir : <code class="type"><a href="Unix_syscalls.html#TYPEdir_handle">dir_handle</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> closedir : <code class="type"><a href="Unix_syscalls.html#TYPEdir_handle">dir_handle</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> pipe : <code class="type"><a href="../core/Std.Info.html#TYPEt">Core.Std.Info.t</a> -&gt;
([ `Reader of <a href="Fd.html#TYPEt">Fd.t</a> ] * [ `Writer of <a href="Fd.html#TYPEt">Fd.t</a> ]) <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info">The <code class="code">info</code> supplied to pipe is debugging information that will be included in the
    returned <code class="code">Fd</code>s.</div>
    
 
      <pre><span><span class="keyword">val</span> mkfifo : <code class="type">?perm:<a href="Unix_syscalls.html#TYPEfile_perm">file_perm</a> -&gt; string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info">Create a named pipe with the given permissions.</div>
    
 
      <pre><span><span class="keyword">val</span> symlink : <code class="type">src:string -&gt; dst:string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> readlink : <code class="type">string -&gt; string <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mkstemp : <code class="type">string -&gt; (string * <a href="Fd.html#TYPEt">Fd.t</a>) <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">mkstemp prefix</code> creates and opens a unique temporary file with <code class="code">prefix</code>,
    automatically appending a suffix of six random characters to make the name unique.
    Unlike C's <code class="code">mkstemp</code>, <code class="code">prefix</code> should not include six X's at the end.<br/> <b>Raises</b> <code>Unix_error</code> on errors.<br/></div>
    
 
      <pre><span><span class="keyword">val</span> mkdtemp : <code class="type">string -&gt; string <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
<pre><span id="TYPEprocess_times"><span class="keyword">type</span> process_times </span>= {<code class="type"><a href="../core/Std.Unix.html#TYPEprocess_times">Core.Std.Unix.process_times</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTprocess_times.tms_utime">tms_utime</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">User time for the process</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTprocess_times.tms_stime">tms_stime</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">System time for the process</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTprocess_times.tms_cutime">tms_cutime</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">User time for the children processes</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTprocess_times.tms_cstime">tms_cstime</span> :<code class="type">float</code>;</code></td><td class="typefieldcomment" align="left">System time for the children processes</td>
	  </tr></table>}
      <div class="info">Time functions.</div>
    
 
      <pre><span><span class="keyword">val</span> times : <code class="type">unit -&gt; <a href="Unix_syscalls.html#TYPEprocess_times">process_times</a></code></span></pre>
      
    
<pre><span id="TYPEtm"><span class="keyword">type</span> tm </span>= {<code class="type"><a href="../core/Std.Unix.html#TYPEtm">Core.Std.Unix.tm</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_sec">tm_sec</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Seconds 0..59</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_min">tm_min</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Minutes 0..59</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_hour">tm_hour</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Hours 0..23</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_mday">tm_mday</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Day of month 1..31</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_mon">tm_mon</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Month of year 0..11</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_year">tm_year</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Year - 1900</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_wday">tm_wday</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Day of week (Sunday is 0)</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_yday">tm_yday</span> :<code class="type">int</code>;</code></td><td class="typefieldcomment" align="left">Day of year 0..365</td>
	  </tr><tr><td align="left" valign="top"><code>  </code></td><td align="left" valign="top"><code> <span id="TYPEELTtm.tm_isdst">tm_isdst</span> :<code class="type">bool</code>;</code></td><td class="typefieldcomment" align="left">Daylight time savings in effect</td>
	  </tr></table>}
      
    
 
      <pre><span><span class="keyword">val</span> time : <code class="type">unit -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> gettimeofday : <code class="type">unit -&gt; float</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> gmtime : <code class="type">float -&gt; <a href="Unix_syscalls.html#TYPEtm">tm</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> localtime : <code class="type">float -&gt; <a href="Unix_syscalls.html#TYPEtm">tm</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> mktime : <code class="type"><a href="Unix_syscalls.html#TYPEtm">tm</a> -&gt; float * <a href="Unix_syscalls.html#TYPEtm">tm</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> utimes : <code class="type">string -&gt; access:float -&gt; modif:float -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> environment : <code class="type">unit -&gt; string array</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getenv : <code class="type">string -&gt; string option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getenv_exn : <code class="type">string -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> putenv : <code class="type">key:string -&gt; data:string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> unsetenv : <code class="type">string -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fork_exec : <code class="type">prog:string -&gt;
args:string list -&gt;
?use_path:bool -&gt;
?env:string list -&gt; unit -&gt; <a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">fork_exec ~prog ~args ?path ?env</code> forks and execs <code class="code">prog</code> with <code class="code">args</code>, and returns the
    child pid.  If <code class="code">use_path = true</code> (the default) and <code class="code">prog</code> doesn't contain a slash,
    then <code class="code">fork_exec</code> searches the PATH environment variable for <code class="code">prog</code>.  If <code class="code">env</code> is
    supplied, it is used as the environment when <code class="code">prog</code> is executed.</div>
    
<pre><span id="TYPEwait_on"><span class="keyword">type</span> wait_on </span>= <code class="type">[ `Any | `Group of <a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> | `My_group | `Pid of <a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> ]</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> wait : <code class="type"><a href="Unix_syscalls.html#TYPEwait_on">wait_on</a> -&gt; (<a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> * <a href="Unix_syscalls.Exit_or_signal.html#TYPEt">Exit_or_signal.t</a>) <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> wait_nohang : <code class="type"><a href="Unix_syscalls.html#TYPEwait_on">wait_on</a> -&gt; (<a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> * <a href="Unix_syscalls.Exit_or_signal.html#TYPEt">Exit_or_signal.t</a>) option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> wait_untraced : <code class="type"><a href="Unix_syscalls.html#TYPEwait_on">wait_on</a> -&gt; (<a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> * <a href="Unix_syscalls.Exit_or_signal_or_stop.html#TYPEt">Exit_or_signal_or_stop.t</a>) <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> wait_nohang_untraced : <code class="type"><a href="Unix_syscalls.html#TYPEwait_on">wait_on</a> -&gt; (<a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> * <a href="Unix_syscalls.Exit_or_signal_or_stop.html#TYPEt">Exit_or_signal_or_stop.t</a>) option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> waitpid : <code class="type"><a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> -&gt; <a href="Unix_syscalls.Exit_or_signal.html#TYPEt">Exit_or_signal.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">waitpid pid</code> returns a deferred that becomes determined with the child's exit
    status, when the child process with process id <code class="code">pid</code> exits.  <code class="code">waitpid_exn</code> is like
    <code class="code">waitpid</code>, except the result only becomes determined if the child exits with status
    zero; it raises if the child terminates win any other way.</div>
    
 
      <pre><span><span class="keyword">val</span> waitpid_exn : <code class="type"><a href="../core/Std.Pid.html#TYPEt">Core.Std.Pid.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Inet_addr.html">Inet_addr</a> : <code class="code">sig</code> <a href="Unix_syscalls.Inet_addr.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Inet_addr.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Protocol_family.html">Protocol_family</a> : <code class="code">sig</code> <a href="Unix_syscalls.Protocol_family.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Protocol_family.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> socketpair : <code class="type">unit -&gt; <a href="Fd.html#TYPEt">Fd.t</a> * <a href="Fd.html#TYPEt">Fd.t</a></code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Socket.html">Socket</a> : <code class="code">sig</code> <a href="Unix_syscalls.Socket.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Socket.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Host.html">Host</a> : <code class="code">sig</code> <a href="Unix_syscalls.Host.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Host.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> gethostname : <code class="type">unit -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getuid : <code class="type">unit -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> geteuid : <code class="type">unit -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getgid : <code class="type">unit -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getegid : <code class="type">unit -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> setuid : <code class="type">int -&gt; unit</code></span></pre>
      
    
<pre><span id="TYPEerror"><span class="keyword">type</span> error </span>= <code class="type"><a href="../core/Std.Unix.html#TYPEerror">Core.Std.Unix.error</a></code> </pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.E2BIG"><span class="constructor">E2BIG</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EACCES"><span class="constructor">EACCES</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EAGAIN"><span class="constructor">EAGAIN</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EBADF"><span class="constructor">EBADF</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EBUSY"><span class="constructor">EBUSY</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ECHILD"><span class="constructor">ECHILD</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EDEADLK"><span class="constructor">EDEADLK</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EDOM"><span class="constructor">EDOM</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EEXIST"><span class="constructor">EEXIST</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EFAULT"><span class="constructor">EFAULT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EFBIG"><span class="constructor">EFBIG</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EINTR"><span class="constructor">EINTR</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EINVAL"><span class="constructor">EINVAL</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EIO"><span class="constructor">EIO</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EISDIR"><span class="constructor">EISDIR</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EMFILE"><span class="constructor">EMFILE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EMLINK"><span class="constructor">EMLINK</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENAMETOOLONG"><span class="constructor">ENAMETOOLONG</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENFILE"><span class="constructor">ENFILE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENODEV"><span class="constructor">ENODEV</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOENT"><span class="constructor">ENOENT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOEXEC"><span class="constructor">ENOEXEC</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOLCK"><span class="constructor">ENOLCK</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOMEM"><span class="constructor">ENOMEM</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOSPC"><span class="constructor">ENOSPC</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOSYS"><span class="constructor">ENOSYS</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOTDIR"><span class="constructor">ENOTDIR</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOTEMPTY"><span class="constructor">ENOTEMPTY</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOTTY"><span class="constructor">ENOTTY</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENXIO"><span class="constructor">ENXIO</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EPERM"><span class="constructor">EPERM</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EPIPE"><span class="constructor">EPIPE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ERANGE"><span class="constructor">ERANGE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EROFS"><span class="constructor">EROFS</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ESPIPE"><span class="constructor">ESPIPE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ESRCH"><span class="constructor">ESRCH</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EXDEV"><span class="constructor">EXDEV</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EWOULDBLOCK"><span class="constructor">EWOULDBLOCK</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EINPROGRESS"><span class="constructor">EINPROGRESS</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EALREADY"><span class="constructor">EALREADY</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOTSOCK"><span class="constructor">ENOTSOCK</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EDESTADDRREQ"><span class="constructor">EDESTADDRREQ</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EMSGSIZE"><span class="constructor">EMSGSIZE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EPROTOTYPE"><span class="constructor">EPROTOTYPE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOPROTOOPT"><span class="constructor">ENOPROTOOPT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EPROTONOSUPPORT"><span class="constructor">EPROTONOSUPPORT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ESOCKTNOSUPPORT"><span class="constructor">ESOCKTNOSUPPORT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EOPNOTSUPP"><span class="constructor">EOPNOTSUPP</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EPFNOSUPPORT"><span class="constructor">EPFNOSUPPORT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EAFNOSUPPORT"><span class="constructor">EAFNOSUPPORT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EADDRINUSE"><span class="constructor">EADDRINUSE</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EADDRNOTAVAIL"><span class="constructor">EADDRNOTAVAIL</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENETDOWN"><span class="constructor">ENETDOWN</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENETUNREACH"><span class="constructor">ENETUNREACH</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENETRESET"><span class="constructor">ENETRESET</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ECONNABORTED"><span class="constructor">ECONNABORTED</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ECONNRESET"><span class="constructor">ECONNRESET</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOBUFS"><span class="constructor">ENOBUFS</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EISCONN"><span class="constructor">EISCONN</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ENOTCONN"><span class="constructor">ENOTCONN</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ESHUTDOWN"><span class="constructor">ESHUTDOWN</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ETOOMANYREFS"><span class="constructor">ETOOMANYREFS</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ETIMEDOUT"><span class="constructor">ETIMEDOUT</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ECONNREFUSED"><span class="constructor">ECONNREFUSED</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EHOSTDOWN"><span class="constructor">EHOSTDOWN</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EHOSTUNREACH"><span class="constructor">EHOSTUNREACH</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.ELOOP"><span class="constructor">ELOOP</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EOVERFLOW"><span class="constructor">EOVERFLOW</span></span></code></td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTerror.EUNKNOWNERR"><span class="constructor">EUNKNOWNERR</span></span> <span class="keyword">of</span> <code class="type">int</code></code></td>
	   </tr></table>
      
    
<pre><span id="EXCEPTIONUnix_error"><span class="keyword">exception</span> Unix_error</span> <span class="keyword">of</span> <code class="type"><a href="Unix_syscalls.html#TYPEerror">error</a> * string * string</code></pre>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Terminal_io.html">Terminal_io</a> : <code class="code">sig</code> <a href="Unix_syscalls.Terminal_io.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Terminal_io.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Passwd.html">Passwd</a> : <code class="code">sig</code> <a href="Unix_syscalls.Passwd.html">..</a> <code class="code">end</code></pre><div class="info">Structure of entries in the <code class="code">passwd</code> database.</div>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Passwd.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Group.html">Group</a> : <code class="code">sig</code> <a href="Unix_syscalls.Group.html">..</a> <code class="code">end</code></pre><div class="info">Structure of entries in the <code class="code">groups</code> database.</div>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Group.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> getlogin : <code class="type">unit -&gt; string <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info">Return the login name of the user executing the process.<br/>    This returns a deferred because the username may need to be looked up in what is
    essentially a database elsewhere on the network (winbound user, or NIS).</div>
    
 
      <pre><span><span class="keyword">val</span> wordexp : <code class="type">(?flags:[ `No_cmd | `Show_err | `Undef ] list -&gt;
 string -&gt; string array <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>)
<a href="../core/Std.Or_error.html#TYPEt">Core.Std.Or_error.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> wait_on_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Unix_syscalls.html#TYPEwait_on">wait_on</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> __wait_on_of_sexp__ : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Unix_syscalls.html#TYPEwait_on">wait_on</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_wait_on : <code class="type"><a href="Unix_syscalls.html#TYPEwait_on">wait_on</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">waitpid pid</code> returns a deferred that becomes determined with the child's exit
    status, when the child process with process id <code class="code">pid</code> exits.  <code class="code">waitpid_exn</code> is like
    <code class="code">waitpid</code>, except the result only becomes determined if the child exits with status
    zero; it raises if the child terminates win any other way.<br/>
	  
<br/>same as <code class="code">Core.Unix</code> <br/>
	  
<br/><code class="code">127.0.0.1</code> <br/>
	  
<br/>(<code class="code">::1</code>)<br/>
	  
<br/><code class="code">of_string_or_getbyname hostname</code> does a DNS lookup of hostname and returns the
      resulting IP address.  The implemenation sequentializes all calls so that only a
      single call is active at a time.  The is because we've observed thread safety issues
      with certain versions of winbind using &quot;wins&quot; name resolution.<br/>
	  
<br/>Sockets have a phantom type parameter that tracks the state of the socket
      in order to eliminate certain errors in which socket functions are called
      in the wrong order.  Initially, a socket is `Unconnected.  As various
      socket functions are called, they return a socket with a new phantom state.
      Here is a chart of the allowed state transitions.<br/>      <span class="verbatim">        Unconnected ---connect--&gt; Active
        |
        | ---bind--&gt; Bound ---listen--&gt; Passive ---accept---&gt; Active
      </span>
<br/>
	  
<br/><code class="code">bind socket addr</code> sets close_on_exec for the fd of <code class="code">socket</code>.<br/>
	  
 
      <pre><span><span class="keyword">val</span> error_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Unix_syscalls.html#TYPEerror">error</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_error : <code class="type"><a href="Unix_syscalls.html#TYPEerror">error</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/>Ignore the break condition.<br/>
	  
<br/>Signal interrupt on break condition.<br/>
	  
<br/>Ignore characters with parity errors.<br/>
	  
<br/>Mark parity errors.<br/>
	  
<br/>Enable parity check on input.<br/>
	  
<br/>Strip 8th bit on input characters.<br/>
	  
<br/>Map NL to CR on input.<br/>
	  
<br/>Ignore CR on input.<br/>
	  
<br/>Map CR to NL on input.<br/>
	  
<br/>Recognize XON/XOFF characters on input.<br/>
	  
<br/>Emit XON/XOFF chars to control input flow.<br/>
	  
<br/>Enable output processing.<br/>
	  
<br/>Output baud rate (0 means close connection).<br/>
	  
<br/>Input baud rate.<br/>
	  
<br/>Number of bits per character (5-8).<br/>
	  
<br/>Number of stop bits (1-2).<br/>
	  
<br/>Reception is enabled.<br/>
	  
<br/>Enable parity generation and detection.<br/>
	  
<br/>Specify odd parity instead of even.<br/>
	  
<br/>Hang up on last close.<br/>
	  
<br/>Ignore modem status lines.<br/>
	  
<br/>Generate signal on INTR, QUIT, SUSP.<br/>
	  
<br/>Enable canonical processing
                                 (line buffering and editing)<br/>
	  
<br/>Disable flush after INTR, QUIT, SUSP.<br/>
	  
<br/>Echo input characters.<br/>
	  
<br/>Echo ERASE (to erase previous character).<br/>
	  
<br/>Echo KILL (to erase the current line).<br/>
	  
<br/>Echo NL even if c_echo is not set.<br/>
	  
<br/>Interrupt character (usually ctrl-C).<br/>
	  
<br/>Quit character (usually ctrl-\).<br/>
	  
<br/>Erase character (usually DEL or ctrl-H).<br/>
	  
<br/>Kill line character (usually ctrl-U).<br/>
	  
<br/>End-of-file character (usually ctrl-D).<br/>
	  
<br/>Alternate end-of-line char. (usually none).<br/>
	  
<br/>Minimum number of characters to read
                                 before the read request is satisfied.<br/>
	  
<br/>Maximum read wait (in 0.1s units).<br/>
	  
<br/>Start character (usually ctrl-Q).<br/>
	  
<br/>Stop character (usually ctrl-S).<br/>
	  
<br/>Structure of entries in the <code class="code">passwd</code> database.<br/>
	  
<br/>Structure of entries in the <code class="code">groups</code> database.<br/>
	  
<br/>Return the login name of the user executing the process.<br/>    This returns a deferred because the username may need to be looked up in what is
    essentially a database elsewhere on the network (winbound user, or NIS).<br/>
	  

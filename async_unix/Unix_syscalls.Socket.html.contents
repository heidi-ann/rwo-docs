<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Socket.Address.html">Address</a> : <code class="code">sig</code> <a href="Unix_syscalls.Socket.Address.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Socket.Address.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Socket.Family.html">Family</a> : <code class="code">sig</code> <a href="Unix_syscalls.Socket.Family.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Socket.Family.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">('a, 'b) </code>t </span></pre>
      <div class="info">Sockets have a phantom type parameter that tracks the state of the socket
      in order to eliminate certain errors in which socket functions are called
      in the wrong order.  Initially, a socket is `Unconnected.  As various
      socket functions are called, they return a socket with a new phantom state.
      Here is a chart of the allowed state transitions.<br/>      <span class="verbatim">        Unconnected ---connect--&gt; Active
        |
        | ---bind--&gt; Bound ---listen--&gt; Passive ---accept---&gt; Active
      </span>
</div>
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Socket.Type.html">Type</a> : <code class="code">sig</code> <a href="Unix_syscalls.Socket.Type.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Socket.Type.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> create : <code class="type">([&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.Type.html#TYPEt">Type.t</a> -&gt; ([ `Unconnected ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> connect : <code class="type">([ `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'a -&gt; ([ `Active ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> connect_interruptible : <code class="type">([ `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'a -&gt;
interrupt:unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a> -&gt;
[ `Interrupted | `Ok of ([ `Active ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> ] <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bind : <code class="type">([ `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'a -&gt; ([ `Bound ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">bind socket addr</code> sets close_on_exec for the fd of <code class="code">socket</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> listen : <code class="type">?max_pending_connections:int -&gt;
([ `Bound ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt; ([ `Passive ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> accept : <code class="type">([ `Passive ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
[ `Ok of ([ `Active ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> * 'a | `Socket_closed ] <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> accept_interruptible : <code class="type">([ `Passive ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
interrupt:unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a> -&gt;
[ `Interrupted | `Ok of ([ `Active ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> * 'a | `Socket_closed ]
<a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> shutdown : <code class="type">([&lt; `Active | `Bound | `Passive | `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ]) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
[ `Both | `Receive | `Send ] -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fd : <code class="type">([&lt; `Active | `Bound | `Passive | `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ]) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_fd : <code class="type"><a href="Fd.html#TYPEt">Fd.t</a> -&gt;
([&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.Type.html#TYPEt">Type.t</a> -&gt;
([&lt; `Active | `Bound | `Passive | `Unconnected ], 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getsockname : <code class="type">([&lt; `Active | `Bound | `Passive | `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> getpeername : <code class="type">([&lt; `Active | `Bound | `Passive | `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'a) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'a</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Unix_syscalls.Socket.Opt.html">Opt</a> : <code class="code">sig</code> <a href="Unix_syscalls.Socket.Opt.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Unix_syscalls.Socket.Opt.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> getopt : <code class="type">([&lt; `Active | `Bound | `Passive | `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ]) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'c <a href="Unix_syscalls.Socket.Opt.html#TYPEt">Opt.t</a> -&gt; 'c</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> setopt : <code class="type">([&lt; `Active | `Bound | `Passive | `Unconnected ], [&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ]) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt;
'c <a href="Unix_syscalls.Socket.Opt.html#TYPEt">Opt.t</a> -&gt; 'c -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">(([&lt; `Active | `Bound | `Passive | `Unconnected ] as 'a) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt;
(([&lt; <a href="Unix_syscalls.Socket.Address.html#TYPEt">Address.t</a> ] as 'b) -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; ('a, 'b) <a href="Unix_syscalls.Socket.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">bind socket addr</code> sets close_on_exec for the fd of <code class="code">socket</code>.<br/>
	  

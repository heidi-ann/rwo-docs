<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Writer.Id.html">Id</a> : <code class="code"><a href="../core/Std.Unique_id.html">Core.Std.Unique_id</a></code></pre>
	<div class="content" style="display:none">
	<div file="Writer.Id.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core/Std.Invariant.S.html">Core.Std.Invariant.S</a></code> with type t = <a href="Writer.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core/Std.Invariant.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> io_stats : <code class="type"><a href="Io_stats.html#TYPEt">Io_stats.t</a></code></span></pre>
      <div class="info"><code class="code">io_stats</code> Overall IO statistics for all writers</div>
    
 
      <pre><span><span class="keyword">val</span> stdout : <code class="type"><a href="Writer.html#TYPEt">t</a> <a href="../core/Std.Lazy.html#TYPEt">Core.Std.Lazy.t</a></code></span></pre>
      <div class="info"><code class="code">stdout</code> and <code class="code">stderr</code> are writers for file descriptors 1 and 2.  They are lazy because
    we don't want to create them in all programs that happen to link with async.<br/>    When either <code class="code">stdout</code> or <code class="code">stderr</code> is created, they both are created.  Furthermore, if
    they point to the same inode, then they will be the same writer to <code class="code">Fd.stdout</code>.  This
    can be confusing, because <code class="code">fd (force stderr)</code> will be <code class="code">Fd.stdout</code>, not <code class="code">Fd.stderr</code>.
    And subsequent modifications of <code class="code">Fd.stderr</code> will have no effect on <code class="code">Writer.stderr</code>.<br/>    Unfortunately, the sharing is necessary because async uses OS threads to do write()
    syscalls using the writer buffer.  When calling a program that redirects stdout and
    stderr to the same file, as in:<br/>    <span class="verbatim">      foo.exe &gt;/tmp/z.file 2&gt;&amp;1
    </span><br/>    if <code class="code">Writer.stdout</code> and <code class="code">Writer.stderr</code> weren't the same writer, then they could have
    threads simultaneously writing to the same file, which could easily cause data loss.</div>
    
 
      <pre><span><span class="keyword">val</span> stderr : <code class="type"><a href="Writer.html#TYPEt">t</a> <a href="../core/Std.Lazy.html#TYPEt">Core.Std.Lazy.t</a></code></span></pre>
      
    
<pre><span id="TYPEbuffer_age_limit"><span class="keyword">type</span> buffer_age_limit </span>= <code class="type">[ `At_most of <a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> | `Unlimited ]</code> </pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?buf_len:int -&gt;
?syscall:[ `Per_cycle | `Periodic of <a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> ] -&gt;
?buffer_age_limit:<a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> -&gt;
?raise_when_consumer_leaves:bool -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; <a href="Writer.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ?buf_len ?syscall ?buffer_age_limit fd</code> creates a new writer.  The file
    descriptor fd should not be in use for writing by anything else.<br/>    By default, a write system call occurs at the end of a cycle in which bytes were
    written.  One can supply ~syscall:(`Periodic span) to get better performance.  This
    batches writes together, doing the write system call periodically according to the
    supplied span.<br/>    A writer can asynchronously fail if the underlying write syscall returns an error,
    e.g. EBADF, EPIPE, ECONNRESET, ....<br/>    <code class="code">buffer_age_limit</code> specifies how backed up you can get before raising an exception.
    Default is 2 minutes.  You can supply <code class="code">`Unlimited</code> to turn off buffer-age checks.<br/>    <code class="code">raise_when_consumer_leaves</code> specifies whether the writer should raise an exception
    when the consumer receiving bytes from the writer leaves, i.e. in Unix, the write
    syscall returns EPIPE or ECONNRESET.  If <code class="code">not raise_when_consumer_leaves</code>, then the
    writer will silently drop all writes after the consumer leaves, and the writer will
    eventually fail with a writer-buffer-older-than error if the application remains open
    long enough.</div>
    
 
      <pre><span><span class="keyword">val</span> set_raise_when_consumer_leaves : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; bool -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_raise_when_consumer_leaves t bool</code> sets the <code class="code">raise_when_consumer_leaves</code> flag of
    <code class="code">t</code>, which determies how <code class="code">t</code> responds to a write system call raising EPIPE and
    ECONNRESET (see <code class="code">create</code>).</div>
    
 
      <pre><span><span class="keyword">val</span> set_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_buffer_age_limit t buffer_age_limit</code> replaces the existing buffer age limit with
    the new one.  This is useful for stdout and stderr, which are lazily created in a
    context that does not allow applications to specify <code class="code">buffer_age_limit</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> consumer_left : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">consumer_left t</code> returns a deferred that becomes determined when <code class="code">t</code> attempts to
    write to a pipe that broke because the consumer on the other side left.</div>
    
 
      <pre><span><span class="keyword">val</span> of_out_channel : <code class="type"><a href="../stdlib/Pervasives.html#TYPEout_channel">out_channel</a> -&gt; <a href="Fd.Kind.html#TYPEt">Fd.Kind.t</a> -&gt; <a href="Writer.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> open_file : <code class="type">?append:bool -&gt;
?close_on_exec:bool -&gt; ?perm:int -&gt; string -&gt; <a href="Writer.html#TYPEt">t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">open_file file</code> opens <code class="code">file</code> for writing and returns a writer for it.  It uses
    <code class="code">Unix_syscalls.openfile</code> to open the file.</div>
    
 
      <pre><span><span class="keyword">val</span> with_file : <code class="type">?perm:int -&gt;
?append:bool -&gt;
?exclusive:bool -&gt;
string -&gt; f:(<a href="Writer.html#TYPEt">t</a> -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">with_file ~file f</code> opens <code class="code">file</code> for writing, creates a writer <code class="code">t</code>, and runs <code class="code">f t</code> to
    obtain a deferred <code class="code">d</code>.  When <code class="code">d</code> becomes determined, the writer is closed.  When the
    close completes, the result of <code class="code">with_file</code> becomes determined with the value of <code class="code">d</code>.<br/>    There is no need to call <code class="code">Writer.flushed</code> to ensure that <code class="code">with_file</code> waits for the
    writer to be flushed before closing it.  <code class="code">Writer.close</code> will already wait for the
    flush.</div>
    
 
      <pre><span><span class="keyword">val</span> id : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="Writer.Id.html#TYPEt">Id.t</a></code></span></pre>
      <div class="info"><code class="code">id t</code> <b>Returns</b> an id for this writer that is unique among all other writers</div>
    
 
      <pre><span><span class="keyword">val</span> fd : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a></code></span></pre>
      <div class="info"><code class="code">fd t</code> <b>Returns</b> the Fd.t used to create this writer</div>
    
 
      <pre><span><span class="keyword">val</span> set_fd : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="Fd.html#TYPEt">Fd.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">set_fd t fd</code> sets the fd used by <code class="code">t</code> for its underlying system calls.  It first waits
    until everything being sent to the current fd is flushed.  Of course, one must
    understand how the writer works and what one is doing to use this.</div>
    
 
      <pre><span><span class="keyword">val</span> write : <code class="type">?pos:int -&gt; ?len:int -&gt; <a href="Writer.html#TYPEt">t</a> -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write ?pos ?len t s</code> adds a job to the writer's queue of pending writes.  The
    contents of the string are copied to an internal buffer before write returns, so
    clients can do whatever they want with <code class="code">s</code> after that.</div>
    
 
      <pre><span><span class="keyword">val</span> write_bigstring : <code class="type">?pos:int -&gt; ?len:int -&gt; <a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Bigstring.html#TYPEt">Core.Std.Bigstring.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> write_substring : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Substring.html#TYPEt">Core.Std.Substring.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> write_bigsubstring : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Bigsubstring.html#TYPEt">Core.Std.Bigsubstring.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> writef : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; ('a, unit, string, unit) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> to_formatter : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../stdlib/Format.html#TYPEformatter">Format.formatter</a></code></span></pre>
      <div class="info"><code class="code">to_formatter t</code> <b>Returns</b> an OCaml-formatter that one can print to using
    TODO reference : Format.fprintf.  Note that flushing the formatter will only submit all buffered
    data to the writer, but does _not_ guarantee flushing to the operating system.</div>
    
 
      <pre><span><span class="keyword">val</span> write_char : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; char -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write_char t c</code> writes the character</div>
    
 
      <pre><span><span class="keyword">val</span> newline : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">newline t</code> is <code class="code">write_char t '\n'</code> </div>
    
 
      <pre><span><span class="keyword">val</span> write_line : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write_line t s</code> is <code class="code">write t s; newline t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> write_byte : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; int -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write_byte t i</code> writes one 8-bit integer (as the single character with that code).
    The given integer is taken modulo 256.</div>
    
 
      <pre><span><span class="keyword">val</span> write_sexp : <code class="type">?hum:bool -&gt; <a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> write_bin_prot : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; 'a <a href="../core/Std.Bin_prot.Type_class.html#TYPEwriter">Core.Std.Bin_prot.Type_class.writer</a> -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write_bin_prot</code> writes out a value using its bin_prot sizer/writer pair.  The format
    is the &quot;size-prefixed binary protocol&quot;, in which the length of the data is written
    before the data itself.  This is the format that Reader.read_bin_prot reads.</div>
    
 
      <pre><span><span class="keyword">val</span> write_marshal : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; flags:<a href="../stdlib/Marshal.html#TYPEextern_flags">Marshal.extern_flags</a> list -&gt; 'a -&gt; unit</code></span></pre>
      <div class="info">Serialize data using marshal and write it to the writer</div>
    
<br/>Unlike the <code class="code">write_</code> functions, all functions starting with <code class="code">schedule_</code> require
    flushing or closing of the writer after returning before it is safe to modify the
    bigstrings which were directly or indirectly passed to these functions.  The reason is
    that these bigstrings will be read from directly when writing; their contents is not
    copied to internal buffers.<br/>    This is important if users need to send the same large data string to a huge number of
    clients simultaneously (e.g. on a cluster), because these functions then avoid
    needlessly exhausting memory by sharing the data.<br/>
	  
 
      <pre><span><span class="keyword">val</span> schedule_bigstring : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; ?pos:int -&gt; ?len:int -&gt; <a href="../core/Std.Bigstring.html#TYPEt">Core.Std.Bigstring.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">schedule_bigstring t bstr</code> schedules a write of bigstring <code class="code">bstr</code>.
    It is not safe to change the bigstring until the writer has been
    successfully flushed or closed after this operation.</div>
    
 
      <pre><span><span class="keyword">val</span> schedule_bigsubstring : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Bigsubstring.html#TYPEt">Core.Std.Bigsubstring.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> schedule_iovec : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Bigstring.html#TYPEt">Core.Std.Bigstring.t</a> <a href="../core/Std.Unix.IOVec.html#TYPEt">Core.Std.Unix.IOVec.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">schedule_iovec t iovec</code> schedules a write of I/O-vector <code class="code">iovec</code>.  It is not safe to
    change the bigstrings underlying the I/O-vector until the writer has been successfully
    flushed or closed after this operation.</div>
    
 
      <pre><span><span class="keyword">val</span> schedule_iovecs : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Bigstring.html#TYPEt">Core.Std.Bigstring.t</a> <a href="../core/Std.Unix.IOVec.html#TYPEt">Core.Std.Unix.IOVec.t</a> <a href="../core/Std.Queue.html#TYPEt">Core.Std.Queue.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">schedule_iovecs t iovecs</code> like TODO reference : schedule_iovec, but takes a whole queue <code class="code">iovecs</code> of
    I/O-vectors as argument.  The queue is guaranteed to be empty when this function
    returns and can be modified.  It is not safe to change the bigstrings underlying the
    I/O-vectors until the writer has been successfully flushed or closed after this
    operation.</div>
    
 
      <pre><span><span class="keyword">val</span> flushed : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">flushed t</code> returns a deferred that will become determined when all prior writes
    complete (i.e. the <code class="code">write()</code> system call returns).  If a prior write fails, then the
    deferred will never become determined.<br/>    It is OK to call <code class="code">flushed t</code> after <code class="code">t</code> has been closed.</div>
    
 
      <pre><span><span class="keyword">val</span> flushed_time : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fsync : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> fdatasync : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; string -&gt; unit</code></span></pre>
      <div class="info"><code class="code">send t s</code> writes a string to the channel that can be read back
    using Reader.recv</div>
    
 
      <pre><span><span class="keyword">val</span> monitor : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="Import.Monitor.html#TYPEt">Import.Monitor.t</a></code></span></pre>
      <div class="info"><code class="code">monitor t</code> returns the writer's monitor.</div>
    
 
      <pre><span><span class="keyword">val</span> close : <code class="type">?force_close:unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a> -&gt; <a href="Writer.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">close ?force_close t</code> waits for the writer to be flushed, and then calls <code class="code">Unix.close</code>
    on the underlying file descriptor.  <code class="code">force_close</code> causes the <code class="code">Unix.close</code> to happen
    even if the flush hangs.  By default <code class="code">force_close</code> is <code class="code">Deferred.never ()</code> for files
    and <code class="code">after (sec 5)</code> for other types of file descriptors (e.g. sockets).  If the close
    is forced, data in the writer's buffer may not be written to the file descriptor.  You
    can check this by calling <code class="code">bytes_to_write</code> after <code class="code">close</code> finishes.<br/>    <code class="code">close</code> will raise an exception if the <code class="code">Unix.close</code> on the underlying file descriptor
    fails.<br/>    It is required to call <code class="code">close</code> on a writer in order to close the underlying file
    descriptor.  Not doing so will cause a file descriptor leak.  It also will cause a
    space leak, because until the writer is closed, it is held on to in order to flush the
    writer on shutdown.<br/>    It is an error to call other operations on <code class="code">t</code> after <code class="code">close t</code> has been called, except
    that calls of <code class="code">close</code> subsequent to the original call to <code class="code">close</code> will return the same
    deferred as the original call.<br/>    <code class="code">close_finished t</code> becomes determined after <code class="code">t</code>'s underlying file descriptor has been
    closed, i.e. it is the same as the result of <code class="code">close</code>.  <code class="code">close_finished</code> differs from
    <code class="code">close</code> in that it does not have the side effect of initiating a close.<br/>    <code class="code">is_closed t</code> returns <code class="code">true</code> iff <code class="code">close t</code> has been called.<br/>    <code class="code">is_open t</code> is <code class="code">not (is_closed t)</code> </div>
    
 
      <pre><span><span class="keyword">val</span> close_finished : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_closed : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_open : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bytes_to_write : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; int</code></span></pre>
      <div class="info"><code class="code">bytes_to_write t</code> returns how many bytes have been requested to write but have not
    yet been written.</div>
    
 
      <pre><span><span class="keyword">val</span> bytes_written : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Int63.html#TYPEt">Core.Std.Int63.t</a></code></span></pre>
      <div class="info"><code class="code">bytes_written t</code> returns how many bytes have been written.</div>
    
 
      <pre><span><span class="keyword">val</span> bytes_received : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../core/Std.Int63.html#TYPEt">Core.Std.Int63.t</a></code></span></pre>
      <div class="info"><code class="code">bytes_received t</code> returns how many bytes have been received by the writer.  As long
    as the writer is running, <code class="code">bytes_received = bytes_written + bytes_to_write</code>.</div>
    
<br/><code class="code">with_file_atomic ?temp_file ?perm ?fsync file ~f</code> creates a writer to a temp file,
    feeds that writer to <code class="code">f</code>, and when the result of <code class="code">f</code> becomes determined, atomically
    moves (i.e. uses <code class="code">Unix.rename</code>) the temp file to <code class="code">file</code>.  If <code class="code">file</code> currently exists,
    it will be replaced, even if it is read only.  The temp file will be <code class="code">file</code> (or
    <code class="code">temp_file</code> if supplied) suffixed by a unique random sequence of six characters.  The
    temp file may need to be removed in case of a crash so it may be prudent to choose a
    temp file that can be easily found by cleanup tools.<br/>    If <code class="code">fsync</code> is <code class="code">true</code>, the temp file will be flushed to disk before it takes the place
    of the target file, thus guaranteeing that the target file will always be in a sound
    state, even after a machine crash.  Since synchronization is extremely slow, this is
    not the default.  Think carefully about the event of machine crashes and whether you
    may need this option!<br/>    We intend for <code class="code">with_file_atomic</code> to preserve the behavior of the <code class="code">open</code> system call,
    so if <code class="code">file</code> does not exist, we will apply the umask to <code class="code">perm</code>.  If <code class="code">file</code> does exist,
    <code class="code">perm</code> will default to the file's current permissions rather than 0o666.<br/>    <code class="code">save</code> is a special case of <code class="code">with_file_atomic</code> that atomically writes the given
    string to the specified file.<br/>    <code class="code">save_sexp</code> is a special case of <code class="code">with_file_atomic</code> that atomically writes the
    given sexp to the specified file.<br/>
	  
 
      <pre><span><span class="keyword">val</span> with_file_atomic : <code class="type">?temp_file:string -&gt;
?perm:<a href="../core/Std.Unix.html#TYPEfile_perm">Core.Std.Unix.file_perm</a> -&gt;
?fsync:bool -&gt;
string -&gt; f:(<a href="Writer.html#TYPEt">t</a> -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt; 'a <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save : <code class="type">?temp_file:string -&gt;
?perm:<a href="../core/Std.Unix.html#TYPEfile_perm">Core.Std.Unix.file_perm</a> -&gt;
?fsync:bool -&gt; string -&gt; contents:string -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> save_lines : <code class="type">?temp_file:string -&gt;
?perm:<a href="../core/Std.Unix.html#TYPEfile_perm">Core.Std.Unix.file_perm</a> -&gt;
?fsync:bool -&gt; string -&gt; string list -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">save_lines file lines</code> writes all lines in <code class="code">lines</code> to <code class="code">file</code>, with each line followed
    by a newline.</div>
    
 
      <pre><span><span class="keyword">val</span> save_sexp : <code class="type">?temp_file:string -&gt;
?perm:<a href="../core/Std.Unix.html#TYPEfile_perm">Core.Std.Unix.file_perm</a> -&gt;
?fsync:bool -&gt;
?hum:bool -&gt; string -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> transfer : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; 'a <a href="Import.Pipe.Reader.html#TYPEt">Import.Pipe.Reader.t</a> -&gt; ('a -&gt; unit) -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">transfer t pipe_r f</code> repeatedly pulls values from <code class="code">pipe_r</code>, and feeds them to <code class="code">f</code>,
    which should in turn write them to <code class="code">t</code>.  It provides pushback to <code class="code">pipe_r</code> by not
    reading when <code class="code">t</code> cannot keep up with the data being pushed in.  The result becomes
    determined when <code class="code">pipe_r</code> reaches its EOF.<br/>    <code class="code">transfer</code> causes <code class="code">Pipe.flushed</code> on <code class="code">pipe_r</code>'s writer to ensure that the bytes have
    been flushed to <code class="code">t</code> before returning.  It also waits on <code class="code">Pipe.upstream_flushed</code> at
    shutdown.</div>
    
 
      <pre><span><span class="keyword">val</span> pipe : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; string <a href="Import.Pipe.Writer.html#TYPEt">Import.Pipe.Writer.t</a></code></span></pre>
      <div class="info"><code class="code">pipe t</code> returns the writing end of a pipe attached to <code class="code">t</code> that pushes back when <code class="code">t</code>
    cannot keep up with the data being pushed in.  Closing the pipe will close <code class="code">t</code>.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Writer.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">io_stats</code> Overall IO statistics for all writers<br/>
	  
<br/><code class="code">stdout</code> and <code class="code">stderr</code> are writers for file descriptors 1 and 2.  They are lazy because
    we don't want to create them in all programs that happen to link with async.<br/>    When either <code class="code">stdout</code> or <code class="code">stderr</code> is created, they both are created.  Furthermore, if
    they point to the same inode, then they will be the same writer to <code class="code">Fd.stdout</code>.  This
    can be confusing, because <code class="code">fd (force stderr)</code> will be <code class="code">Fd.stdout</code>, not <code class="code">Fd.stderr</code>.
    And subsequent modifications of <code class="code">Fd.stderr</code> will have no effect on <code class="code">Writer.stderr</code>.<br/>    Unfortunately, the sharing is necessary because async uses OS threads to do write()
    syscalls using the writer buffer.  When calling a program that redirects stdout and
    stderr to the same file, as in:<br/>    <span class="verbatim">      foo.exe &gt;/tmp/z.file 2&gt;&amp;1
    </span><br/>    if <code class="code">Writer.stdout</code> and <code class="code">Writer.stderr</code> weren't the same writer, then they could have
    threads simultaneously writing to the same file, which could easily cause data loss.<br/>
	  
 
      <pre><span><span class="keyword">val</span> buffer_age_limit_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> __buffer_age_limit_of_sexp__ : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Type_class.html#TYPEt">Core.Std.Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Read_ml.html#TYPEreader">Core.Std.Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_buffer_age_limit_ : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_buffer_age_limit__ : <code class="type">(int -&gt; <a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a>) <a href="../core/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Type_class.html#TYPEreader">Core.Std.Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Size.html#TYPEsizer">Core.Std.Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Write_ml.html#TYPEwriter">Core.Std.Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_buffer_age_limit_ : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Unsafe_write_c.html#TYPEwriter">Core.Std.Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_buffer_age_limit : <code class="type"><a href="Writer.html#TYPEbuffer_age_limit">buffer_age_limit</a> <a href="../core/Std.Bin_prot.Type_class.html#TYPEwriter">Core.Std.Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/><code class="code">create ?buf_len ?syscall ?buffer_age_limit fd</code> creates a new writer.  The file
    descriptor fd should not be in use for writing by anything else.<br/>    By default, a write system call occurs at the end of a cycle in which bytes were
    written.  One can supply ~syscall:(`Periodic span) to get better performance.  This
    batches writes together, doing the write system call periodically according to the
    supplied span.<br/>    A writer can asynchronously fail if the underlying write syscall returns an error,
    e.g. EBADF, EPIPE, ECONNRESET, ....<br/>    <code class="code">buffer_age_limit</code> specifies how backed up you can get before raising an exception.
    Default is 2 minutes.  You can supply <code class="code">`Unlimited</code> to turn off buffer-age checks.<br/>    <code class="code">raise_when_consumer_leaves</code> specifies whether the writer should raise an exception
    when the consumer receiving bytes from the writer leaves, i.e. in Unix, the write
    syscall returns EPIPE or ECONNRESET.  If <code class="code">not raise_when_consumer_leaves</code>, then the
    writer will silently drop all writes after the consumer leaves, and the writer will
    eventually fail with a writer-buffer-older-than error if the application remains open
    long enough.<br/>
	  
<br/><code class="code">set_raise_when_consumer_leaves t bool</code> sets the <code class="code">raise_when_consumer_leaves</code> flag of
    <code class="code">t</code>, which determies how <code class="code">t</code> responds to a write system call raising EPIPE and
    ECONNRESET (see <code class="code">create</code>).<br/>
	  
<br/><code class="code">set_buffer_age_limit t buffer_age_limit</code> replaces the existing buffer age limit with
    the new one.  This is useful for stdout and stderr, which are lazily created in a
    context that does not allow applications to specify <code class="code">buffer_age_limit</code>.<br/>
	  
<br/><code class="code">consumer_left t</code> returns a deferred that becomes determined when <code class="code">t</code> attempts to
    write to a pipe that broke because the consumer on the other side left.<br/>
	  
<br/><code class="code">open_file file</code> opens <code class="code">file</code> for writing and returns a writer for it.  It uses
    <code class="code">Unix_syscalls.openfile</code> to open the file.<br/>
	  
<br/><code class="code">with_file ~file f</code> opens <code class="code">file</code> for writing, creates a writer <code class="code">t</code>, and runs <code class="code">f t</code> to
    obtain a deferred <code class="code">d</code>.  When <code class="code">d</code> becomes determined, the writer is closed.  When the
    close completes, the result of <code class="code">with_file</code> becomes determined with the value of <code class="code">d</code>.<br/>    There is no need to call <code class="code">Writer.flushed</code> to ensure that <code class="code">with_file</code> waits for the
    writer to be flushed before closing it.  <code class="code">Writer.close</code> will already wait for the
    flush.<br/>
	  
<br/><code class="code">id t</code> <b>Returns</b> an id for this writer that is unique among all other writers<br/>
	  
<br/><code class="code">fd t</code> <b>Returns</b> the Fd.t used to create this writer<br/>
	  
<br/><code class="code">set_fd t fd</code> sets the fd used by <code class="code">t</code> for its underlying system calls.  It first waits
    until everything being sent to the current fd is flushed.  Of course, one must
    understand how the writer works and what one is doing to use this.<br/>
	  
<br/><code class="code">write ?pos ?len t s</code> adds a job to the writer's queue of pending writes.  The
    contents of the string are copied to an internal buffer before write returns, so
    clients can do whatever they want with <code class="code">s</code> after that.<br/>
	  
<br/><code class="code">to_formatter t</code> <b>Returns</b> an OCaml-formatter that one can print to using
    TODO reference : Format.fprintf.  Note that flushing the formatter will only submit all buffered
    data to the writer, but does _not_ guarantee flushing to the operating system.<br/>
	  
<br/><code class="code">write_char t c</code> writes the character<br/>
	  
<br/><code class="code">newline t</code> is <code class="code">write_char t '\n'</code> <br/>
	  
<br/><code class="code">write_line t s</code> is <code class="code">write t s; newline t</code>.<br/>
	  
<br/><code class="code">write_byte t i</code> writes one 8-bit integer (as the single character with that code).
    The given integer is taken modulo 256.<br/>
	  
<br/><code class="code">write_bin_prot</code> writes out a value using its bin_prot sizer/writer pair.  The format
    is the &quot;size-prefixed binary protocol&quot;, in which the length of the data is written
    before the data itself.  This is the format that Reader.read_bin_prot reads.<br/>
	  
<br/>Serialize data using marshal and write it to the writer<br/>
	  
<br/>Unlike the <code class="code">write_</code> functions, all functions starting with <code class="code">schedule_</code> require
    flushing or closing of the writer after returning before it is safe to modify the
    bigstrings which were directly or indirectly passed to these functions.  The reason is
    that these bigstrings will be read from directly when writing; their contents is not
    copied to internal buffers.<br/>    This is important if users need to send the same large data string to a huge number of
    clients simultaneously (e.g. on a cluster), because these functions then avoid
    needlessly exhausting memory by sharing the data.<br/>
	  
<br/><code class="code">schedule_bigstring t bstr</code> schedules a write of bigstring <code class="code">bstr</code>.
    It is not safe to change the bigstring until the writer has been
    successfully flushed or closed after this operation.<br/>
	  
<br/><code class="code">schedule_iovec t iovec</code> schedules a write of I/O-vector <code class="code">iovec</code>.  It is not safe to
    change the bigstrings underlying the I/O-vector until the writer has been successfully
    flushed or closed after this operation.<br/>
	  
<br/><code class="code">schedule_iovecs t iovecs</code> like TODO reference : schedule_iovec, but takes a whole queue <code class="code">iovecs</code> of
    I/O-vectors as argument.  The queue is guaranteed to be empty when this function
    returns and can be modified.  It is not safe to change the bigstrings underlying the
    I/O-vectors until the writer has been successfully flushed or closed after this
    operation.<br/>
	  
<br/><code class="code">flushed t</code> returns a deferred that will become determined when all prior writes
    complete (i.e. the <code class="code">write()</code> system call returns).  If a prior write fails, then the
    deferred will never become determined.<br/>    It is OK to call <code class="code">flushed t</code> after <code class="code">t</code> has been closed.<br/>
	  
<br/><code class="code">send t s</code> writes a string to the channel that can be read back
    using Reader.recv<br/>
	  
<br/><code class="code">monitor t</code> returns the writer's monitor.<br/>
	  
<br/><code class="code">close ?force_close t</code> waits for the writer to be flushed, and then calls <code class="code">Unix.close</code>
    on the underlying file descriptor.  <code class="code">force_close</code> causes the <code class="code">Unix.close</code> to happen
    even if the flush hangs.  By default <code class="code">force_close</code> is <code class="code">Deferred.never ()</code> for files
    and <code class="code">after (sec 5)</code> for other types of file descriptors (e.g. sockets).  If the close
    is forced, data in the writer's buffer may not be written to the file descriptor.  You
    can check this by calling <code class="code">bytes_to_write</code> after <code class="code">close</code> finishes.<br/>    <code class="code">close</code> will raise an exception if the <code class="code">Unix.close</code> on the underlying file descriptor
    fails.<br/>    It is required to call <code class="code">close</code> on a writer in order to close the underlying file
    descriptor.  Not doing so will cause a file descriptor leak.  It also will cause a
    space leak, because until the writer is closed, it is held on to in order to flush the
    writer on shutdown.<br/>    It is an error to call other operations on <code class="code">t</code> after <code class="code">close t</code> has been called, except
    that calls of <code class="code">close</code> subsequent to the original call to <code class="code">close</code> will return the same
    deferred as the original call.<br/>    <code class="code">close_finished t</code> becomes determined after <code class="code">t</code>'s underlying file descriptor has been
    closed, i.e. it is the same as the result of <code class="code">close</code>.  <code class="code">close_finished</code> differs from
    <code class="code">close</code> in that it does not have the side effect of initiating a close.<br/>    <code class="code">is_closed t</code> returns <code class="code">true</code> iff <code class="code">close t</code> has been called.<br/>    <code class="code">is_open t</code> is <code class="code">not (is_closed t)</code> <br/>
	  
<br/><code class="code">bytes_to_write t</code> returns how many bytes have been requested to write but have not
    yet been written.<br/>
	  
<br/><code class="code">bytes_written t</code> returns how many bytes have been written.<br/>
	  
<br/><code class="code">bytes_received t</code> returns how many bytes have been received by the writer.  As long
    as the writer is running, <code class="code">bytes_received = bytes_written + bytes_to_write</code>.<br/>
	  
<br/><code class="code">with_file_atomic ?temp_file ?perm ?fsync file ~f</code> creates a writer to a temp file,
    feeds that writer to <code class="code">f</code>, and when the result of <code class="code">f</code> becomes determined, atomically
    moves (i.e. uses <code class="code">Unix.rename</code>) the temp file to <code class="code">file</code>.  If <code class="code">file</code> currently exists,
    it will be replaced, even if it is read only.  The temp file will be <code class="code">file</code> (or
    <code class="code">temp_file</code> if supplied) suffixed by a unique random sequence of six characters.  The
    temp file may need to be removed in case of a crash so it may be prudent to choose a
    temp file that can be easily found by cleanup tools.<br/>    If <code class="code">fsync</code> is <code class="code">true</code>, the temp file will be flushed to disk before it takes the place
    of the target file, thus guaranteeing that the target file will always be in a sound
    state, even after a machine crash.  Since synchronization is extremely slow, this is
    not the default.  Think carefully about the event of machine crashes and whether you
    may need this option!<br/>    We intend for <code class="code">with_file_atomic</code> to preserve the behavior of the <code class="code">open</code> system call,
    so if <code class="code">file</code> does not exist, we will apply the umask to <code class="code">perm</code>.  If <code class="code">file</code> does exist,
    <code class="code">perm</code> will default to the file's current permissions rather than 0o666.<br/>    <code class="code">save</code> is a special case of <code class="code">with_file_atomic</code> that atomically writes the given
    string to the specified file.<br/>    <code class="code">save_sexp</code> is a special case of <code class="code">with_file_atomic</code> that atomically writes the
    given sexp to the specified file.<br/>
	  
<br/><code class="code">save_lines file lines</code> writes all lines in <code class="code">lines</code> to <code class="code">file</code>, with each line followed
    by a newline.<br/>
	  
<br/><code class="code">transfer t pipe_r f</code> repeatedly pulls values from <code class="code">pipe_r</code>, and feeds them to <code class="code">f</code>,
    which should in turn write them to <code class="code">t</code>.  It provides pushback to <code class="code">pipe_r</code> by not
    reading when <code class="code">t</code> cannot keep up with the data being pushed in.  The result becomes
    determined when <code class="code">pipe_r</code> reaches its EOF.<br/>    <code class="code">transfer</code> causes <code class="code">Pipe.flushed</code> on <code class="code">pipe_r</code>'s writer to ensure that the bytes have
    been flushed to <code class="code">t</code> before returning.  It also waits on <code class="code">Pipe.upstream_flushed</code> at
    shutdown.<br/>
	  
<br/><code class="code">pipe t</code> returns the writing end of a pipe attached to <code class="code">t</code> that pushes back when <code class="code">t</code>
    cannot keep up with the data being pushed in.  Closing the pipe will close <code class="code">t</code>.<br/>
	  

<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">unit -&gt; 'a <a href="Import.Pipe.Reader.html#TYPEt">Import.Pipe.Reader.t</a> * 'a <a href="Thread_safe_pipe.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create ()</code> returns a reader end, which must be used inside async, and a writer end,
    which must be used outside async.  <code class="code">create</code> can be called inside or outside async.</div>
    
<br/>All the following functions must be called outside async.  They behave as their
    counterpart in the TODO reference : Pipe module.<br/>
	  
 
      <pre><span><span class="keyword">val</span> pushback : <code class="type">'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">pushback writer</code> blocks the current thread until the pipe is empty or closed.</div>
    
 
      <pre><span><span class="keyword">val</span> write_without_pushback' : <code class="type">?wakeup_scheduler:bool -&gt; 'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; 'a <a href="../core/Std.Queue.html#TYPEt">Core.Std.Queue.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write_without_pushback'</code> and <code class="code">write_without_pushback</code> transfer the element(s) into
    the pipe and return immediately.</div>
    
 
      <pre><span><span class="keyword">val</span> write_without_pushback : <code class="type">?wakeup_scheduler:bool -&gt; 'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> write' : <code class="type">'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; 'a <a href="../core/Std.Queue.html#TYPEt">Core.Std.Queue.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">write'</code> and <code class="code">write</code> transfer the element(s) into the pipe and block the current
    thread until the pipe is empty or closed (like TODO reference : pushback).</div>
    
 
      <pre><span><span class="keyword">val</span> write : <code class="type">'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close : <code class="type">'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> is_closed : <code class="type">'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> closed : <code class="type">'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">closed writer</code> blocks the current thread until the pipe is closed.</div>
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type">('a -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a>) -&gt; 'a <a href="Thread_safe_pipe.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
<br/><code class="code">create ()</code> returns a reader end, which must be used inside async, and a writer end,
    which must be used outside async.  <code class="code">create</code> can be called inside or outside async.<br/>
	  
<br/>All the following functions must be called outside async.  They behave as their
    counterpart in the TODO reference : Pipe module.<br/>
	  
<br/><code class="code">pushback writer</code> blocks the current thread until the pipe is empty or closed.<br/>
	  
<br/><code class="code">write_without_pushback'</code> and <code class="code">write_without_pushback</code> transfer the element(s) into
    the pipe and return immediately.<br/>
	  
<br/><code class="code">write'</code> and <code class="code">write</code> transfer the element(s) into the pipe and block the current
    thread until the pipe is empty or closed (like TODO reference : pushback).<br/>
	  
<br/><code class="code">closed writer</code> blocks the current thread until the pipe is closed.<br/>
	  

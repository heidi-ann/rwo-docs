<pre><span id="TYPEt"><span class="keyword">type</span> t </span>= <code class="type"><a href="../core/Std.Unix.Inet_addr.html#TYPEt">Core.Std.Unix.Inet_addr.t</a></code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">-</button>
	<pre><span class="keyword">include</span> <code class="code"><a href="../core/Std.Comparable.S.html">Core.Std.Comparable.S</a></code> with type t = <a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></pre>
	<div class="content">
	<div file="../core/Std.Comparable.S.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> of_string : <code class="type">string -&gt; <a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></code></span></pre>
      <div class="info">same as <code class="code">Core.Unix</code> </div>
    
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bind_any : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bind_any_inet6 : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> localhost : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> localhost_inet6 : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> of_string_or_getbyname : <code class="type">string -&gt; <a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">of_string_or_getbyname hostname</code> does a DNS lookup of hostname and returns the
      resulting IP address.  The implemenation sequentializes all calls so that only a
      single call is active at a time.  The is because we've observed thread safety issues
      with certain versions of winbind using &quot;wins&quot; name resolution.</div>
    
 
      <pre><span><span class="keyword">val</span> compare : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> -&gt; <a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> -&gt; int</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> t_of_sexp : <code class="type"><a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a> -&gt; <a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> sexp_of_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> -&gt; <a href="../sexplib/Sexp.html#TYPEt">Sexplib.Sexp.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Type_class.html#TYPEt">Core.Std.Bin_prot.Type_class.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Read_ml.html#TYPEreader">Core.Std.Bin_prot.Read_ml.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t_ : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_read_t__ : <code class="type">(int -&gt; <a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a>) <a href="../core/Std.Bin_prot.Unsafe_read_c.html#TYPEreader">Core.Std.Bin_prot.Unsafe_read_c.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_reader_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Type_class.html#TYPEreader">Core.Std.Bin_prot.Type_class.reader</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_size_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Size.html#TYPEsizer">Core.Std.Bin_prot.Size.sizer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Write_ml.html#TYPEwriter">Core.Std.Bin_prot.Write_ml.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_write_t_ : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Unsafe_write_c.html#TYPEwriter">Core.Std.Bin_prot.Unsafe_write_c.writer</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> bin_writer_t : <code class="type"><a href="Unix_syscalls.Inet_addr.html#TYPEt">t</a> <a href="../core/Std.Bin_prot.Type_class.html#TYPEwriter">Core.Std.Bin_prot.Type_class.writer</a></code></span></pre>
      
    
<br/>same as <code class="code">Core.Unix</code> <br/>
	  
<br/><code class="code">127.0.0.1</code> <br/>
	  
<br/>(<code class="code">::1</code>)<br/>
	  
<br/><code class="code">of_string_or_getbyname hostname</code> does a DNS lookup of hostname and returns the
      resulting IP address.  The implemenation sequentializes all calls so that only a
      single call is active at a time.  The is because we've observed thread safety issues
      with certain versions of winbind using &quot;wins&quot; name resolution.<br/>
	  

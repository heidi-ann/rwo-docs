<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Level.html">Level</a> : <code class="code">sig</code> <a href="Log.Level.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Log.Level.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Message.html">Message</a> : <code class="code">sig</code> <a href="Log.Message.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Log.Message.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Rotation.html">Rotation</a> : <code class="code">sig</code> <a href="Log.Rotation.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Log.Rotation.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Output.html">Output</a> : <code class="code">sig</code> <a href="Log.Output.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Log.Output.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Blocking.html">Blocking</a> : <code class="code">sig</code> <a href="Log.Blocking.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Log.Blocking.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module type</span> <a href="Log.Global_intf.html">Global_intf</a> = <code class="type"><code class="code">sig</code> <a href="Log.Global_intf.html">..</a> <code class="code">end</code></code></pre>
	<div class="content" style="display:none">
	<div file="Log.Global_intf.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Make_global.html">Make_global</a> : <div class="sig_block"><code class="code">functor (</code><code class="code">Empty</code><code class="code"> : </code><code class="code">sig</code> <a href="Log.Make_global.Anon_10.html">..</a> <code class="code">end</code><code class="code">) -&gt; </code><code class="code"><a href="Log.Global_intf.html">Global_intf</a></code></div></pre>
	<div class="content" style="display:none">
	<div file="Log.Make_global.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Global.html">Global</a> : <code class="code"><a href="Log.Global_intf.html">Global_intf</a></code></pre>
	<div class="content" style="display:none">
	<div file="Log.Global.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> set_level : <code class="type"><a href="Log.html#TYPEt">t</a> -&gt; <a href="Log.Level.html#TYPEt">Level.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_level</code> sets the level of the given log.  Messages sent at a level less than the
    current level will not be output.</div>
    
 
      <pre><span><span class="keyword">val</span> set_output : <code class="type"><a href="Log.html#TYPEt">t</a> -&gt; <a href="Log.Output.html#TYPEt">Output.t</a> list -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_output</code> changes the output type of the log, which can be useful when daemonizing.
    The new output type will be applied to all subsequent messages.</div>
    
 
      <pre><span><span class="keyword">val</span> close : <code class="type"><a href="Log.html#TYPEt">t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">close</code> closes a log so that further write attempts will raise an error.</div>
    
 
      <pre><span><span class="keyword">val</span> flushed : <code class="type"><a href="Log.html#TYPEt">t</a> -&gt; unit <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">flushed</code> returns a Deferred.t that is fulfilled when the last message delivered to t
    before the call to flushed is out the door.</div>
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">level:<a href="Log.Level.html#TYPEt">Level.t</a> -&gt; output:<a href="Log.Output.html#TYPEt">Output.t</a> list -&gt; <a href="Log.html#TYPEt">t</a></code></span></pre>
      <div class="info"><code class="code">create</code> create a new log</div>
    
 
      <pre><span><span class="keyword">val</span> raw : <code class="type">?tags:(string * string) list -&gt; <a href="Log.html#TYPEt">t</a> -&gt; ('a, unit, string, unit) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">raw</code> printf like logging for raw (no level) messages.  Raw messages are still
    output with a timestamp.</div>
    
 
      <pre><span><span class="keyword">val</span> debug : <code class="type">?tags:(string * string) list -&gt; <a href="Log.html#TYPEt">t</a> -&gt; ('a, unit, string, unit) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">debug</code> printf like logging at the `Debug log level</div>
    
 
      <pre><span><span class="keyword">val</span> info : <code class="type">?tags:(string * string) list -&gt; <a href="Log.html#TYPEt">t</a> -&gt; ('a, unit, string, unit) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">info</code> printf like logging at the `Info log level</div>
    
 
      <pre><span><span class="keyword">val</span> error : <code class="type">?tags:(string * string) list -&gt; <a href="Log.html#TYPEt">t</a> -&gt; ('a, unit, string, unit) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">error</code> printf like logging at the `Error log level</div>
    
 
      <pre><span><span class="keyword">val</span> printf : <code class="type">?tags:(string * string) list -&gt;
?level:<a href="Log.Level.html#TYPEt">Level.t</a> -&gt; <a href="Log.html#TYPEt">t</a> -&gt; ('a, unit, string, unit) <a href="../stdlib/Pervasives.html#TYPEformat4">format4</a> -&gt; 'a</code></span></pre>
      <div class="info"><code class="code">printf</code> generalized printf style logging</div>
    
 
      <pre><span><span class="keyword">val</span> sexp : <code class="type">?tags:(string * string) list -&gt;
?level:<a href="Log.Level.html#TYPEt">Level.t</a> -&gt; <a href="Log.html#TYPEt">t</a> -&gt; 'a -&gt; ('a -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a>) -&gt; unit</code></span></pre>
      <div class="info"><code class="code">sexp</code> logging of values without first converting them to a string.  In the case
    where the log level would discard this message no conversion will ever be done.</div>
    
 
      <pre><span><span class="keyword">val</span> of_lazy : <code class="type">?tags:(string * string) list -&gt;
?level:<a href="Log.Level.html#TYPEt">Level.t</a> -&gt; <a href="Log.html#TYPEt">t</a> -&gt; string <a href="../core/Std.Lazy.html#TYPEt">Core.Std.Lazy.t</a> -&gt; unit</code></span></pre>
      <div class="info"><code class="code">of_lazy</code> logging of lazy values.  In the case where the log level would discard this
    message no evaluation will ever be forced.</div>
    
 
      <pre><span><span class="keyword">val</span> message : <code class="type"><a href="Log.html#TYPEt">t</a> -&gt; <a href="Log.Message.html#TYPEt">Message.t</a> -&gt; unit</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Log.Reader.html">Reader</a> : <code class="code">sig</code> <a href="Log.Reader.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Log.Reader.html.contents" class="content_to_load"> </div>
	</div>
  </div>

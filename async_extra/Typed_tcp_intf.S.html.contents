<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Typed_tcp_intf.S.Client_message.html">Client_message</a> : <code class="code">sig</code> <a href="Typed_tcp_intf.S.Client_message.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Typed_tcp_intf.S.Client_message.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Typed_tcp_intf.S.Server_message.html">Server_message</a> : <code class="code">sig</code> <a href="Typed_tcp_intf.S.Server_message.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Typed_tcp_intf.S.Server_message.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Typed_tcp_intf.S.Client_id.html">Client_id</a> : <code class="code"><a href="../core/Std.Unique_id.html">Core.Std.Unique_id</a></code></pre>
	<div class="content" style="display:none">
	<div file="Typed_tcp_intf.S.Client_id.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Typed_tcp_intf.S.Server_read_result.html">Server_read_result</a> : <code class="code">sig</code> <a href="Typed_tcp_intf.S.Server_read_result.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Typed_tcp_intf.S.Server_read_result.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPEt"><span class="keyword">type</span> t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">?max_pending_connections:int -&gt;
?verbose:bool -&gt;
?log_disconnects:bool -&gt;
?buffer_age_limit:[ `At_most of <a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> | `Unlimited ] -&gt;
port:int -&gt;
auth:(<a href="Import.Unix.Inet_addr.html#TYPEt">Import.Unix.Inet_addr.t</a> -&gt;
      int -&gt; [ `Allow | `Deny of string option ] <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt;
unit -&gt; <a href="Typed_tcp_intf.S.html#TYPEt">t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> listen : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; <a href="Typed_tcp_intf.S.Server_read_result.html#TYPEt">Server_read_result.t</a> <a href="Import.Pipe.Reader.html#TYPEt">Import.Pipe.Reader.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> listen_ignore_errors : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; (<a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> * <a href="Typed_tcp_intf.S.Client_message.html#TYPEt">Client_message.t</a>) <a href="Import.Pipe.Reader.html#TYPEt">Import.Pipe.Reader.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> close : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; <a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> flushed_time : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt;
<a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> -&gt;
[ `Client_not_found | `Flushed of <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a> ]</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> has_client_id : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; <a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> -&gt; bool</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt;
<a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> -&gt;
<a href="Typed_tcp_intf.S.Server_message.html#TYPEt">Server_message.t</a> -&gt;
[ `Drop of exn | `Sent of <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> ] <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send_ignore_errors : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; <a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> -&gt; <a href="Typed_tcp_intf.S.Server_message.html#TYPEt">Server_message.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send_to_all : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; <a href="Typed_tcp_intf.S.Server_message.html#TYPEt">Server_message.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> client_addr_port : <code class="type"><a href="Typed_tcp_intf.S.html#TYPEt">t</a> -&gt; <a href="Typed_tcp_intf.S.Client_id.html#TYPEt">Client_id.t</a> -&gt; (<a href="Import.Unix.Inet_addr.html#TYPEt">Import.Unix.Inet_addr.t</a> * int) option</code></span></pre>
      
    

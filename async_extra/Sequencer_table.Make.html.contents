<pre><span id="TYPEt"><span class="keyword">type</span> <code class="type">'a </code>t </span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> create : <code class="type">unit -&gt; 'a <a href="Sequencer_table.Make.html#TYPEt">t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> enqueue : <code class="type">'a <a href="Sequencer_table.Make.html#TYPEt">t</a> -&gt;
key:Key.t -&gt; ('a option -&gt; 'b <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a>) -&gt; 'b <a href="Import.Deferred.html#TYPEt">Import.Deferred.t</a></code></span></pre>
      <div class="info"><code class="code">enqueue t ~key f</code> enqueues <code class="code">f</code> for <code class="code">key</code>.  <code class="code">f</code> will be called with the state of
      <code class="code">key</code> when invoked.  If there is no pending job for <code class="code">key</code>, <code class="code">f</code> will be called
      immediately.  If <code class="code">f</code> raises, then the exception will be raised to the monitor in
      effect when <code class="code">enqueue</code> was called.  Subsequent jobs for <code class="code">key</code> will proceed.</div>
    
 
      <pre><span><span class="keyword">val</span> set_state : <code class="type">'a <a href="Sequencer_table.Make.html#TYPEt">t</a> -&gt; key:Key.t -&gt; 'a option -&gt; unit</code></span></pre>
      <div class="info"><code class="code">set_state t key state_opt</code> sets the state for <code class="code">key</code> immediately.  The state will be
      kept internally until set to <code class="code">None</code> </div>
    
 
      <pre><span><span class="keyword">val</span> find_state : <code class="type">'a <a href="Sequencer_table.Make.html#TYPEt">t</a> -&gt; Key.t -&gt; 'a option</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> num_unfinished_jobs : <code class="type">'a <a href="Sequencer_table.Make.html#TYPEt">t</a> -&gt; Key.t -&gt; int</code></span></pre>
      <div class="info"><code class="code">num_unfinished_jobs t key</code> returns the number of jobs for <code class="code">key</code> including including
      pending and running.</div>
    
 
      <pre><span><span class="keyword">val</span> mem : <code class="type">'a <a href="Sequencer_table.Make.html#TYPEt">t</a> -&gt; Key.t -&gt; bool</code></span></pre>
      <div class="info"><code class="code">mem t key</code> returns <code class="code">true</code> if there is state or an pending/running job</div>
    
 
      <pre><span><span class="keyword">val</span> fold : <code class="type">'a <a href="Sequencer_table.Make.html#TYPEt">t</a> -&gt; init:'b -&gt; f:('b -&gt; key:Key.t -&gt; 'a option -&gt; 'b) -&gt; 'b</code></span></pre>
      <div class="info">Fold over keys with states or pending/running jobs. It's safe to mutate (<code class="code">enqueue</code>
      or <code class="code">set_state</code>) when folding</div>
    

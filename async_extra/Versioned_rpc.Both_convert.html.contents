<br/><code class="code">Both_convert</code> rpcs combine features of both caller-converts and callee-converts
      versioning schemes in such a way that one can smoothly add a new version of the rpc
      to a shared library, and it doesn't matter whether the callee or caller upgrades to
      the latest version of the shared library first, the new version will not be
      exercised until both sides support it.<br/>      <pre class="codepre"><code class="code">
                      (conv)   (conv)                          (conv)   (conv)
                      caller   callee                          callee   caller
                      |        |                               |        |
                      |        |                               |        |
         Q.caller ----&gt;-- Q1 --&gt;-.             (impl)        .-&gt;-- R1 --&gt;---- R.caller
                 \                \            callee       /                /
                  \---&gt;-- Q2 --&gt;---\           |           /---&gt;-- R2 --&gt;---/
                   \                \          |          /                /
                    `-&gt;-- Q3 --&gt;---- Q.callee --&gt; R.callee ----&gt;-- R3 --&gt;-'
      </code></pre>
<br/>
	  
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_rpc.Both_convert.Plain.html">Plain</a> : <code class="code">sig</code> <a href="Versioned_rpc.Both_convert.Plain.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_rpc.Both_convert.Plain.html.contents" class="content_to_load"> </div>
	</div>
  </div>

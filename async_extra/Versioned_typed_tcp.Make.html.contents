FIX ME
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Constants.html">Constants</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Constants.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Constants.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<pre><span id="TYPElogfun"><span class="keyword">type</span> logfun </span>= <code class="type">[ `Recv of Recv.t | `Send of Send.t ] -&gt;
Remote_name.t -&gt; time_sent_received:<a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> -&gt; unit</code> </pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Hello.html">Hello</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Hello.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Hello.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Message_header.html">Message_header</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Message_header.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Message_header.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Connection.html">Connection</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Connection.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Connection.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> try_with : <code class="type">(?extract_exn:bool -&gt;
 ?run:[ `Now | `Schedule ] -&gt;
 ?rest:[ `Ignore | `Raise ] -&gt;
 (unit -&gt; 'a <a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a>) -&gt;
 ('a, exn) <a href="../core/Std.Result.html#TYPEt">Core.Std.Result.t</a> <a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a>)
<a href="Import.Monitor.html#TYPEwith_optional_monitor_name">Import.Monitor.with_optional_monitor_name</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> ignore_errors : <code class="type">(unit -&gt; 'a <a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a>) -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> try_with_timeout : <code class="type"><a href="../core/Std.Time.Span.html#TYPEt">Core.Std.Time.Span.t</a> -&gt;
(unit -&gt; 'a <a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a>) -&gt;
[&gt; `Error of exn | `Ok of 'a | `Timeout ] <a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a></code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Write_bin_prot_error.html">Write_bin_prot_error</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Write_bin_prot_error.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Write_bin_prot_error.html.contents" class="content_to_load"> </div>
	</div>
  </div>
 
      <pre><span><span class="keyword">val</span> wrap_write_bin_prot : <code class="type">sexp:('a -&gt; <a href="../core/Std.Sexp.html#TYPEt">Core.Std.Sexp.t</a>) -&gt;
tc:'a <a href="../core/Std.Bin_prot.Type_class.html#TYPEwriter">Core.Std.Bin_prot.Type_class.writer</a> -&gt;
writer:<a href="Import.Writer.html#TYPEt">Import.Writer.t</a> -&gt; name:string -&gt; 'a -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send_raw : <code class="type">writer:<a href="Import.Writer.html#TYPEt">Import.Writer.t</a> -&gt;
hdr:<a href="Versioned_typed_tcp.Make.Message_header.html#TYPEt">Message_header.t</a> -&gt; msg:<a href="../core/Std.Bigsubstring.html#TYPEt">Core.Std.Bigsubstring.t</a> -&gt; unit</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send_no_flush : <code class="type">logfun:([&gt; `Send of Send.t ] -&gt;
        'a -&gt; time_sent_received:<a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> -&gt; unit)
       option -&gt;
name:'a -&gt;
now:(unit -&gt; <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a>) -&gt;
<a href="Versioned_typed_tcp.Make.Connection.html#TYPEt">Connection.t</a> -&gt; Send.t -&gt; [&gt; `Not_sent | `Sent ]</code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> send : <code class="type">logfun:([&gt; `Send of Send.t ] -&gt;
        'a -&gt; time_sent_received:<a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> -&gt; unit)
       option -&gt;
name:'a -&gt;
now:(unit -&gt; <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a>) -&gt;
<a href="Versioned_typed_tcp.Make.Connection.html#TYPEt">Connection.t</a> -&gt;
Send.t -&gt; [&gt; `Dropped | `Sent of <a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> ] <a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a></code></span></pre>
      
    
 
      <pre><span><span class="keyword">val</span> negotiate : <code class="type">reader:<a href="Import.Reader.html#TYPEt">Import.Reader.t</a> -&gt;
writer:<a href="Import.Writer.html#TYPEt">Import.Writer.t</a> -&gt;
my_name:string -&gt;
auth_error:(<a href="Versioned_typed_tcp.Make.Hello.html#TYPEt">Hello.t</a> -&gt; 'a option) -&gt;
[&gt; `Auth_error of 'a
 | `Eof
 | `Ok of
     <a href="Versioned_typed_tcp.Make.Hello.html#TYPEt">Hello.t</a> * <a href="Versioned_typed_tcp.Version.html#TYPEt">Version.t</a> * Send.datum <a href="Versioned_typed_tcp.html#TYPEmarshal_fun">marshal_fun</a> * Recv.datum <a href="Versioned_typed_tcp.html#TYPEunmarshal_fun">unmarshal_fun</a>
 | `Version_error ]
<a href="../async_core/Deferred.html#TYPEt">Async_core.Deferred.t</a></code></span></pre>
      
    
<pre><span id="EXCEPTIONEof"><span class="keyword">exception</span> Eof</span></pre>

<pre><span id="EXCEPTIONUnconsumed_data"><span class="keyword">exception</span> Unconsumed_data</span> <span class="keyword">of</span> <code class="type">string</code></pre>

 
      <pre><span><span class="keyword">val</span> handle_incoming : <code class="type">logfun:([&gt; `Recv of Recv.t ] -&gt;
        'a -&gt; time_sent_received:<a href="../core/Std.Time.html#TYPEt">Core.Std.Time.t</a> -&gt; unit)
       option -&gt;
remote_name:'a -&gt;
ip:string -&gt;
con:<a href="Versioned_typed_tcp.Make.Connection.html#TYPEt">Connection.t</a> -&gt;
extend_disconnect:('a -&gt; exn -&gt; unit) -&gt;
extend_parse_error:('a -&gt; string -&gt; unit) -&gt;
extend_data:(('a, Recv.t) <a href="Versioned_typed_tcp.Read_result.html#TYPEt">Read_result.t</a> -&gt; unit) -&gt; unit</code></span></pre>
      
    
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Server.html">Server</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Server.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Server.html.contents" class="content_to_load"> </div>
	</div>
  </div>
<div class="expanding_content">
	<button onclick="expand_content(this)">+</button><pre><span class="keyword">module</span> <a href="Versioned_typed_tcp.Make.Client.html">Client</a> : <code class="code">sig</code> <a href="Versioned_typed_tcp.Make.Client.html">..</a> <code class="code">end</code></pre>
	<div class="content" style="display:none">
	<div file="Versioned_typed_tcp.Make.Client.html.contents" class="content_to_load"> </div>
	</div>
  </div>

<pre><code><span id="TYPEt"><span class="keyword">type</span> t </span>= </code></pre><table class="typetable">
		    <tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Neg_int8"><span class="constructor">Neg_int8</span></span></code></td><td class="typefieldcomment" align="left">Negative integer was positive or zero</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Int_code"><span class="constructor">Int_code</span></span></code></td><td class="typefieldcomment" align="left">Unknown integer code while reading integer</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Int_overflow"><span class="constructor">Int_overflow</span></span></code></td><td class="typefieldcomment" align="left">Overflow reading integer</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Nat0_code"><span class="constructor">Nat0_code</span></span></code></td><td class="typefieldcomment" align="left">Unknown integer code while reading natural number</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Nat0_overflow"><span class="constructor">Nat0_overflow</span></span></code></td><td class="typefieldcomment" align="left">Overflow reading natural number</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Int32_code"><span class="constructor">Int32_code</span></span></code></td><td class="typefieldcomment" align="left">Unknown integer code while reading 32bit integer</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Int64_code"><span class="constructor">Int64_code</span></span></code></td><td class="typefieldcomment" align="left">Unknown integer code while reading 64bit integer</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Nativeint_code"><span class="constructor">Nativeint_code</span></span></code></td><td class="typefieldcomment" align="left">Unknown integer code while reading native integer</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Unit_code"><span class="constructor">Unit_code</span></span></code></td><td class="typefieldcomment" align="left">Illegal unit value</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Bool_code"><span class="constructor">Bool_code</span></span></code></td><td class="typefieldcomment" align="left">Illegal boolean value</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Option_code"><span class="constructor">Option_code</span></span></code></td><td class="typefieldcomment" align="left">Illegal option code</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.String_too_long"><span class="constructor">String_too_long</span></span></code></td><td class="typefieldcomment" align="left">String too long</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Variant_tag"><span class="constructor">Variant_tag</span></span></code></td><td class="typefieldcomment" align="left">Untagged integer encoding for variant tag</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Array_too_long"><span class="constructor">Array_too_long</span></span></code></td><td class="typefieldcomment" align="left">Array too long</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Hashtbl_too_long"><span class="constructor">Hashtbl_too_long</span></span></code></td><td class="typefieldcomment" align="left">Hashtable too long</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Sum_tag"><span class="constructor">Sum_tag</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td><td class="typefieldcomment" align="left">Illegal sum tag for given type</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Variant"><span class="constructor">Variant</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td><td class="typefieldcomment" align="left">Illegal variant for given type</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Poly_rec_bound"><span class="constructor">Poly_rec_bound</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td><td class="typefieldcomment" align="left">Attempt to read data bound through polymorphic record fields</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Variant_wrong_type"><span class="constructor">Variant_wrong_type</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td><td class="typefieldcomment" align="left">Unexpected attempt to read variant with given non-variant type</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Silly_type"><span class="constructor">Silly_type</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td><td class="typefieldcomment" align="left"><code class="code">Silly_type type_name</code> indicates unhandled but silly case
            where a type of the sort <code class="code">type 'a type_name = 'a</code> is used
            with a polymorphic variant as type parameter and included
            in another polymorphic variant type.</td>
	   </tr><tr><td align="left" valign="top"><code><span class="keyword">|</span></code></td><td align="left" valign="top"><code><span id="TYPEELTt.Empty_type"><span class="constructor">Empty_type</span></span> <span class="keyword">of</span> <code class="type">string</code></code></td><td class="typefieldcomment" align="left">Attempt to read data that corresponds to an empty type.</td>
	   </tr></table>
      
    
 
      <pre><span><span class="keyword">val</span> to_string : <code class="type"><a href="Common.ReadError.html#TYPEt">t</a> -&gt; string</code></span></pre>
      
    
